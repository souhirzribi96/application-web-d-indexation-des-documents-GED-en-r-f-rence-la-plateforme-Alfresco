{"version":3,"file":"moment.umd.js","sources":["~/@mat-datetimepicker/moment/src/adapter/index.ts","~/@mat-datetimepicker/moment/src/adapter/moment-datetime-formats.ts","~/@mat-datetimepicker/moment/src/adapter/moment-datetime-adapter.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport {\n  MatMomentDateModule,\n  MomentDateModule\n} from '@angular/material-moment-adapter';\nimport {\n  DatetimeAdapter,\n  MAT_DATETIME_FORMATS\n} from '@mat-datetimepicker/core';\nimport { MomentDatetimeAdapter } from './moment-datetime-adapter';\nimport { MAT_MOMENT_DATETIME_FORMATS } from './moment-datetime-formats';\n\nexport {MomentDatetimeAdapter} from './moment-datetime-adapter';\nexport {MAT_MOMENT_DATETIME_FORMATS} from './moment-datetime-formats';\nexport class MomentDatetimeModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MomentDateModule],\n  providers: [\n    {\n      provide: DatetimeAdapter,\n      useClass: MomentDatetimeAdapter\n    }\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MomentDatetimeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMomentDatetimeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMomentDatetimeModule.ctorParameters;\n}\n\nexport class MatMomentDatetimeModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MomentDatetimeModule, MatMomentDateModule],\n  providers: [{provide: MAT_DATETIME_FORMATS, useValue: MAT_MOMENT_DATETIME_FORMATS}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatMomentDatetimeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMomentDatetimeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMomentDatetimeModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { MatDatetimeFormats } from '@mat-datetimepicker/core';\n\nexport const /** @type {?} */ MAT_MOMENT_DATETIME_FORMATS: MatDatetimeFormats = {\n  parse: {\n    dateInput: \"l\",\n    monthInput: \"MMMM\",\n    timeInput: \"LT\",\n    datetimeInput: \"L LT\"\n  },\n  display: {\n    dateInput: \"l\",\n    monthInput: \"MMMM\",\n    datetimeInput: \"L LT\",\n    timeInput: \"LT\",\n    monthYearLabel: \"MMM YYYY\",\n    dateA11yLabel: \"LL\",\n    monthYearA11yLabel: \"MMMM YYYY\"\n  }\n};\n","import {\n  Inject,\n  Injectable,\n  Optional\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_LOCALE\n} from '@angular/material';\nimport { DatetimeAdapter } from '@mat-datetimepicker/core';\n\n// import * as moment from \"moment\";\n// import { Moment } from \"moment\";\n// can't get this to build... ><\n\nimport * as _moment from 'moment';\n// tslint:disable no-duplicate-imports\n\nimport {\n  default as _rollupMoment,\n  Moment\n} from 'moment';\n// tslint:enable no-duplicate-imports\n\nconst /** @type {?} */ moment = _rollupMoment || _moment;\n/**\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\nexport class MomentDatetimeAdapter extends DatetimeAdapter<Moment> {\nprivate _localeData: {\n    firstDayOfWeek: number,\n    longMonths: string[],\n    shortMonths: string[],\n    dates: string[],\n    hours: string[],\n    minutes: string[],\n    longDaysOfWeek: string[],\n    shortDaysOfWeek: string[],\n    narrowDaysOfWeek: string[]\n  };\n/**\n * @param {?} matDateLocale\n * @param {?} _delegate\n */\nconstructor(  matDateLocale: string, _delegate: DateAdapter<Moment>) {\n    super(_delegate);\n    this.setLocale(matDateLocale || moment.locale());\n  }\n/**\n * @param {?} locale\n * @return {?}\n */\nsetLocale(locale: string) {\n    super.setLocale(locale);\n\n    const /** @type {?} */ momentLocaleData = moment.localeData(locale);\n    this._localeData = {\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n      longMonths: momentLocaleData.months(),\n      shortMonths: momentLocaleData.monthsShort(),\n      dates: range(31, (i) => super.createDate(2017, 0, i + 1).format(\"D\")),\n      hours: range(24, (i) => this.createDatetime(2017, 0, 1, i, 0).format(\"H\")),\n      minutes: range(60, (i) => this.createDatetime(2017, 0, 1, 1, i).format(\"m\")),\n      longDaysOfWeek: momentLocaleData.weekdays(),\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin()\n    };\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetHour(date: Moment): number {\n    return super.clone(date).hour();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMinute(date: Moment): number {\n    return super.clone(date).minute();\n  }\n/**\n * @param {?} startDate\n * @param {?} endDate\n * @return {?}\n */\nisInNextMonth(startDate: Moment, endDate: Moment): boolean {\n    const /** @type {?} */ nextMonth = this.getDateInNextMonth(startDate);\n    return super.sameMonthAndYear(nextMonth, endDate);\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @param {?} hour\n * @param {?} minute\n * @return {?}\n */\ncreateDatetime(year: number, month: number, date: number, hour: number, minute: number): Moment {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    if (hour < 0 || hour > 23) {\n      throw Error(`Invalid hour \"${hour}\". Hour has to be between 0 and 23.`);\n    }\n\n    if (minute < 0 || minute > 59) {\n      throw Error(`Invalid minute \"${minute}\". Minute has to be between 0 and 59.`);\n    }\n\n    // const result = moment({year, month, date, hour, minute}).locale(this.locale);\n    const /** @type {?} */ result = moment({year, month, date, hour, minute});\n\n    // If the result isn't valid, the date must have been out of bounds for this month.\n    if (!result.isValid()) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nprivate getDateInNextMonth(date: Moment) {\n    return super.clone(date).date(1).add({month: 1});\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetFirstDateOfMonth(date: Moment): Moment {\n    return super.clone(date).startOf(\"month\");\n  }\n/**\n * @return {?}\n */\ngetHourNames(): string[] {\n    return this._localeData.hours;\n  }\n/**\n * @return {?}\n */\ngetMinuteNames(): string[] {\n    return this._localeData.minutes;\n  }\n/**\n * @param {?} date\n * @param {?} hours\n * @return {?}\n */\naddCalendarHours(date: Moment, hours: number): Moment {\n    return super.clone(date).add({hours});\n  }\n/**\n * @param {?} date\n * @param {?} minutes\n * @return {?}\n */\naddCalendarMinutes(date: Moment, minutes: number): Moment {\n    return super.clone(date).add({minutes});\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ndeserialize(value: any): Moment | null {\n     return this._delegate.deserialize(value);\n   }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n{type: DateAdapter, },\n];\n}\n\nfunction MomentDatetimeAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nMomentDatetimeAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMomentDatetimeAdapter.ctorParameters;\n/** @type {?} */\nMomentDatetimeAdapter.prototype._localeData;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["MAT_DATETIME_FORMATS","MatMomentDateModule","NgModule","DatetimeAdapter","MomentDateModule","DateAdapter","Optional","Inject","MAT_DATE_LOCALE","Injectable","_rollupMoment","_moment"],"mappings":"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"}
