{"version":3,"file":"moment.umd.min.js","sources":["~/@mat-datetimepicker/moment/src/adapter/moment-datetime-adapter.ts","~/@mat-datetimepicker/moment/src/adapter/moment-datetime-formats.ts","~/@mat-datetimepicker/moment/src/adapter/index.ts"],"sourcesContent":["import {\n  Inject,\n  Injectable,\n  Optional\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_LOCALE\n} from '@angular/material';\nimport { DatetimeAdapter } from '@mat-datetimepicker/core';\n\n// import * as moment from \"moment\";\n// import { Moment } from \"moment\";\n// can't get this to build... ><\n\nimport * as _moment from 'moment';\n// tslint:disable no-duplicate-imports\n\nimport {\n  default as _rollupMoment,\n  Moment\n} from 'moment';\n// tslint:enable no-duplicate-imports\n\nconst /** @type {?} */ moment = _rollupMoment || _moment;\n/**\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\nexport class MomentDatetimeAdapter extends DatetimeAdapter<Moment> {\nprivate _localeData: {\n    firstDayOfWeek: number,\n    longMonths: string[],\n    shortMonths: string[],\n    dates: string[],\n    hours: string[],\n    minutes: string[],\n    longDaysOfWeek: string[],\n    shortDaysOfWeek: string[],\n    narrowDaysOfWeek: string[]\n  };\n/**\n * @param {?} matDateLocale\n * @param {?} _delegate\n */\nconstructor(  matDateLocale: string, _delegate: DateAdapter<Moment>) {\n    super(_delegate);\n    this.setLocale(matDateLocale || moment.locale());\n  }\n/**\n * @param {?} locale\n * @return {?}\n */\nsetLocale(locale: string) {\n    super.setLocale(locale);\n\n    const /** @type {?} */ momentLocaleData = moment.localeData(locale);\n    this._localeData = {\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n      longMonths: momentLocaleData.months(),\n      shortMonths: momentLocaleData.monthsShort(),\n      dates: range(31, (i) => super.createDate(2017, 0, i + 1).format(\"D\")),\n      hours: range(24, (i) => this.createDatetime(2017, 0, 1, i, 0).format(\"H\")),\n      minutes: range(60, (i) => this.createDatetime(2017, 0, 1, 1, i).format(\"m\")),\n      longDaysOfWeek: momentLocaleData.weekdays(),\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin()\n    };\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetHour(date: Moment): number {\n    return super.clone(date).hour();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMinute(date: Moment): number {\n    return super.clone(date).minute();\n  }\n/**\n * @param {?} startDate\n * @param {?} endDate\n * @return {?}\n */\nisInNextMonth(startDate: Moment, endDate: Moment): boolean {\n    const /** @type {?} */ nextMonth = this.getDateInNextMonth(startDate);\n    return super.sameMonthAndYear(nextMonth, endDate);\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @param {?} hour\n * @param {?} minute\n * @return {?}\n */\ncreateDatetime(year: number, month: number, date: number, hour: number, minute: number): Moment {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    if (hour < 0 || hour > 23) {\n      throw Error(`Invalid hour \"${hour}\". Hour has to be between 0 and 23.`);\n    }\n\n    if (minute < 0 || minute > 59) {\n      throw Error(`Invalid minute \"${minute}\". Minute has to be between 0 and 59.`);\n    }\n\n    // const result = moment({year, month, date, hour, minute}).locale(this.locale);\n    const /** @type {?} */ result = moment({year, month, date, hour, minute});\n\n    // If the result isn't valid, the date must have been out of bounds for this month.\n    if (!result.isValid()) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nprivate getDateInNextMonth(date: Moment) {\n    return super.clone(date).date(1).add({month: 1});\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetFirstDateOfMonth(date: Moment): Moment {\n    return super.clone(date).startOf(\"month\");\n  }\n/**\n * @return {?}\n */\ngetHourNames(): string[] {\n    return this._localeData.hours;\n  }\n/**\n * @return {?}\n */\ngetMinuteNames(): string[] {\n    return this._localeData.minutes;\n  }\n/**\n * @param {?} date\n * @param {?} hours\n * @return {?}\n */\naddCalendarHours(date: Moment, hours: number): Moment {\n    return super.clone(date).add({hours});\n  }\n/**\n * @param {?} date\n * @param {?} minutes\n * @return {?}\n */\naddCalendarMinutes(date: Moment, minutes: number): Moment {\n    return super.clone(date).add({minutes});\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ndeserialize(value: any): Moment | null {\n     return this._delegate.deserialize(value);\n   }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n{type: DateAdapter, },\n];\n}\n\nfunction MomentDatetimeAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nMomentDatetimeAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMomentDatetimeAdapter.ctorParameters;\n/** @type {?} */\nMomentDatetimeAdapter.prototype._localeData;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { MatDatetimeFormats } from '@mat-datetimepicker/core';\n\nexport const /** @type {?} */ MAT_MOMENT_DATETIME_FORMATS: MatDatetimeFormats = {\n  parse: {\n    dateInput: \"l\",\n    monthInput: \"MMMM\",\n    timeInput: \"LT\",\n    datetimeInput: \"L LT\"\n  },\n  display: {\n    dateInput: \"l\",\n    monthInput: \"MMMM\",\n    datetimeInput: \"L LT\",\n    timeInput: \"LT\",\n    monthYearLabel: \"MMM YYYY\",\n    dateA11yLabel: \"LL\",\n    monthYearA11yLabel: \"MMMM YYYY\"\n  }\n};\n","import { NgModule } from '@angular/core';\nimport {\n  MatMomentDateModule,\n  MomentDateModule\n} from '@angular/material-moment-adapter';\nimport {\n  DatetimeAdapter,\n  MAT_DATETIME_FORMATS\n} from '@mat-datetimepicker/core';\nimport { MomentDatetimeAdapter } from './moment-datetime-adapter';\nimport { MAT_MOMENT_DATETIME_FORMATS } from './moment-datetime-formats';\n\nexport {MomentDatetimeAdapter} from './moment-datetime-adapter';\nexport {MAT_MOMENT_DATETIME_FORMATS} from './moment-datetime-formats';\nexport class MomentDatetimeModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MomentDateModule],\n  providers: [\n    {\n      provide: DatetimeAdapter,\n      useClass: MomentDatetimeAdapter\n    }\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MomentDatetimeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMomentDatetimeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMomentDatetimeModule.ctorParameters;\n}\n\nexport class MatMomentDatetimeModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MomentDatetimeModule, MatMomentDateModule],\n  providers: [{provide: MAT_DATETIME_FORMATS, useValue: MAT_MOMENT_DATETIME_FORMATS}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatMomentDatetimeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMomentDatetimeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMomentDatetimeModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["range","length","valueFunction","valuesArray","Array","i","moment","_rollupMoment","_moment","MomentDatetimeAdapter","_super","matDateLocale","_delegate","_this","call","this","setLocale","locale","__extends","prototype","momentLocaleData","localeData","_localeData","firstDayOfWeek","longMonths","months","shortMonths","monthsShort","dates","createDate","format","hours","createDatetime","minutes","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","getHour","date","clone","hour","getMinute","minute","isInNextMonth","startDate","endDate","nextMonth","getDateInNextMonth","sameMonthAndYear","year","month","Error","result","isValid","add","getFirstDateOfMonth","startOf","getHourNames","getMinuteNames","addCalendarHours","addCalendarMinutes","deserialize","value","DatetimeAdapter","decorators","type","Injectable","ctorParameters","undefined","Optional","Inject","args","MAT_DATE_LOCALE","DateAdapter","MAT_MOMENT_DATETIME_FORMATS","parse","dateInput","monthInput","timeInput","datetimeInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","MomentDatetimeModule","NgModule","imports","MomentDateModule","providers","provide","useClass","MatMomentDatetimeModule","MatMomentDateModule","MAT_DATETIME_FORMATS","useValue"],"mappings":"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"}
