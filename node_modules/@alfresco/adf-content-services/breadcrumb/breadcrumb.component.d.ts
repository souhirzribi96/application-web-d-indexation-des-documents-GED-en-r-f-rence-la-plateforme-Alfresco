/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnChanges, SimpleChanges, OnInit } from '@angular/core';
import { MinimalNodeEntryEntity, PathElementEntity } from 'alfresco-js-api';
import { DocumentListComponent } from '../document-list';
export declare class BreadcrumbComponent implements OnInit, OnChanges {
    /** Active node, builds UI based on folderNode.path.elements collection. */
    folderNode: MinimalNodeEntryEntity;
    /** (optional) Name of the root element of the breadcrumb. You can use
     * this property to rename "Company Home" to "Personal Files" for
     * example. You can use an i18n resource key for the property value.
     */
    root: string;
    /** (optional) The id of the root element. You can use this property
     * to set a custom element the breadcrumb should start with.
     */
    rootId: string;
    /** (optional) Document List component to operate with. The list will
     * update when the breadcrumb is clicked.
     */
    target: DocumentListComponent;
    /** Transformation to be performed on the chosen/folder node before building
     * the breadcrumb UI. Can be useful when custom formatting is needed for the
     * breadcrumb. You can change the path elements from the node that are used to
     * build the breadcrumb using this function.
     */
    transform: (node) => any;
    route: PathElementEntity[];
    readonly hasRoot: boolean;
    /** Emitted when the user clicks on a breadcrumb. */
    navigate: EventEmitter<PathElementEntity>;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    parseRoute(node: MinimalNodeEntryEntity): PathElementEntity[];
    private getElementPosition(route, nodeId);
    onRoutePathClick(route: PathElementEntity, event?: Event): void;
}
