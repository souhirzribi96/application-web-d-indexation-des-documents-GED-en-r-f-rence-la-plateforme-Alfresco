/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, FileModel, LogService, NodePermissionSubject, TranslationService, UploadService } from '@alfresco/adf-core';
import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { PermissionModel } from '../../document-list/models/permissions.model';
import 'rxjs/add/observable/throw';
import { UploadBase } from './base-upload/upload-base';
export declare class UploadButtonComponent extends UploadBase implements OnInit, OnChanges, NodePermissionSubject {
    private uploadService;
    private contentService;
    protected translateService: TranslationService;
    protected logService: LogService;
    /** Toggles component disabled state (if there is no node permission checking). */
    disabled: boolean;
    /** Allows/disallows upload folders (only for Chrome). */
    uploadFolders: boolean;
    /** Allows/disallows multiple files */
    multipleFiles: boolean;
    /** Toggles versioning. */
    versioning: boolean;
    /** Sets a limit on the maximum size (in bytes) of a file to be uploaded.
     * Has no effect if undefined.
     */
    maxFilesSize: number;
    /** Defines the text of the upload button. */
    staticTitle: string;
    /** Custom tooltip text. */
    tooltip: string;
    /** The ID of the root. Use the nodeId for
     * Content Services or the taskId/processId for Process Services.
     */
    rootFolderId: string;
    /** Emitted when the file is uploaded successfully. */
    success: EventEmitter<{}>;
    /** Emitted when an error occurs. */
    error: EventEmitter<{}>;
    /** Emitted when a folder is created. */
    createFolder: EventEmitter<{}>;
    /** Emitted when delete permission is missing. */
    permissionEvent: EventEmitter<PermissionModel>;
    private hasPermission;
    private permissionValue;
    constructor(uploadService: UploadService, contentService: ContentService, translateService: TranslationService, logService: LogService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    isButtonDisabled(): boolean;
    onFilesAdded($event: any): void;
    onDirectoryAdded($event: any): void;
    /**
     * Upload a list of file in the specified path
     * @param files
     * @param path
     */
    uploadFiles(files: File[]): void;
    /**
     * Creates FileModel from File
     *
     * @param file
     */
    protected createFileModel(file: File): FileModel;
    /**
     * Checks if the given file is an acceptable size
     *
     * @param file FileModel
     */
    private isFileSizeAcceptable(file);
    private isFileSizeAllowed(file);
    private isMaxFileSizeDefined();
    private isFileSizeCorrect(file);
    checkPermission(): void;
    private hasCreatePermission(node);
}
