/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MatDialog } from '@angular/material';
import { EventEmitter } from '@angular/core';
import { ContentService } from '@alfresco/adf-core';
import { Subject } from 'rxjs/Subject';
import { Observable } from 'rxjs/Observable';
import { MinimalNodeEntryEntity } from 'alfresco-js-api';
import { SitesService, TranslationService } from '@alfresco/adf-core';
import { DocumentListService } from '../document-list/services/document-list.service';
import 'rxjs/operator/switchMap';
export declare class ContentNodeDialogService {
    private dialog;
    private contentService;
    private documentListService;
    private siteService;
    private translation;
    error: EventEmitter<any>;
    constructor(dialog: MatDialog, contentService: ContentService, documentListService: DocumentListService, siteService: SitesService, translation: TranslationService);
    /** Opens a file browser at a chosen folder location. */
    /** @param folderNodeId ID of the folder to use */
    openFileBrowseDialogByFolderId(folderNodeId: string): Observable<MinimalNodeEntryEntity[]>;
    /**
     * Opens a lock node dialog
     *
     * @param contentEntry Node to lock
     */
    openLockNodeDialog(contentEntry: MinimalNodeEntryEntity): Subject<string>;
    /** Opens a file browser at a chosen site location. */
    openFileBrowseDialogBySite(): Observable<MinimalNodeEntryEntity[]>;
    /** Opens a folder browser at a chosen site location. */
    openFolderBrowseDialogBySite(): Observable<MinimalNodeEntryEntity[]>;
    /** Opens a folder browser at a chosen folder location. */
    /** @param folderNodeId ID of the folder to use */
    openFolderBrowseDialogByFolderId(folderNodeId: string): Observable<MinimalNodeEntryEntity[]>;
    /** Opens a dialog to copy or move an item to a new location. */
    /** @param action Name of the action (eg, "Copy" or "Move") to show in the title */
    /** @param contentEntry Item to be copied or moved */
    /** @param permission Permission for the operation */
    openCopyMoveDialog(action: string, contentEntry: MinimalNodeEntryEntity, permission?: string): Observable<MinimalNodeEntryEntity[]>;
    /** Gets the translation of the dialog title. */
    /** @param action Name of the action to display in the dialog title */
    /** @param name Name of the item on which the action is being performed */
    getTitleTranslation(action: string, name: string): string;
    /** Opens a dialog to choose a folder to upload. */
    /** @param action Name of the action to show in the title */
    /** @param contentEntry  Item to upload */
    openUploadFolderDialog(action: string, contentEntry: MinimalNodeEntryEntity): Observable<MinimalNodeEntryEntity[]>;
    /** Opens a dialog to choose a file to upload. */
    /** @param action Name of the action to show in the title */
    /** @param contentEntry Item to upload */
    openUploadFileDialog(action: string, contentEntry: MinimalNodeEntryEntity): Observable<MinimalNodeEntryEntity[]>;
    private openContentNodeDialog(data, currentPanelClass, chosenWidth);
    private imageResolver(row, col);
    private rowFilter(currentNodeId, row);
    private isNodeFile(entry);
    private hasPermissionOnNodeFolder(entry);
    private isNodeFolder(entry);
    private isCopyMoveSelectionValid(entry);
    private hasEntityCreatePermission(entry);
    private isSite(entry);
    /** Closes the currently open dialog. */
    close(): void;
}
