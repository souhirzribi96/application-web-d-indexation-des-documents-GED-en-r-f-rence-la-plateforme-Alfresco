/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, AuthenticationService, ContentService, LogService, PermissionsEnum, ThumbnailService } from '@alfresco/adf-core';
import { MinimalNodeEntity, MinimalNodeEntryEntity, NodeEntry, NodePaging } from 'alfresco-js-api';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/throw';
export declare class DocumentListService {
    private contentService;
    private apiService;
    private logService;
    private thumbnailService;
    static ROOT_ID: string;
    constructor(authService: AuthenticationService, contentService: ContentService, apiService: AlfrescoApiService, logService: LogService, thumbnailService: ThumbnailService);
    private getNodesPromise(folder, opts?, includeFields?);
    /**
     * Deletes a node.
     * @param nodeId ID of the node to delete
     * @returns Empty response when the operation is complete
     */
    deleteNode(nodeId: string): Observable<any>;
    /**
     * Copy a node to destination node
     *
     * @param nodeId The id of the node to be copied
     * @param targetParentId The id of the folder where the node will be copied
     * @returns NodeEntry for the copied node
     */
    copyNode(nodeId: string, targetParentId: string): Observable<any>;
    /**
     * Move a node to destination node
     *
     * @param nodeId The id of the node to be moved
     * @param targetParentId The id of the folder where the node will be moved
     * @returns NodeEntry for the moved node
     */
    moveNode(nodeId: string, targetParentId: string): Observable<any>;
    /**
     * Create a new folder in the path.
     * @param name Folder name
     * @param parentId Parent folder ID
     * @returns Details of the created folder node
     */
    createFolder(name: string, parentId: string): Observable<MinimalNodeEntity>;
    /**
     * Gets the folder node with the specified relative name path below the root node.
     * @param folder Path to folder.
     * @param opts Options.
     * @param includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @returns Details of the folder
     */
    getFolder(folder: string, opts?: any, includeFields?: string[]): Observable<NodePaging>;
    /**
     * Gets a node via its node ID.
     * @param nodeId
     * @param includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @returns Details of the folder
     */
    getNode(nodeId: string, includeFields?: string[]): Observable<NodeEntry>;
    /**
     * @deprecated 2.3.0
     * Gets a folder node via its node ID.
     * @param nodeId ID of the folder node
     * @param includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @returns Details of the folder
     */
    getFolderNode(nodeId: string, includeFields?: string[]): Observable<MinimalNodeEntryEntity>;
    /**
     * Get thumbnail URL for the given document node.
     * @param node Node to get URL for.
     * @returns Thumbnail URL string
     */
    getDocumentThumbnailUrl(node: MinimalNodeEntity): string;
    /**
     * Gets the icon that represents a MIME type.
     * @param mimeType MIME type to get the icon for
     * @returns Path to the icon file
     */
    getMimeTypeIcon(mimeType: string): string;
    /**
     * Gets a default icon for MIME types with no specific icon.
     * @returns Path to the icon file
     */
    getDefaultMimeTypeIcon(): string;
    /**
     * @Deprecated 2.3.0 use the one in the content service
     * Checks if a node has the specified permission.
     * @param node Target node
     * @param permission Permission level to query
     * @returns True if the node has the permission, false otherwise
     */
    hasPermission(node: any, permission: PermissionsEnum | string): boolean;
    private handleError(error);
}
