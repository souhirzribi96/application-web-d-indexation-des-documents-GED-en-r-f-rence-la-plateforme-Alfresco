/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AfterContentInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ContentService, DataCellEvent, DataRowActionEvent, DataTableComponent, PaginatedComponent, AppConfigService, DataColumnListComponent, UserPreferencesService, PaginationModel } from '@alfresco/adf-core';
import { MinimalNodeEntity, MinimalNodeEntryEntity, NodePaging } from 'alfresco-js-api';
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { ShareDataRow } from './../data/share-data-row.model';
import { ShareDataTableAdapter } from './../data/share-datatable-adapter';
import { ContentActionModel } from './../models/content-action.model';
import { PermissionStyleModel } from './../models/permissions-style.model';
import { DocumentListService } from './../services/document-list.service';
import { NodeEntityEvent, NodeEntryEvent } from './node.event';
import { CustomResourcesService } from './../services/custom-resources.service';
import { NavigableComponentInterface } from '../../breadcrumb/navigable-component.interface';
export declare enum PaginationStrategy {
    Finite = 0,
    Infinite = 1,
}
export declare class DocumentListComponent implements OnInit, OnChanges, OnDestroy, AfterContentInit, PaginatedComponent, NavigableComponentInterface {
    private documentListService;
    private ngZone;
    private elementRef;
    private appConfig;
    private preferences;
    private customResourcesService;
    private contentService;
    static SINGLE_CLICK_NAVIGATION: string;
    static DOUBLE_CLICK_NAVIGATION: string;
    static DEFAULT_PAGE_SIZE: number;
    columnList: DataColumnListComponent;
    /** Include additional information about the node in the server request.for example: association, isLink, isLocked and others. */
    includeFields: string[];
    /** Change the display mode of the table. Can be "list" or "gallery". */
    display: string;
    /** Define a set of CSS styles styles to apply depending on the permission
     * of the user on that node. See the Permission Style model
     * page for further details and examples.
     */
    permissionsStyle: PermissionStyleModel[];
    /** The default route for all the location-based columns (if declared). */
    locationFormat: string;
    /** Toggles navigation to folder content or file preview */
    navigate: boolean;
    /** Toggles the header */
    showHeader: boolean;
    /** User interaction for folder navigation or file preview.
     * Valid values are "click" and "dblclick". Default value: "dblclick"
     */
    navigationMode: string;
    /** Show document thumbnails rather than icons */
    thumbnails: boolean;
    /** Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,
     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.
     */
    selectionMode: string;
    /** Toggles multiselect mode */
    multiselect: boolean;
    /** Toggles content actions for each row */
    contentActions: boolean;
    /** Position of the content actions dropdown menu. Can be set to "left" or "right". */
    contentActionsPosition: string;
    /** Toggles context menus for each row */
    contextMenuActions: boolean;
    /** Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg' */
    emptyFolderImageUrl: string;
    /** Toggle file drop support for rows (see Upload Directive for further details */
    allowDropFiles: boolean;
    /** Defines default sorting. The format is an array of 2 strings `[key, direction]`
     * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to
     * override the default sorting detected by the component based on columns.
     */
    sorting: string[];
    /** The inline style to apply to every row. See
     * the Angular NgStyle
     * docs for more details and usage examples.
     */
    rowStyle: string;
    /** The CSS class to apply to every row */
    rowStyleClass: string;
    /** Toggles the loading state and animated spinners for the component. Used in
     * combination with `navigate=false` to perform custom navigation and loading
     * state indication.
     */
    loading: boolean;
    /** Custom row filter */
    rowFilter: any | null;
    /** Custom image resolver */
    imageResolver: any | null;
    /** The ID of the folder node to display or a reserved string alias for special sources */
    currentFolderId: string;
    /** @deprecated 2.3.0 use currentFolderId or node */
    /** Currently displayed folder node */
    folderNode: MinimalNodeEntryEntity;
    /** The Document list will show all the nodes contained in the NodePaging entity */
    node: NodePaging;
    /** Default value is stored into user preference settings use it only if you are not using the pagination */
    maxItems: number;
    /** @deprecated 2.3.0 define it in pagination */
    /** Number of elements to skip over for pagination purposes */
    skipCount: number;
    /** @deprecated 2.3.0 */
    /** Set document list to work in infinite scrolling mode */
    enableInfiniteScrolling: boolean;
    /** Emitted when the user clicks a list node */
    nodeClick: EventEmitter<NodeEntityEvent>;
    /** Emitted when the user double-clicks a list node */
    nodeDblClick: EventEmitter<NodeEntityEvent>;
    /** Emitted when the current display folder changes */
    folderChange: EventEmitter<NodeEntryEvent>;
    /** Emitted when the user acts upon files with either single or double click
     * (depends on `navigation-mode`). Useful for integration with the
     * Viewer component.
     */
    preview: EventEmitter<NodeEntityEvent>;
    /** Emitted when the Document List has loaded all items and is ready for use */
    ready: EventEmitter<NodePaging>;
    /** Emitted when the API fails to get the Document List data */
    error: EventEmitter<any>;
    dataTable: DataTableComponent;
    actions: ContentActionModel[];
    emptyFolderTemplate: TemplateRef<any>;
    noPermissionTemplate: TemplateRef<any>;
    contextActionHandler: Subject<any>;
    data: ShareDataTableAdapter;
    noPermission: boolean;
    selection: MinimalNodeEntity[];
    private _pagination;
    private layoutPresets;
    private contextActionHandlerSubscription;
    constructor(documentListService: DocumentListService, ngZone: NgZone, elementRef: ElementRef, appConfig: AppConfigService, preferences: UserPreferencesService, customResourcesService: CustomResourcesService, contentService: ContentService);
    getContextActions(node: MinimalNodeEntity): {
        model: ContentActionModel;
        node: MinimalNodeEntity;
        subject: Subject<any>;
    }[];
    /** @deprecated 2.3.0 define it in pagination */
    readonly supportedPageSizes: number[];
    readonly hasCustomLayout: boolean;
    private getDefaultSorting();
    private getLayoutPreset(name?);
    readonly pagination: BehaviorSubject<PaginationModel>;
    isEmptyTemplateDefined(): boolean;
    isNoPermissionTemplateDefined(): boolean;
    isMobile(): boolean;
    isEmpty(): boolean;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    reload(): void;
    contextActionCallback(action: any): void;
    getNodeActions(node: MinimalNodeEntity | any): ContentActionModel[];
    disableActionsWithNoPermissions(node: MinimalNodeEntity, action: ContentActionModel): void;
    onShowContextMenu(e?: Event): void;
    performNavigation(node: MinimalNodeEntity): boolean;
    performCustomSourceNavigation(node: MinimalNodeEntity): boolean;
    updateFolderData(node: MinimalNodeEntity): void;
    updateCustomSourceData(nodeId: string): void;
    /**
     * Invoked when executing content action for a document or folder.
     * @param node Node to be the context of the execution.
     * @param action Action to be executed against the context.
     */
    executeContentAction(node: MinimalNodeEntity, action: ContentActionModel): void;
    loadFolder(): Promise<any>;
    loadFolderByNodeId(nodeId: string): void;
    loadFolderNodesByFolderNodeId(id: string, pagination: PaginationModel): Promise<any>;
    resetSelection(): void;
    private onPageLoaded(nodePaging);
    /**
     * Creates a set of predefined columns.
     */
    setupDefaultColumns(preset?: string): void;
    onPreviewFile(node: MinimalNodeEntity): void;
    onNodeClick(node: MinimalNodeEntity): void;
    onNodeDblClick(node: MinimalNodeEntity): void;
    onNodeSelect(event: {
        row: ShareDataRow;
        selection: Array<ShareDataRow>;
    }): void;
    onNodeUnselect(event: {
        row: ShareDataRow;
        selection: Array<ShareDataRow>;
    }): void;
    onShowRowContextMenu(event: DataCellEvent): void;
    onShowRowActionsMenu(event: DataCellEvent): void;
    onExecuteRowAction(event: DataRowActionEvent): void;
    private enforceSingleClickNavigationForMobile();
    canNavigateFolder(node: MinimalNodeEntity): boolean;
    private loadLayoutPresets();
    private onDataReady(nodePaging);
    updatePagination(pagination: PaginationModel): void;
    navigateTo(nodeId: string): void;
    private resetNewFolderPagination();
    getCorrespondingNodeIds(nodeId: string): Observable<string[]>;
    ngOnDestroy(): void;
    private handleError(err);
}
