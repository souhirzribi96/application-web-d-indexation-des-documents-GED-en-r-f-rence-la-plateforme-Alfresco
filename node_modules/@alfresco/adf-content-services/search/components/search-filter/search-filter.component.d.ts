/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnInit } from '@angular/core';
import { MatCheckboxChange } from '@angular/material';
import { SearchService } from '@alfresco/adf-core';
import { SearchQueryBuilderService } from '../../search-query-builder.service';
import { FacetQuery } from '../../facet-query.interface';
import { ResponseFacetField } from '../../response-facet-field.interface';
import { FacetFieldBucket } from '../../facet-field-bucket.interface';
import { SearchCategory } from '../../search-category.interface';
import { ResponseFacetQuery } from '../../response-facet-query.interface';
export declare class SearchFilterComponent implements OnInit {
    queryBuilder: SearchQueryBuilderService;
    private search;
    selectedFacetQueries: string[];
    selectedBuckets: FacetFieldBucket[];
    responseFacetQueries: FacetQuery[];
    responseFacetFields: ResponseFacetField[];
    constructor(queryBuilder: SearchQueryBuilderService, search: SearchService);
    ngOnInit(): void;
    onCategoryExpanded(category: SearchCategory): void;
    onCategoryCollapsed(category: SearchCategory): void;
    onFacetFieldExpanded(field: ResponseFacetField): void;
    onFacetFieldCollapsed(field: ResponseFacetField): void;
    onFacetQueryToggle(event: MatCheckboxChange, query: ResponseFacetQuery): void;
    onFacetToggle(event: MatCheckboxChange, field: ResponseFacetField, bucket: FacetFieldBucket): void;
    unselectFacetQuery(label: string): void;
    unselectFacetBucket(bucket: FacetFieldBucket): void;
    onDataLoaded(data: any): void;
}
