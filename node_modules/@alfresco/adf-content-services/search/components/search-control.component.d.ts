/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AuthenticationService, ThumbnailService } from '@alfresco/adf-core';
import { EventEmitter, OnDestroy, OnInit, ElementRef, TemplateRef } from '@angular/core';
import { MinimalNodeEntity, QueryBody } from 'alfresco-js-api';
import { SearchComponent } from './search.component';
import { EmptySearchResultComponent } from './empty-search-result.component';
export declare class SearchControlComponent implements OnInit, OnDestroy {
    authService: AuthenticationService;
    private thumbnailService;
    /** Toggles whether to use an expanding search control. If false
     * then a regular input is used.
     */
    expandable: boolean;
    /** Toggles highlighting of the search term in the results. */
    highlight: boolean;
    /** Type of the input field to render, e.g. "search" or "text" (default). */
    inputType: string;
    /** Toggles auto-completion of the search input field. */
    autocomplete: boolean;
    /** Toggles "find-as-you-type" suggestions for possible matches. */
    liveSearchEnabled: boolean;
    /** Maximum number of results to show in the live search. */
    liveSearchMaxResults: number;
    /** @deprecated in 2.1.0 */
    customQueryBody: QueryBody;
    /** Emitted when the search is submitted pressing ENTER button.
     * The search term is provided as value of the event.
     */
    submit: EventEmitter<any>;
    /** Emitted when the search term is changed. The search term is provided
     * in the 'value' property of the returned object.  If the term is less
     * than three characters in length then the term is truncated to an empty
     * string.
     */
    searchChange: EventEmitter<string>;
    /** Emitted when a file item from the list of "find-as-you-type" results is selected. */
    optionClicked: EventEmitter<any>;
    searchAutocomplete: SearchComponent;
    searchInput: ElementRef;
    private listResultElement;
    emptySearchTemplate: EmptySearchResultComponent;
    searchTerm: string;
    subscriptAnimationState: string;
    noSearchResultTemplate: TemplateRef<any>;
    private toggleSearch;
    private focusSubject;
    constructor(authService: AuthenticationService, thumbnailService: ThumbnailService);
    applySearchFocus(animationDoneEvent: any): void;
    ngOnInit(): void;
    isNoSearchTemplatePresent(): boolean;
    ngOnDestroy(): void;
    isLoggedIn(): boolean;
    searchSubmit(event: any): void;
    inputChange(event: any): void;
    getAutoComplete(): string;
    getMimeTypeIcon(node: MinimalNodeEntity): string;
    isSearchBarActive(): boolean;
    toggleSearchBar(): void;
    elementClicked(item: any): void;
    onFocus($event: any): void;
    onBlur($event: any): void;
    activateToolbar(): void;
    selectFirstResult(): void;
    onRowArrowDown($event: KeyboardEvent): void;
    onRowArrowUp($event: KeyboardEvent): void;
    private setupFocusEventHandlers();
    private getNextElementSibling(node);
    private getPreviousElementSibling(node);
}
