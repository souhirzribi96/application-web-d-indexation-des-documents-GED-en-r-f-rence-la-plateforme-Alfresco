{
  "version": 3,
  "file": "adf-content-services.umd.min.js",
  "sources": [
    "ng://@alfresco/adf-content-services/node_modules/tslib/tslib.es6.js",
    "ng://@alfresco/adf-content-services/out/dialogs/download-zip.dialog.ts",
    "ng://@alfresco/adf-content-services/out/directives/node-download.directive.ts",
    "ng://@alfresco/adf-content-services/out/dialogs/share.dialog.ts",
    "ng://@alfresco/adf-content-services/out/directives/node-share.directive.ts",
    "ng://@alfresco/adf-content-services/out/material.module.ts",
    "ng://@alfresco/adf-content-services/out/document-list/services/document-list.service.ts",
    "ng://@alfresco/adf-content-services/out/content-node-selector/content-node-selector.component.ts",
    "ng://@alfresco/adf-content-services/out/dialogs/node-lock.dialog.ts",
    "ng://@alfresco/adf-content-services/out/content-node-selector/content-node-dialog.service.ts",
    "ng://@alfresco/adf-content-services/out/directives/node-lock.directive.ts",
    "ng://@alfresco/adf-content-services/out/directives/content-directive.module.ts",
    "ng://@alfresco/adf-content-services/out/social/services/rating.service.ts",
    "ng://@alfresco/adf-content-services/out/social/rating.component.ts",
    "ng://@alfresco/adf-content-services/out/social/like.component.ts",
    "ng://@alfresco/adf-content-services/out/social/social.module.ts",
    "ng://@alfresco/adf-content-services/out/tag/services/tag.service.ts",
    "ng://@alfresco/adf-content-services/out/tag/tag-actions.component.ts",
    "ng://@alfresco/adf-content-services/out/tag/tag-list.component.ts",
    "ng://@alfresco/adf-content-services/out/tag/tag-node-list.component.ts",
    "ng://@alfresco/adf-content-services/out/tag/tag.module.ts",
    "ng://@alfresco/adf-content-services/out/webscript/webscript.component.ts",
    "ng://@alfresco/adf-content-services/out/webscript/webscript.module.ts",
    "ng://@alfresco/adf-content-services/out/document-list/data/share-data-row.model.ts",
    "ng://@alfresco/adf-content-services/out/document-list/data/share-datatable-adapter.ts",
    "ng://@alfresco/adf-content-services/out/document-list/models/preset.model.ts",
    "ng://@alfresco/adf-content-services/out/document-list/models/content-action.model.ts",
    "ng://@alfresco/adf-content-services/out/document-list/components/node.event.ts",
    "ng://@alfresco/adf-content-services/out/document-list/services/custom-resources.service.ts",
    "ng://@alfresco/adf-content-services/out/document-list/components/document-list.component.ts",
    "ng://@alfresco/adf-content-services/out/document-list/components/content-column/content-column-list.component.ts",
    "ng://@alfresco/adf-content-services/out/document-list/components/content-column/content-column.component.ts",
    "ng://@alfresco/adf-content-services/out/document-list/models/permissions.model.ts",
    "ng://@alfresco/adf-content-services/out/document-list/services/node-actions.service.ts",
    "ng://@alfresco/adf-content-services/out/document-list/services/document-actions.service.ts",
    "ng://@alfresco/adf-content-services/out/document-list/services/folder-actions.service.ts",
    "ng://@alfresco/adf-content-services/out/document-list/components/content-action/content-action-list.component.ts",
    "ng://@alfresco/adf-content-services/out/document-list/components/content-action/content-action.component.ts",
    "ng://@alfresco/adf-content-services/out/document-list/components/empty-folder/empty-folder-content.directive.ts",
    "ng://@alfresco/adf-content-services/out/document-list/components/no-permission/no-permission-content.directive.ts",
    "ng://@alfresco/adf-content-services/out/document-list/models/document-library.model.ts",
    "ng://@alfresco/adf-content-services/out/document-list/models/permissions-style.model.ts",
    "ng://@alfresco/adf-content-services/out/upload/components/file-uploading-list.component.ts",
    "ng://@alfresco/adf-content-services/out/upload/components/file-uploading-dialog.component.ts",
    "ng://@alfresco/adf-content-services/out/upload/components/file-uploading-list-row.component.ts",
    "ng://@alfresco/adf-content-services/out/upload/components/base-upload/upload-base.ts",
    "ng://@alfresco/adf-content-services/out/upload/components/upload-button.component.ts",
    "ng://@alfresco/adf-content-services/out/upload/components/upload-version-button.component.ts",
    "ng://@alfresco/adf-content-services/out/upload/components/upload-drag-area.component.ts",
    "ng://@alfresco/adf-content-services/out/upload/directives/file-draggable.directive.ts",
    "ng://@alfresco/adf-content-services/out/upload/upload.module.ts",
    "ng://@alfresco/adf-content-services/out/document-list/document-list.module.ts",
    "ng://@alfresco/adf-content-services/out/search/search-query-builder.service.ts",
    "ng://@alfresco/adf-content-services/out/search/components/search.component.ts",
    "ng://@alfresco/adf-content-services/out/search/components/empty-search-result.component.ts",
    "ng://@alfresco/adf-content-services/out/search/components/search-control.component.ts",
    "ng://@alfresco/adf-content-services/out/search/components/search-trigger.directive.ts",
    "ng://@alfresco/adf-content-services/out/search/components/search-filter/search-filter.component.ts",
    "ng://@alfresco/adf-content-services/out/search/components/search-chip-list/search-chip-list.component.ts",
    "ng://@alfresco/adf-content-services/out/search/components/search-text/search-text.component.ts",
    "ng://@alfresco/adf-content-services/out/search/components/search-radio/search-radio.component.ts",
    "ng://@alfresco/adf-content-services/out/search/components/search-fields/search-fields.component.ts",
    "ng://@alfresco/adf-content-services/out/search/components/search-scope-locations/search-scope-locations.component.ts",
    "ng://@alfresco/adf-content-services/out/search/components/search-widget-container/search-widgets.module.ts",
    "ng://@alfresco/adf-content-services/out/search/components/search-widget-container/search-widget-container.component.ts",
    "ng://@alfresco/adf-content-services/out/search/search.module.ts",
    "ng://@alfresco/adf-content-services/out/site-dropdown/sites-dropdown.component.ts",
    "ng://@alfresco/adf-content-services/out/site-dropdown/sites-dropdown.module.ts",
    "ng://@alfresco/adf-content-services/out/breadcrumb/breadcrumb.component.ts",
    "ng://@alfresco/adf-content-services/out/breadcrumb/dropdown-breadcrumb.component.ts",
    "ng://@alfresco/adf-content-services/out/breadcrumb/breadcrumb.module.ts",
    "ng://@alfresco/adf-content-services/out/dialogs/confirm.dialog.ts",
    "ng://@alfresco/adf-content-services/out/version-manager/version-list.component.ts",
    "ng://@alfresco/adf-content-services/out/version-manager/version-manager.component.ts",
    "ng://@alfresco/adf-content-services/out/version-manager/version-upload.component.ts",
    "ng://@alfresco/adf-content-services/out/version-manager/version-manager.module.ts",
    "ng://@alfresco/adf-content-services/out/content-node-selector/name-location-cell/name-location-cell.component.ts",
    "ng://@alfresco/adf-content-services/out/content-node-selector/content-node-selector.service.ts",
    "ng://@alfresco/adf-content-services/out/content-node-selector/content-node-selector-panel.component.ts",
    "ng://@alfresco/adf-content-services/out/content-node-selector/content-node-selector.module.ts",
    "ng://@alfresco/adf-content-services/out/dialogs/folder-name.validators.ts",
    "ng://@alfresco/adf-content-services/out/dialogs/folder.dialog.ts",
    "ng://@alfresco/adf-content-services/out/dialogs/dialog.module.ts",
    "ng://@alfresco/adf-content-services/out/folder-directive/folder-create.directive.ts",
    "ng://@alfresco/adf-content-services/out/folder-directive/folder-edit.directive.ts",
    "ng://@alfresco/adf-content-services/out/folder-directive/folder-directive.module.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/components/content-metadata-card/content-metadata-card.component.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/services/basic-properties.service.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/services/property-groups-translator.service.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/services/config/property-group-reader.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/services/config/aspect-oriented-config.service.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/services/config/indifferent-config.service.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/services/config/layout-oriented-config.service.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/services/config/content-metadata-config.factory.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/services/property-descriptors.service.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/services/content-metadata.service.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/components/content-metadata/content-metadata.component.ts",
    "ng://@alfresco/adf-content-services/out/content-metadata/content-metadata.module.ts",
    "ng://@alfresco/adf-content-services/out/permission-manager/models/permission.model.ts",
    "ng://@alfresco/adf-content-services/out/permission-manager/services/node-permission.service.ts",
    "ng://@alfresco/adf-content-services/out/permission-manager/components/permission-list/permission-list.component.ts",
    "ng://@alfresco/adf-content-services/out/permission-manager/components/inherited-button.directive.ts",
    "ng://@alfresco/adf-content-services/out/permission-manager/permission-manager.module.ts",
    "ng://@alfresco/adf-content-services/out/content.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { DownloadEntry, MinimalNodeEntity } from 'alfresco-js-api';\nimport { LogService, AlfrescoApiService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-download-zip-dialog',\n    template: `<h1 matDialogTitle>{{ 'CORE.DIALOG.DOWNLOAD_ZIP.TITLE' | translate }}</h1>\n<div mat-dialog-content>\n    <mat-progress-bar color=\"primary\" mode=\"indeterminate\"></mat-progress-bar>\n</div>\n<div mat-dialog-actions>\n    <span class=\"spacer\"></span>\n    <button mat-button color=\"primary\" (click)=\"cancelDownload()\">\n        {{ 'CORE.DIALOG.DOWNLOAD_ZIP.ACTIONS.CANCEL' | translate }}\n    </button>\n</div>\n`,\n    styles: [`.spacer{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.adf-download-zip-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}`],\n    host: { 'class': 'adf-download-zip-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class DownloadZipDialogComponent implements OnInit {\n\n    // flag for async threads\n    private cancelled = false;\n\n    constructor(private apiService: AlfrescoApiService,\n                private dialogRef: MatDialogRef<DownloadZipDialogComponent>,\n                @Inject(MAT_DIALOG_DATA) private data: any,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        if (this.data && this.data.nodeIds && this.data.nodeIds.length > 0) {\n            if (!this.cancelled) {\n                this.downloadZip(this.data.nodeIds);\n            } else {\n                this.logService.log('Cancelled');\n            }\n        }\n    }\n\n    cancelDownload() {\n        this.cancelled = true;\n        this.dialogRef.close(false);\n    }\n\n    downloadZip(nodeIds: string[]) {\n        if (nodeIds && nodeIds.length > 0) {\n\n            const promise: any = this.apiService.getInstance().core.downloadsApi.createDownload({ nodeIds });\n\n            promise.on('progress', progress => this.logService.log('Progress', progress));\n            promise.on('error', error => this.logService.error('Error', error));\n            promise.on('abort', data => this.logService.log('Abort', data));\n\n            promise.on('success', (data: DownloadEntry) => {\n                if (data && data.entry && data.entry.id) {\n                    const url = this.apiService.getInstance().content.getContentUrl(data.entry.id, true);\n\n                    this.apiService.getInstance().core.nodesApi.getNode(data.entry.id).then((downloadNode: MinimalNodeEntity) => {\n                        this.logService.log(downloadNode);\n                        const fileName = downloadNode.entry.name;\n                        this.waitAndDownload(data.entry.id, url, fileName);\n                    });\n                }\n            });\n        }\n    }\n\n    waitAndDownload(downloadId: string, url: string, fileName: string) {\n        if (this.cancelled) {\n            return;\n        }\n\n        this.apiService.getInstance().core.downloadsApi.getDownload(downloadId).then((downloadEntry: DownloadEntry) => {\n            if (downloadEntry.entry) {\n                if (downloadEntry.entry.status === 'DONE') {\n                    this.download(url, fileName);\n                } else {\n                    setTimeout(() => {\n                        this.waitAndDownload(downloadId, url, fileName);\n                    }, 1000);\n                }\n            }\n        });\n    }\n\n    download(url: string, fileName: string) {\n        if (url && fileName) {\n            const link = document.createElement('a');\n\n            link.style.display = 'none';\n            link.download = fileName;\n            link.href = url;\n\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n        this.dialogRef.close(true);\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive, Input, HostListener } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\n\nimport { DownloadZipDialogComponent } from '../dialogs/download-zip.dialog';\n\n@Directive({\n    selector: '[adfNodeDownload]'\n})\nexport class NodeDownloadDirective {\n\n    /** Nodes to download. */\n    // tslint:disable-next-line:no-input-rename\n    @Input('adfNodeDownload')\n    nodes: MinimalNodeEntity[];\n\n    @HostListener('click')\n    onClick() {\n        this.downloadNodes(this.nodes);\n    }\n\n    constructor(\n        private apiService: AlfrescoApiService,\n        private dialog: MatDialog) {\n    }\n\n    /**\n     * Downloads multiple selected nodes.\n     * Packs result into a .ZIP archive if there is more than one node selected.\n     * @param selection Multiple selected nodes to download\n     */\n    downloadNodes(selection: Array<MinimalNodeEntity>) {\n        if (!selection || selection.length === 0) {\n            return;\n        }\n\n        if (selection.length === 1) {\n            this.downloadNode(selection[0]);\n        } else {\n            this.downloadZip(selection);\n        }\n    }\n\n    /**\n     * Downloads a single node.\n     * Packs result into a .ZIP archive is the node is a Folder.\n     * @param node Node to download\n     */\n    downloadNode(node: MinimalNodeEntity) {\n        if (node && node.entry) {\n            const entry = node.entry;\n\n            if (entry.isFile) {\n                this.downloadFile(node);\n            }\n\n            if (entry.isFolder) {\n                this.downloadZip([node]);\n            }\n\n            // Check if there's nodeId for Shared Files\n            if (!entry.isFile && !entry.isFolder && (<any> entry).nodeId) {\n                this.downloadFile(node);\n            }\n        }\n    }\n\n    private downloadFile(node: MinimalNodeEntity) {\n        if (node && node.entry) {\n            const contentApi = this.apiService.getInstance().content;\n\n            const url = contentApi.getContentUrl(node.entry.id, true);\n            const fileName = node.entry.name;\n\n            this.download(url, fileName);\n        }\n    }\n\n    private downloadZip(selection: Array<MinimalNodeEntity>) {\n        if (selection && selection.length > 0) {\n            // nodeId for Shared node\n            const nodeIds = selection.map((node: any) => (node.entry.nodeId || node.entry.id));\n\n            this.dialog.open(DownloadZipDialogComponent, {\n                width: '600px',\n                disableClose: true,\n                data: {\n                    nodeIds\n                }\n            });\n        }\n    }\n\n    private download(url: string, fileName: string) {\n        if (url && fileName) {\n            const link = document.createElement('a');\n\n            link.style.display = 'none';\n            link.download = fileName;\n            link.href = url;\n\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { SharedLinksApiService } from '@alfresco/adf-core';\nimport { SharedLinkEntry } from 'alfresco-js-api';\n\n@Component({\n    selector: 'adf-share-dialog',\n    template: `<h1 mat-dialog-title id=\"adf-share-title\" >{{ 'SHARE.TITLE' | translate }} {{fileName}}</h1>\n\n<mat-dialog-content>\n    <span class=\"spacer\"></span>\n\n    <mat-slide-toggle [checked]=\"isFileShared\" [disabled]=\"isDisabled\" (change)=\"onSlideShareChange($event)\">\n        {{ 'SHARE.ACTIONS.SHARE' | translate }}\n    </mat-slide-toggle>\n\n    <span class=\"spacer\"></span>\n\n    .\n\n    <h2 *ngIf=\"isFileShared\">{{ 'SHARE.DESCRIPTION' | translate }}</h2>\n    <div *ngIf=\"isFileShared\">{{ 'SHARE.ALERT' | translate }}</div>\n\n    <form *ngIf=\"isFileShared\">\n        <mat-form-field class=\"full-width\">\n            <input class=\"adf-share-link\" matInput placeholder=\"{{ 'SHARE.PUBLIC-LINK' | translate }}\" [value]=\"baseShareUrl + sharedId\">\n            <mat-icon matPrefix>link</mat-icon>\n        </mat-form-field>\n    </form>\n\n    <h2 *ngIf=\"!isFileShared\">{{ 'SHARE.UNSHARED' | translate }}</h2>\n\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button mat-button color=\"primary\" (click)=\"cancelShare()\">\n        {{ 'SHARE.ACTIONS.CLOSE' | translate }}\n    </button>\n</mat-dialog-actions>\n`,\n    styles: [`.spacer{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.adf-share-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}.full-width{width:100%}.adf-share-link{margin-left:10px;font-size:18px!important}`],\n    host: { 'class': 'adf-share-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShareDialogComponent implements OnInit {\n\n    sharedId: string;\n\n    fileName: string;\n    baseShareUrl: string;\n\n    isFileShared: boolean = false;\n    isDisabled: boolean = false;\n\n    constructor(private sharedLinksApiService: SharedLinksApiService,\n                private dialogRef: MatDialogRef<ShareDialogComponent>,\n                @Inject(MAT_DIALOG_DATA)\n                public data: any) {\n    }\n\n    ngOnInit() {\n        if (this.data.node && this.data.node.entry) {\n            this.fileName = this.data.node.entry.name;\n            this.baseShareUrl = this.data.baseShareUrl;\n\n            if (this.data.node.entry.properties && this.data.node.entry.properties['qshare:sharedId']) {\n                this.sharedId = this.data.node.entry.properties['qshare:sharedId'];\n                this.isFileShared = true;\n            } else {\n                this.createSharedLinks(this.data.node.entry.id);\n            }\n        }\n    }\n\n    cancelShare() {\n        this.dialogRef.close(false);\n    }\n\n    onSlideShareChange(event: any) {\n        this.isDisabled = true;\n        if (event.checked) {\n            this.createSharedLinks(this.data.node.entry.id);\n        } else {\n            this.deleteSharedLink(this.sharedId);\n        }\n    }\n\n    createSharedLinks(nodeId: string) {\n        this.sharedLinksApiService.createSharedLinks(nodeId).subscribe((sharedLink: SharedLinkEntry) => {\n                if (sharedLink.entry) {\n                    this.sharedId = sharedLink.entry.id;\n                    this.isFileShared = true;\n                    this.isDisabled = false;\n                }\n            },\n            () => {\n                this.isFileShared = false;\n                this.isDisabled = false;\n            });\n    }\n\n    deleteSharedLink(sharedId: string) {\n        this.sharedLinksApiService.deleteSharedLink(sharedId).subscribe(() => {\n                this.isFileShared = false;\n                this.isDisabled = false;\n            },\n            () => {\n                this.isFileShared = true;\n                this.isDisabled = false;\n            });\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive, Input, HostListener, ElementRef, OnChanges } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\n\nimport { ShareDialogComponent } from '../dialogs/share.dialog';\n\n@Directive({\n    selector: '[adf-share]'\n})\nexport class NodeSharedDirective implements OnChanges {\n\n    /** Node to share. */\n    // tslint:disable-next-line:no-input-rename\n    @Input('adf-share')\n    node: MinimalNodeEntity;\n\n    @Input()\n    baseShareUrl: string;\n\n    @HostListener('click')\n    onClick() {\n        this.shareNode(this.node);\n    }\n\n    constructor(private dialog: MatDialog,\n                private elementRef: ElementRef) {\n    }\n\n    shareNode(node: MinimalNodeEntity) {\n        if (node.entry && node.entry.isFile) {\n            this.setDisableAttribute(true);\n            this.dialog.open(ShareDialogComponent, {\n                width: '600px',\n                disableClose: true,\n                data: {\n                    node: node,\n                    baseShareUrl: this.baseShareUrl\n                }\n            });\n        } else {\n            this.setDisableAttribute(true);\n        }\n    }\n\n    ngOnChanges() {\n        if (!this.node || this.node.entry.isFolder) {\n            this.setDisableAttribute(true);\n        } else {\n            this.setDisableAttribute(false);\n        }\n    }\n\n    private setDisableAttribute(disable: boolean) {\n        this.elementRef.nativeElement.disabled = disable;\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MatButtonModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatIconModule,\n    MatCardModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatOptionModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatExpansionModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatSlideToggleModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatButtonModule,\n        MatChipsModule,\n        MatDialogModule,\n        MatIconModule,\n        MatCardModule,\n        MatInputModule,\n        MatListModule,\n        MatProgressSpinnerModule,\n        MatProgressBarModule,\n        MatRippleModule,\n        MatMenuModule,\n        MatOptionModule,\n        MatExpansionModule,\n        MatSelectModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatSlideToggleModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AlfrescoApiService, AuthenticationService, ContentService, LogService,\n    PermissionsEnum, ThumbnailService\n} from '@alfresco/adf-core';\n\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntity, MinimalNodeEntryEntity,  NodeEntry, NodePaging } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/throw';\n\n@Injectable()\nexport class DocumentListService {\n\n    static ROOT_ID = '-root-';\n\n    constructor(authService: AuthenticationService,\n                private contentService: ContentService,\n                private apiService: AlfrescoApiService,\n                private logService: LogService,\n                private thumbnailService: ThumbnailService) {\n    }\n\n    private getNodesPromise(folder: string, opts?: any, includeFields: string[] = []): Promise<NodePaging> {\n\n        let rootNodeId = DocumentListService.ROOT_ID;\n        if (opts && opts.rootFolderId) {\n            rootNodeId = opts.rootFolderId;\n        }\n\n        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        let params: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        if (folder) {\n            params.relativePath = folder;\n        }\n\n        if (opts) {\n            if (opts.maxItems) {\n                params.maxItems = opts.maxItems;\n            }\n            if (opts.skipCount) {\n                params.skipCount = opts.skipCount;\n            }\n        }\n\n        return this.apiService.getInstance().nodes.getNodeChildren(rootNodeId, params);\n    }\n\n    /**\n     * Deletes a node.\n     * @param nodeId ID of the node to delete\n     * @returns Empty response when the operation is complete\n     */\n    deleteNode(nodeId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.deleteNode(nodeId));\n    }\n\n    /**\n     * Copy a node to destination node\n     *\n     * @param nodeId The id of the node to be copied\n     * @param targetParentId The id of the folder where the node will be copied\n     * @returns NodeEntry for the copied node\n     */\n    copyNode(nodeId: string, targetParentId: string) {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.copyNode(nodeId, { targetParentId }))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Move a node to destination node\n     *\n     * @param nodeId The id of the node to be moved\n     * @param targetParentId The id of the folder where the node will be moved\n     * @returns NodeEntry for the moved node\n     */\n    moveNode(nodeId: string, targetParentId: string) {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.moveNode(nodeId, { targetParentId }))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Create a new folder in the path.\n     * @param name Folder name\n     * @param parentId Parent folder ID\n     * @returns Details of the created folder node\n     */\n    createFolder(name: string, parentId: string): Observable<MinimalNodeEntity> {\n        let observable = Observable.fromPromise(this.apiService.getInstance().nodes.createFolder(name, '/', parentId));\n        observable.catch(err => this.handleError(err));\n        return observable;\n    }\n\n    /**\n     * Gets the folder node with the specified relative name path below the root node.\n     * @param folder Path to folder.\n     * @param opts Options.\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getFolder(folder: string, opts?: any, includeFields: string[] = []): Observable<NodePaging> {\n        return Observable.fromPromise(this.getNodesPromise(folder, opts, includeFields))\n            .map(res => <NodePaging> res)\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Gets a node via its node ID.\n     * @param nodeId\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getNode(nodeId: string, includeFields: string[] = []): Observable<NodeEntry> {\n\n        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        let opts: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        return this.contentService.getNode(nodeId, opts);\n    }\n\n    /**\n     * @deprecated 2.3.0\n     * Gets a folder node via its node ID.\n     * @param nodeId ID of the folder node\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getFolderNode(nodeId: string, includeFields: string[] = []): Observable<MinimalNodeEntryEntity> {\n\n        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        let opts: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        return Observable.fromPromise(this.apiService.getInstance().nodes.getNodeInfo(nodeId, opts));\n    }\n    /**\n     * Get thumbnail URL for the given document node.\n     * @param node Node to get URL for.\n     * @returns Thumbnail URL string\n     */\n    getDocumentThumbnailUrl(node: MinimalNodeEntity): string {\n        return this.thumbnailService.getDocumentThumbnailUrl(node);\n    }\n\n    /**\n     * Gets the icon that represents a MIME type.\n     * @param mimeType MIME type to get the icon for\n     * @returns Path to the icon file\n     */\n    getMimeTypeIcon(mimeType: string): string {\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    /**\n     * Gets a default icon for MIME types with no specific icon.\n     * @returns Path to the icon file\n     */\n    getDefaultMimeTypeIcon(): string {\n        return this.thumbnailService.getDefaultMimeTypeIcon();\n    }\n\n    /**\n     * @Deprecated 2.3.0 use the one in the content service\n     * Checks if a node has the specified permission.\n     * @param node Target node\n     * @param permission Permission level to query\n     * @returns True if the node has the permission, false otherwise\n     */\n    hasPermission(node: any, permission: PermissionsEnum | string): boolean {\n        return this.contentService.hasPermission(node, permission);\n    }\n\n    private handleError(error: any) {\n        // in a real world app, we may send the error to some remote logging infrastructure\n        // instead of just logging it to the console\n        this.logService.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation, Input } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { MinimalNodeEntryEntity, SitePaging } from 'alfresco-js-api';\nimport { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';\nimport { RowFilter } from '../document-list/data/row-filter.model';\nimport { ImageResolver } from '../document-list/data/image-resolver.model';\n\n@Component({\n    selector: 'adf-content-node-selector',\n    template: `<header\n    mat-dialog-title\n    data-automation-id=\"content-node-selector-title\">{{title || data?.title}}\n</header>\n\n<mat-dialog-content>\n    <adf-content-node-selector-panel\n        [currentFolderId]=\"currentFolderId || data?.currentFolderId\"\n        [dropdownHideMyFiles]=\"dropdownHideMyFiles || data?.dropdownHideMyFiles\"\n        [dropdownSiteList]=\"dropdownSiteList || data?.dropdownSiteList\"\n        [rowFilter]=\"rowFilter || data?.rowFilter\"\n        [imageResolver]=\"imageResolver || data?.imageResolver\"\n        [isSelectionValid]=\"data?.isSelectionValid\"\n        [breadcrumbTransform]=\"data?.breadcrumbTransform\"\n        (select)=\"onSelect($event)\">\n    </adf-content-node-selector-panel>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n    <button\n        mat-button\n        (click)=\"close()\"\n        data-automation-id=\"content-node-selector-actions-cancel\">{{ 'NODE_SELECTOR.CANCEL' | translate }}\n    </button>\n\n    <button mat-button\n        [disabled]=\"!chosenNode\"\n        class=\"choose-action\"\n        (click)=\"onClick()\"\n        data-automation-id=\"content-node-selector-actions-choose\">{{ buttonActionName | translate }}\n    </button>\n</mat-dialog-actions>\n\n`,\n    styles: [``],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentNodeSelectorComponent {\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    title: string = null;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    currentFolderId: string = null;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    dropdownHideMyFiles: boolean = false;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    dropdownSiteList: SitePaging = null;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    rowFilter: RowFilter = null;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    imageResolver: ImageResolver = null;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    pageSize: number;\n\n    buttonActionName: string;\n    chosenNode: MinimalNodeEntryEntity[];\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: ContentNodeSelectorComponentData) {\n        this.buttonActionName = data.actionName ? `NODE_SELECTOR.${data.actionName.toUpperCase()}` : 'NODE_SELECTOR.CHOOSE';\n    }\n\n    close() {\n        this.data.select.complete();\n    }\n\n    onSelect(nodeList: MinimalNodeEntryEntity[]) {\n        this.chosenNode = nodeList;\n    }\n\n    onClick(): void {\n        this.data.select.next(this.chosenNode);\n        this.data.select.complete();\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport moment from 'moment-es6';\n\nimport { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nimport { MinimalNodeEntryEntity, NodeEntry } from 'alfresco-js-api';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-node-lock',\n    styles: [`.adf-fill-remaining-space{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.adf-full-width{width:100%}`],\n    template: `<h2 mat-dialog-title>\n    {{ 'CORE.FILE_DIALOG.FILE_LOCK' | translate }}\n</h2>\n\n<mat-dialog-content>\n    <br />\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-checkbox [formControl]=\"form.controls['isLocked']\" ngDefaultControl>\n            {{ 'CORE.FILE_DIALOG.FILE_LOCK_CHECKBOX' | translate }} <strong>\"{{ nodeName }}\"</strong>\n        </mat-checkbox>\n\n        <br />\n\n        <div *ngIf=\"form.value.isLocked\">\n            <mat-checkbox [formControl]=\"form.controls['allowOwner']\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.ALLOW_OTHERS_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-checkbox [formControl]=\"form.controls['isTimeLock']\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.TIME_LOCK_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-form-field *ngIf=\"form.value.isTimeLock\">\n                <mat-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mat-datetimepicker-toggle>\n                <mat-datetimepicker #datetimePicker type=\"datetime\" openOnFocus=\"true\" timeInterval=\"1\"></mat-datetimepicker>\n                <input matInput [formControl]=\"form.controls['time']\" [matDatetimepicker]=\"datetimePicker\" required autocomplete=\"false\">\n            </mat-form-field>\n        </div>\n    </form>\n    <br />\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button mat-button mat-dialog-close>\n        {{ 'CORE.FILE_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\" mat-button (click)=\"submit()\">\n        {{ 'CORE.FILE_DIALOG.SAVE_BUTTON.LABEL' | translate }}\n    </button>\n</mat-dialog-actions>\n`\n})\nexport class NodeLockDialogComponent implements OnInit {\n\n    form: FormGroup;\n    node: MinimalNodeEntryEntity = null;\n    nodeName: string;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        public dialog: MatDialogRef<NodeLockDialogComponent>,\n        private alfrescoApi: AlfrescoApiService,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        public data: any\n    ) {}\n\n    ngOnInit() {\n        const { node } = this.data;\n        this.nodeName = node.name;\n\n        this.form = this.formBuilder.group({\n            isLocked: node.isLocked || false,\n            allowOwner: node.properties['cm:lockType'] === 'WRITE_LOCK',\n            isTimeLock: !!node.properties['cm:expiryDate'],\n            time: !!node.properties['cm:expiryDate'] ? moment(node.properties['cm:expiryDate']) : moment()\n        });\n    }\n\n    private get lockTimeInSeconds(): number {\n        if (this.form.value.isTimeLock) {\n            let duration = moment.duration(moment(this.form.value.time).diff(moment()));\n            return duration.asSeconds();\n        }\n\n        return 0;\n    }\n\n    private get nodeBodyLock(): object {\n        return {\n            'timeToExpire': this.lockTimeInSeconds,\n            'type': this.form.value.allowOwner ? 'ALLOW_OWNER_CHANGES' : 'FULL',\n            'lifetime': 'PERSISTENT'\n        };\n    }\n\n    private toggleLock(): Promise<NodeEntry> {\n        const { alfrescoApi: { nodesApi }, data: { node } } = this;\n\n        if (this.form.value.isLocked) {\n            return nodesApi.lockNode(node.id, this.nodeBodyLock);\n        }\n\n        return nodesApi.unlockNode(node.id);\n    }\n\n    submit(): void {\n        this.toggleLock()\n            .then(node => {\n                this.data.node.isLocked = this.form.value.isLocked;\n                this.dialog.close(node.entry);\n            })\n            .catch(error => this.data.onError(error));\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatDialog } from '@angular/material';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ContentService } from '@alfresco/adf-core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { ShareDataRow } from '../document-list/data/share-data-row.model';\nimport { MinimalNodeEntryEntity, SitePaging } from 'alfresco-js-api';\nimport { DataColumn, SitesService, TranslationService, PermissionsEnum } from '@alfresco/adf-core';\nimport { DocumentListService } from '../document-list/services/document-list.service';\nimport { ContentNodeSelectorComponent } from './content-node-selector.component';\nimport { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';\nimport { NodeLockDialogComponent } from '../dialogs/node-lock.dialog';\nimport 'rxjs/operator/switchMap';\n\n@Injectable()\nexport class ContentNodeDialogService {\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private dialog: MatDialog,\n                private contentService: ContentService,\n                private documentListService: DocumentListService,\n                private siteService: SitesService,\n                private translation: TranslationService) {\n    }\n\n    /** Opens a file browser at a chosen folder location. */\n    /** @param folderNodeId ID of the folder to use */\n    openFileBrowseDialogByFolderId(folderNodeId: string): Observable<MinimalNodeEntryEntity[]> {\n        return this.documentListService.getFolderNode(folderNodeId).switchMap((node: MinimalNodeEntryEntity) => {\n            return this.openUploadFileDialog('Choose', node);\n        });\n    }\n\n    /**\n     * Opens a lock node dialog\n     *\n     * @param contentEntry Node to lock\n     */\n    public openLockNodeDialog(contentEntry: MinimalNodeEntryEntity): Subject<string> {\n        const observable: Subject<string> = new Subject<string>();\n\n        if (this.contentService.hasPermission(contentEntry, PermissionsEnum.LOCK)) {\n            this.dialog.open(NodeLockDialogComponent, {\n                data: {\n                    node: contentEntry,\n                    onError: (error) => {\n                        this.error.emit(error);\n                        observable.error(error);\n                    }\n                },\n                width: '400px'\n            });\n        } else {\n            observable.error('OPERATION.FAIL.NODE.NO_PERMISSION');\n        }\n\n        return observable;\n    }\n\n    /** Opens a file browser at a chosen site location. */\n    openFileBrowseDialogBySite(): Observable<MinimalNodeEntryEntity[]> {\n        return this.siteService.getSites().switchMap((response: SitePaging) => {\n            return this.openFileBrowseDialogByFolderId(response.list.entries[0].entry.guid);\n        });\n    }\n\n    /** Opens a folder browser at a chosen site location. */\n    openFolderBrowseDialogBySite(): Observable<MinimalNodeEntryEntity[]> {\n        return this.siteService.getSites().switchMap((response: SitePaging) => {\n            return this.openFolderBrowseDialogByFolderId(response.list.entries[0].entry.guid);\n        });\n    }\n\n    /** Opens a folder browser at a chosen folder location. */\n    /** @param folderNodeId ID of the folder to use */\n    openFolderBrowseDialogByFolderId(folderNodeId: string): Observable<MinimalNodeEntryEntity[]> {\n        return this.documentListService.getFolderNode(folderNodeId).switchMap((node: MinimalNodeEntryEntity) => {\n            return this.openUploadFolderDialog('Choose', node);\n        });\n    }\n\n    /** Opens a dialog to copy or move an item to a new location. */\n    /** @param action Name of the action (eg, \"Copy\" or \"Move\") to show in the title */\n\n    /** @param contentEntry Item to be copied or moved */\n    /** @param permission Permission for the operation */\n    openCopyMoveDialog(action: string, contentEntry: MinimalNodeEntryEntity, permission?: string): Observable<MinimalNodeEntryEntity[]> {\n        if (this.contentService.hasPermission(contentEntry, permission)) {\n\n            const select = new Subject<MinimalNodeEntryEntity[]>();\n            select.subscribe({\n                complete: this.close.bind(this)\n            });\n\n            const title = this.getTitleTranslation(action, contentEntry.name);\n\n            const data: ContentNodeSelectorComponentData = {\n                title: title,\n                actionName: action,\n                currentFolderId: contentEntry.parentId,\n                imageResolver: this.imageResolver.bind(this),\n                rowFilter: this.rowFilter.bind(this, contentEntry.id),\n                isSelectionValid: this.isCopyMoveSelectionValid.bind(this),\n                select: select\n            };\n\n            this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n\n            return select;\n        } else {\n            let errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));\n            return Observable.throw(errors);\n        }\n    }\n\n    /** Gets the translation of the dialog title. */\n\n    /** @param action Name of the action to display in the dialog title */\n    /** @param name Name of the item on which the action is being performed */\n    getTitleTranslation(action: string, name: string): string {\n        return this.translation.instant(`NODE_SELECTOR.${action.toUpperCase()}_ITEM`, { name });\n    }\n\n    /** Opens a dialog to choose a folder to upload. */\n\n    /** @param action Name of the action to show in the title */\n    /** @param contentEntry  Item to upload */\n    openUploadFolderDialog(action: string, contentEntry: MinimalNodeEntryEntity): Observable<MinimalNodeEntryEntity[]> {\n        const select = new Subject<MinimalNodeEntryEntity[]>();\n        select.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: ContentNodeSelectorComponentData = {\n            title: `${action} '${contentEntry.name}' to ...`,\n            actionName: action,\n            currentFolderId: contentEntry.id,\n            imageResolver: this.imageResolver.bind(this),\n            isSelectionValid: this.hasPermissionOnNodeFolder.bind(this),\n            rowFilter: this.rowFilter.bind(this, contentEntry.id),\n            select: select\n        };\n\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n        return select;\n    }\n\n    /** Opens a dialog to choose a file to upload. */\n\n    /** @param action Name of the action to show in the title */\n    /** @param contentEntry Item to upload */\n    openUploadFileDialog(action: string, contentEntry: MinimalNodeEntryEntity): Observable<MinimalNodeEntryEntity[]> {\n        const select = new Subject<MinimalNodeEntryEntity[]>();\n        select.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: ContentNodeSelectorComponentData = {\n            title: `${action} '${contentEntry.name}' to ...`,\n            actionName: action,\n            currentFolderId: contentEntry.id,\n            imageResolver: this.imageResolver.bind(this),\n            isSelectionValid: this.isNodeFile.bind(this),\n            select: select\n        };\n\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n        return select;\n    }\n\n    private openContentNodeDialog(data: ContentNodeSelectorComponentData, currentPanelClass: string, chosenWidth: string) {\n        this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n    }\n\n    private imageResolver(row: ShareDataRow, col: DataColumn): string | null {\n        const entry: MinimalNodeEntryEntity = row.node.entry;\n        if (!this.contentService.hasPermission(entry, 'create')) {\n            return this.documentListService.getMimeTypeIcon('disable/folder');\n        }\n\n        return null;\n    }\n\n    private rowFilter(currentNodeId, row: ShareDataRow): boolean {\n        const node: MinimalNodeEntryEntity = row.node.entry;\n\n        if (node.id === currentNodeId || node.isFile) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private isNodeFile(entry: MinimalNodeEntryEntity): boolean {\n        return entry.isFile;\n    }\n\n    private hasPermissionOnNodeFolder(entry: MinimalNodeEntryEntity): boolean {\n        return this.isNodeFolder(entry) && this.contentService.hasPermission(entry, 'create');\n    }\n\n    private isNodeFolder(entry: MinimalNodeEntryEntity): boolean {\n        return entry.isFolder;\n    }\n\n    private isCopyMoveSelectionValid(entry: MinimalNodeEntryEntity): boolean {\n        return this.hasEntityCreatePermission(entry) && !this.isSite(entry);\n    }\n\n    private hasEntityCreatePermission(entry: MinimalNodeEntryEntity): boolean {\n        return this.contentService.hasPermission(entry, 'create');\n    }\n\n    private isSite(entry) {\n        return !!entry.guid || entry.nodeType === 'st:site' || entry.nodeType === 'st:sites';\n    }\n\n    /** Closes the currently open dialog. */\n    close() {\n        this.dialog.closeAll();\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, ElementRef, Renderer2, HostListener, Input, AfterViewInit } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { PermissionsEnum, ContentService } from '@alfresco/adf-core';\nimport { ContentNodeDialogService } from '../content-node-selector/content-node-dialog.service';\n\n@Directive({\n    selector: '[adf-node-lock]'\n})\nexport class NodeLockDirective implements AfterViewInit {\n\n    @Input('adf-node-lock')\n    node: MinimalNodeEntryEntity;\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        this.contentNodeDialogService.openLockNodeDialog(this.node);\n    }\n\n    constructor(\n        public element: ElementRef,\n        private renderer: Renderer2,\n        private contentService: ContentService,\n        private contentNodeDialogService: ContentNodeDialogService\n    ) {}\n\n    ngAfterViewInit() {\n        const hasPermission = this.contentService.hasPermission(this.node, PermissionsEnum.LOCK);\n        this.renderer.setProperty(this.element.nativeElement, 'disabled', !hasPermission);\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { NodeDownloadDirective } from './node-download.directive';\nimport { NodeSharedDirective } from './node-share.directive';\nimport { NodeLockDirective } from './node-lock.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        NodeDownloadDirective,\n        NodeSharedDirective,\n        NodeLockDirective\n    ],\n    exports: [\n        NodeDownloadDirective,\n        NodeSharedDirective,\n        NodeLockDirective\n    ]\n})\nexport class ContentDirectiveModule {\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { RatingBody } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/throw';\n\n@Injectable()\nexport class RatingService {\n\n    constructor(private apiService: AlfrescoApiService) {\n    }\n\n    /**\n     * Gets the current user's rating for a node.\n     * @param nodeId Node to get the rating from\n     * @param ratingType Type of rating (can be \"likes\" or \"fiveStar\")\n     */\n    getRating(nodeId: string, ratingType: any): any {\n        return Observable.fromPromise(this.apiService.getInstance().core.ratingsApi.getRating(nodeId, ratingType))\n            .map(res => res)\n            .catch(this.handleError);\n    }\n\n    /**\n     * Adds the current user's rating for a node.\n     * @param nodeId Target node for the rating\n     * @param ratingType Type of rating (can be \"likes\" or \"fiveStar\")\n     * @param vote Rating value (boolean for \"likes\", numeric 0..5 for \"fiveStar\")\n     */\n    postRating(nodeId: string, ratingType: any, vote: any): any {\n        let ratingBody: RatingBody = {\n            'id': ratingType,\n            'myRating': vote\n        };\n        return Observable.fromPromise(this.apiService.getInstance().core.ratingsApi.rate(nodeId, ratingBody))\n            .map(res => res)\n            .catch(this.handleError);\n    }\n\n    /**\n     * Removes the current user's rating for a node.\n     * @param nodeId Target node\n     * @param ratingType Type of rating to remove (can be \"likes\" or \"fiveStar\")\n     */\n    deleteRating(nodeId: string, ratingType: any): any {\n        return Observable.fromPromise(this.apiService.getInstance().core.ratingsApi.removeRating(nodeId, ratingType))\n            .map(res => res)\n            .catch(this.handleError);\n    }\n\n    private handleError(error: Response): any {\n        console.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\n\n@Component({\n    selector: 'adf-rating',\n    styles: [`.adf-rating-container{overflow:hidden;width:100%}.adf-rating-container .adf-rating-star{float:left;-webkit-transition:all .3s;transition:all .3s;padding:1px;cursor:pointer}.adf-rating-container .adf-rating-star .mat-list-item-content{padding:0 2px!important}.adf-rating-container .adf-colored-star{color:#ffe944}.adf-rating-container .adf-grey-star{color:grey}.adf-rating-container .adf-stars-container{padding:0!important;margin:0!important;display:inline-block}.adf-rating-container .adf-rating-star:hover{-webkit-transform:rotate(13deg) scale(1.2);transform:rotate(13deg) scale(1.2)}`],\n    template: `<mat-list id=\"adf-rating-container\" class=\"adf-rating-container\">\n    <mat-list-item class=\"adf-rating-star\" *ngFor=\"let currentRate of stars; let idx = index\">\n            <span id=\"adf-rate-{{idx}}\">\n                <mat-icon id=\"adf-grey-star-{{idx}}\" *ngIf=\"currentRate.fill\" class=\"adf-colored-star\"\n                         (click)=\"updateVote(idx + 1)\">star_rate\n                </mat-icon>\n                <mat-icon id=\"adf-colored-star-{{idx}}\" *ngIf=\"!currentRate.fill\" class=\"adf-grey-star\"\n                         (click)=\"updateVote(idx + 1)\">star_border\n                </mat-icon>\n            </span>\n    </mat-list-item>\n</mat-list>\n`,\n    encapsulation: ViewEncapsulation.None\n})\nexport class RatingComponent implements OnChanges {\n\n    /** Identifier of the node to apply the rating to. */\n    @Input()\n    nodeId: string;\n\n    average: number = 0;\n\n    ratingType: string = 'fiveStar';\n\n    /** Emitted when the \"vote\" gets changed. */\n    @Output()\n    changeVote = new EventEmitter();\n\n    stars: Array<any> = [];\n\n    constructor(private ratingService: RatingService) {\n    }\n\n    ngOnChanges() {\n        let ratingObserver = this.ratingService.getRating(this.nodeId, this.ratingType);\n\n        ratingObserver.subscribe(\n            (data) => {\n                if (data.entry.aggregate) {\n                    this.average = data.entry.aggregate.average;\n                    this.calculateStars();\n                }\n            }\n        );\n\n        return ratingObserver;\n    }\n\n    calculateStars() {\n        this.stars = [];\n\n        for (let i = 0; i < 5; i++) {\n            if (i < this.average) {\n                this.stars.push({fill: true});\n            } else {\n                this.stars.push({fill: false});\n            }\n        }\n\n        this.changeVote.emit(this.average);\n    }\n\n    updateVote(vote: number) {\n        this.ratingService.postRating(this.nodeId, this.ratingType, vote).subscribe(\n            (data) => {\n                if (data.entry.aggregate) {\n                    if (this.average !== data.entry.aggregate.average) {\n                        this.average = data.entry.aggregate.average;\n                        this.calculateStars();\n                    }\n                }\n            }\n        );\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\n\n@Component({\n    selector: 'adf-like',\n    styles: [`.adf-like-container{overflow:hidden;width:100%}.adf-like-container .adf-like{padding:5px;cursor:pointer;float:left;margin:5px 0 5px 5px}.adf-like-container .adf-like-select{cursor:pointer;color:#2196f3}.adf-like-container .adf-like-grey,.adf-like-container .adf-like-select:hover{cursor:pointer;color:grey}.adf-like-container .adf-like-grey:hover{cursor:pointer;color:#2196f3}.adf-like-container .adf-like-counter{float:left;padding:13px 0 0}.adf-like-container .adf-left{float:left;padding:13px 0 0 4px}`],\n    template: `<div id=\"adf-like-container\" class=\"adf-like-container\">\n    <div class=\"adf-like\">\n        <span id=\"adf-like-{{nodeId}}\" [ngClass]=\"{'adf-like-select': isLike ,'adf-like-grey': !isLike  }\"\n              (click)=\"likeClick()\">\n            <mat-icon>thumb_up</mat-icon>\n        </span>\n    </div>\n    <div id=\"adf-like-counter\" class=\"adf-like-counter\">{{likesCounter}}</div>\n    <div class=\"adf-left\" *ngIf=\"likesCounter<=1\">Like</div>\n    <div class=\"adf-left\" *ngIf=\"likesCounter>1\">Likes</div>\n</div>\n`,\n    encapsulation: ViewEncapsulation.None\n})\nexport class LikeComponent implements OnChanges {\n    /** Identifier of a node to apply likes to. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the \"vote\" gets changed. */\n    @Output()\n    changeVote = new EventEmitter();\n\n    likesCounter: number = 0;\n    ratingType: string = 'likes';\n    isLike: boolean = false;\n\n    constructor(private ratingService: RatingService) {}\n\n    ngOnChanges() {\n        this.clean();\n\n        this.ratingService.getRating(this.nodeId, this.ratingType).subscribe(\n            (data) => {\n                if (data.entry.aggregate) {\n                    this.likesCounter = data.entry.aggregate.numberOfRatings;\n                    if (data.entry.ratedAt) {\n                        this.isLike = true;\n                    }\n                }\n            }\n        );\n    }\n\n    likeClick() {\n        if (this.isLike) {\n            this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(\n                () => {\n                    this.likesCounter -= 1;\n                    this.isLike = false;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        } else {\n            this.ratingService.postRating(this.nodeId, this.ratingType, true).subscribe(\n                (data) => {\n                    this.likesCounter = data.entry.aggregate.numberOfRatings;\n                    this.isLike = true;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        }\n    }\n\n    clean() {\n        this.isLike = false;\n        this.likesCounter = 0;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { LikeComponent } from './like.component';\nimport { RatingComponent } from './rating.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    exports: [\n        RatingComponent,\n        LikeComponent\n    ],\n    declarations: [\n        RatingComponent,\n        LikeComponent\n    ]\n})\nexport class SocialModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/throw';\n\n@Injectable()\nexport class TagService {\n\n    @Output()\n    refresh = new EventEmitter();\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Gets a list of tags added to a node.\n     * @param nodeId ID of the target node\n     * @returns TagPaging object (defined in JSAPI) containing the tags\n     */\n    getTagsByNodeId(nodeId: string): any {\n        return Observable.fromPromise(this.apiService.getInstance().core.tagsApi.getNodeTags(nodeId))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Gets a list of all the tags already defined in the repository.\n     * @returns TagPaging object (defined in JSAPI) containing the tags\n     */\n    getAllTheTags() {\n        return Observable.fromPromise(this.apiService.getInstance().core.tagsApi.getTags())\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Adds a tag to a node.\n     * @param nodeId ID of the target node\n     * @param tagName Name of the tag to add\n     * @returns TagEntry object (defined in JSAPI) with details of the new tag\n     */\n    addTag(nodeId: string, tagName: string): any {\n        let alfrescoApi: any = this.apiService.getInstance();\n        let tagBody = new alfrescoApi.core.TagBody();\n        tagBody.tag = tagName;\n\n        let promiseAdd = Observable.fromPromise(this.apiService.getInstance().core.tagsApi.addTag(nodeId, tagBody));\n\n        promiseAdd.subscribe((data) => {\n            this.refresh.emit(data);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return promiseAdd;\n    }\n\n    /**\n     * Removes a tag from a node.\n     * @param nodeId ID of the target node\n     * @param tag Name of the tag to remove\n     * @returns Null object when the operation completes\n     */\n    removeTag(nodeId: string, tag: string): any {\n        let promiseRemove = Observable.fromPromise(this.apiService.getInstance().core.tagsApi.removeTag(nodeId, tag));\n\n        promiseRemove.subscribe((data) => {\n            this.refresh.emit(data);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return promiseRemove;\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TranslationService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\n\n/**\n *\n * This component, provide a list of the tags relative a node with actions button to add or remove new tag\n */\n\n@Component({\n    selector: 'adf-tag-node-actions-list',\n    template: `<mat-list>\n    <mat-list-item *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <div class=\"adf-tag-actions-container\" id=\"tag_delete_{{idx}}\" (click)=\"removeTag(currentEntry.entry.id)\">\n            <div class=\"adf-tag-actions-delete-text\" id=\"tag_name_{{idx}}\">\n                {{currentEntry.entry.tag}}\n            </div>\n            <mat-icon class=\"adf-tag-actions-delete-icon\">delete</mat-icon>\n        </div>\n    </mat-list-item>\n</mat-list>\n<table class=\"adf-full-width\" cellspacing=\"0\">\n    <tr>\n        <td>\n            <mat-form-field class=\"adf-full-width\">\n                <input matInput placeholder=\"{{'TAG.LABEL.NEWTAG' | translate }}\"\n                       type=\"text\"\n                       (keypress)=\"cleanErrorMsg()\"\n                       [(ngModel)]=\"newTagName\"\n                       id=\"new-tag-text\"/>\n                <mat-hint data-automation-id=\"errorMessage\" *ngIf=\"error\" [ngStyle]=\"{'color': 'red'}\" align=\"start\">{{errorMsg}}</mat-hint>\n            </mat-form-field>\n        </td>\n        <td>\n            <button class=\"adf-full-width\" color=\"primary\" id=\"add-tag\" (click)=\"addTag()\" [disabled]=\"disableAddTag\"\n                    mat-raised-button>\n                {{'TAG.BUTTON.ADD' | translate }}\n            </button>\n        </td>\n    </tr>\n</table>\n`,\n    styles: [`.adf-full-width{width:100%}.adf-tag-actions-delete-icon{float:right;cursor:pointer}.adf-tag-actions-delete-text{font-size:16px;float:left}.adf-tag-actions-container{padding:8px 0;height:20px}`],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagActionsComponent implements OnChanges {\n\n    /** The identifier of a node. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when a tag is added successfully. */\n    @Output()\n    successAdd: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when an action is chosen. */\n    @Output()\n    result = new EventEmitter();\n\n    newTagName: string;\n\n    tagsEntries: any;\n\n    errorMsg: string;\n\n    disableAddTag: boolean = true;\n\n    constructor(private tagService: TagService, private translateService: TranslationService) {\n        this.tagService.refresh.subscribe(() => {\n            this.refreshTag();\n        });\n    }\n\n    ngOnChanges() {\n        return this.refreshTag();\n    }\n\n    refreshTag() {\n        if (this.nodeId) {\n            this.tagService.getTagsByNodeId(this.nodeId).subscribe((data) => {\n                this.tagsEntries = data.list.entries;\n                this.disableAddTag = false;\n                this.result.emit(this.tagsEntries);\n            }, () => {\n                this.tagsEntries = null;\n                this.disableAddTag = true;\n                this.result.emit(this.tagsEntries);\n            });\n        }\n    }\n\n    addTag() {\n        if (this.searchTag(this.newTagName)) {\n            this.translateService.get('TAG.MESSAGES.EXIST').subscribe((error) => {\n                this.errorMsg = error;\n            });\n            this.error.emit(this.errorMsg);\n        } else {\n            this.tagService.addTag(this.nodeId, this.newTagName).subscribe(() => {\n                this.newTagName = '';\n                this.successAdd.emit(this.nodeId);\n            });\n        }\n    }\n\n    searchTag(searchTagName: string) {\n        if (this.tagsEntries) {\n            return this.tagsEntries.find((currentTag) => {\n                return (searchTagName === currentTag.entry.tag);\n            });\n        }\n    }\n\n    cleanErrorMsg() {\n        this.errorMsg = '';\n    }\n\n    removeTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag);\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\n\n/**\n *\n * This component provide a list of all the tag inside the ECM\n */\n\n@Component({\n    selector: 'adf-tag-list',\n    template: `<mat-list>\n    <mat-list-item *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <div class=\"adf-list-tag\" id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</div>\n    </mat-list-item>\n</mat-list>\n`,\n    styles: [`.adf-list-tag{padding:16px;font-size:16px}`],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagListComponent implements OnInit {\n\n    tagsEntries: any;\n\n    /** Emitted when a tag is selected. */\n    @Output()\n    result = new EventEmitter();\n\n    /**\n     * Constructor\n     * @param tagService\n     */\n    constructor(private tagService: TagService) {\n        this.tagService.refresh.subscribe(() => {\n            this.refreshTag();\n        });\n    }\n\n    ngOnInit() {\n        return this.refreshTag();\n    }\n\n    refreshTag() {\n        this.tagService.getAllTheTags().subscribe((data) => {\n            this.tagsEntries = data.list.entries;\n            this.result.emit(this.tagsEntries);\n        });\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\n\n/**\n *\n * This component, ShowNodeTag a list of the tag on relative a node\n */\n\n@Component({\n    selector: 'adf-tag-node-list',\n    template: `<mat-chip-list>\n    <mat-chip class=\"adf-tag-chips adf-primary-background-color\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        <button class=\"adf-tag-chips-delete\" id=\"tag_delete_{{idx}}\" type=\"button\" (click)=\"removeTag(currentEntry.entry.id)\">\n            <mat-icon class=\"adf-tag-chips-delete-icon adf-primary-contrast-text-color\" matChipRemove>cancel</mat-icon>\n        </button>\n    </mat-chip>\n</mat-chip-list>\n`,\n    styles: [`.adf-tag-chips-delete{overflow:visible;cursor:pointer;height:17px;width:20px;float:right;border:0;background:0 0;padding:0;margin:-1px 0 0 10px}.adf-tag-chips-delete-icon{font-size:20px;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:20px;width:20px}`],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagNodeListComponent implements OnChanges {\n    /** The identifier of a node. */\n    @Input()\n    nodeId: string;\n\n    tagsEntries: any;\n\n    /** Emitted when a tag is selected. */\n    @Output()\n    results = new EventEmitter();\n\n    /**\n     * Constructor\n     * @param tagService\n     */\n    constructor(private tagService: TagService) {\n        this.tagService.refresh.subscribe(() => {\n            this.refreshTag();\n        });\n    }\n\n    ngOnChanges() {\n        return this.refreshTag();\n    }\n\n    refreshTag() {\n        if (this.nodeId) {\n            this.tagService.getTagsByNodeId(this.nodeId).subscribe((data) => {\n                this.tagsEntries = data.list.entries;\n                this.results.emit(this.tagsEntries);\n            });\n        }\n    }\n\n    removeTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag).subscribe(() => {\n            this.refreshTag();\n        });\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { MaterialModule } from '../material.module';\nimport { TagActionsComponent } from './tag-actions.component';\nimport { TagListComponent } from './tag-list.component';\nimport { TagNodeListComponent } from './tag-node-list.component';\nimport { TagService } from './services/tag.service';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    exports: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ],\n    declarations: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ],\n    providers: [\n        TagService\n    ]\n})\nexport class TagModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ObjectDataTableAdapter } from '@alfresco/adf-core';\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\n\n/**\n * <adf-webscript-get [scriptPath]=\"string\"\n *                         [scriptArgs]=\"Object\"\n *                         [contextRoot]=\"string\"\n *                         [servicePath]=\"string\"\n *                         [contentType]=\"JSON|HTML|DATATABLE\"\n *                         (success)=\"customMethod($event)>\n * </adf-webscript-get>\n *\n * This component, provide a get webscript viewer\n *\n * @InputParam {string} scriptPath path to Web Script (as defined by Web Script)\n * @InputParam {Object} scriptArgs arguments to pass to Web Script\n * @InputParam {string} contextRoot path where application is deployed default value 'alfresco'\n * @InputParam {string} servicePath path where Web Script service is mapped default value 'service'\n * @InputParam {string} contentType JSON | HTML | DATATABLE | TEXT\n *\n * @Output - success - The event is emitted when the data are recived\n *\n */\n@Component({\n    selector: 'adf-webscript-get',\n    template: `<div *ngIf=\"showData\">\n    <div *ngIf=\"contentType === 'JSON'\" id=\"webscript-data-JSON\">{{data | json}}</div>\n    <div *ngIf=\"contentType === 'HTML'\" id=\"webscript-data-HTML\" [innerHTML]=\"data\"></div>\n    <div *ngIf=\"contentType === 'TEXT'\" id=\"webscript-data-TEXT\">{{data}}</div>\n    <div *ngIf=\"isDataTableContent()\">\n        <adf-datatable id=\"webscript-datatable-wrapper\" [data]=\"data\"></adf-datatable>\n        <div>\n            <div *ngIf=\"showError\" id=\"error\">{{'WEBSCRIPT.ERROR' | translate: {\n                data: data,\n                contentType: contentType\n                }\n                }}\n            </div>\n        </div>\n    </div>\n</div>\n`\n})\nexport class WebscriptComponent implements OnChanges {\n\n    /** (required) Path to the webscript (as defined by webscript). */\n    @Input()\n    scriptPath: string;\n\n    /** Arguments to pass to the webscript. */\n    @Input()\n    scriptArgs: any;\n\n    /** Toggles whether to show or hide the data. */\n    @Input()\n    showData: boolean = true;\n\n    /** Path where the application is deployed */\n    @Input()\n    contextRoot: string = 'alfresco';\n\n    /** Path that the webscript service is mapped to. */\n    @Input()\n    servicePath: string = 'service';\n\n    /** Content type to interpret the data received from the webscript.\n     * Can be \"JSON\" , \"HTML\" , \"DATATABLE\" or \"TEXT\"\n     */\n    @Input()\n    contentType: string = 'TEXT';\n\n    /** Emitted when the operation succeeds. You can get the plain data from\n     * the webscript through the **success** event parameter and use it as you\n     * need in your application.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    data: any = undefined;\n    showError: boolean = false;\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    ngOnChanges(changes) {\n        if (this.showData) {\n            this.clean();\n        }\n\n        return new Promise((resolve, reject) => {\n            this.apiService.getInstance().webScript.executeWebScript('GET', this.scriptPath, this.scriptArgs, this.contextRoot, this.servicePath).then((webScriptdata) => {\n\n                this.data = webScriptdata;\n\n                if (this.showData) {\n                    if (this.contentType === 'DATATABLE') {\n                        this.data = this.showDataAsDataTable(webScriptdata);\n                    }\n                }\n\n                this.success.emit(this.data);\n\n                resolve();\n            }, (error) => {\n                this.logService.log('Error' + error);\n                reject();\n            });\n        });\n    }\n\n    /**\n     * show the data in a ng2-alfresco-datatable\n     *\n     * @param data\n     *\n     * @retutns the data as datatable\n     */\n    showDataAsDataTable(data: any) {\n        let datatableData: any = null;\n        try {\n\n            if (!data.schema) {\n                data.schema = ObjectDataTableAdapter.generateSchema(data.data);\n            }\n\n            if (data.schema && data.schema.length > 0) {\n                this.data = new ObjectDataTableAdapter(data.data, data.schema);\n            }\n\n        } catch (e) {\n            this.logService.error('error during the cast as datatable');\n        }\n\n        return datatableData;\n    }\n\n    clean() {\n        this.data = undefined;\n    }\n\n    isDataTableContent() {\n        return this.contentType === 'DATATABLE';\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataTableModule, PipeModule } from '@alfresco/adf-core';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { MaterialModule } from '../material.module';\nimport { WebscriptComponent } from './webscript.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PipeModule,\n        MaterialModule,\n        DataTableModule,\n        TranslateModule\n    ],\n    exports: [\n        WebscriptComponent\n    ],\n    declarations: [\n        WebscriptComponent\n    ]\n})\nexport class WebScriptModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataRow } from '@alfresco/adf-core';\nimport { ObjectUtils } from '@alfresco/adf-core';\nimport { MinimalNode, MinimalNodeEntity } from 'alfresco-js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\n\nexport class ShareDataRow implements DataRow {\n\n    static ERR_OBJECT_NOT_FOUND: string = 'Object source not found';\n\n    cache: { [key: string]: any } = {};\n    isSelected: boolean = false;\n    isDropTarget: boolean;\n    cssClass: string = '';\n\n    get node(): MinimalNodeEntity {\n        return this.obj;\n    }\n\n    constructor(private obj: MinimalNodeEntity, private documentListService: DocumentListService, private permissionsStyle: PermissionStyleModel[]) {\n        if (!obj) {\n            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);\n        }\n\n        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);\n\n        if (permissionsStyle) {\n            this.cssClass = this.getPermissionClass(obj);\n        }\n    }\n\n    getPermissionClass(nodeEntity: MinimalNodeEntity): string {\n        let permissionsClasses = '';\n\n        this.permissionsStyle.forEach((currentPermissionsStyle: PermissionStyleModel) => {\n\n            if (this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {\n\n                if (this.documentListService.hasPermission(nodeEntity.entry, currentPermissionsStyle.permission)) {\n                    permissionsClasses += ` ${currentPermissionsStyle.css}`;\n                }\n            }\n\n        });\n\n        return permissionsClasses;\n    }\n\n    private applyPermissionStyleToFile(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFile && node.isFile);\n    }\n\n    private applyPermissionStyleToFolder(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFolder && node.isFolder);\n    }\n\n    isFolderAndHasPermissionToUpload(obj: MinimalNodeEntity): boolean {\n        return this.isFolder(obj) && this.documentListService.hasPermission(obj.entry, 'create');\n    }\n\n    isFolder(obj: MinimalNodeEntity): boolean {\n        return obj.entry && obj.entry.isFolder;\n    }\n\n    cacheValue(key: string, value: any): any {\n        this.cache[key] = value;\n        return value;\n    }\n\n    getValue(key: string): any {\n        if (this.cache[key] !== undefined) {\n            return this.cache[key];\n        }\n        return ObjectUtils.getValue(this.obj.entry, key);\n    }\n\n    hasValue(key: string): boolean {\n        return this.getValue(key) !== undefined;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataColumn, DataRow, DataSorting, DataTableAdapter } from '@alfresco/adf-core';\nimport { TimeAgoPipe } from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport { NodePaging } from 'alfresco-js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\nimport { ShareDataRow } from './share-data-row.model';\n\nexport class ShareDataTableAdapter implements DataTableAdapter {\n\n    ERR_ROW_NOT_FOUND: string = 'Row not found';\n    ERR_COL_NOT_FOUND: string = 'Column not found';\n\n    private sorting: DataSorting;\n    private rows: DataRow[];\n    private columns: DataColumn[];\n\n    private filter: any;\n    private imageResolver: any;\n\n    thumbnails: boolean = false;\n    permissionsStyle: PermissionStyleModel[];\n    selectedRow: DataRow;\n\n    constructor(private documentListService: DocumentListService,\n                schema: DataColumn[] = [],\n                sorting?: DataSorting) {\n        this.rows = [];\n        this.columns = schema || [];\n        this.sorting = sorting;\n    }\n\n    getRows(): Array<DataRow> {\n        return this.rows;\n    }\n\n    // TODO: disable this api\n    setRows(rows: Array<DataRow>) {\n        this.rows = rows || [];\n        this.sort();\n    }\n\n    getColumns(): Array<DataColumn> {\n        return this.columns;\n    }\n\n    setColumns(columns: Array<DataColumn>) {\n        this.columns = columns || [];\n    }\n\n    getValue(row: DataRow, col: DataColumn): any {\n        if (!row) {\n            throw new Error(this.ERR_ROW_NOT_FOUND);\n        }\n        if (!col) {\n            throw new Error(this.ERR_COL_NOT_FOUND);\n        }\n        let dataRow: ShareDataRow = <ShareDataRow> row;\n        let value: any = row.getValue(col.key);\n        if (dataRow.cache[col.key] !== undefined) {\n            return dataRow.cache[col.key];\n        }\n\n        if (col.type === 'date') {\n            try {\n                const result = this.formatDate(col, value);\n                return dataRow.cacheValue(col.key, result);\n            } catch (err) {\n                console.error(`Error parsing date ${value} to format ${col.format}`);\n                return 'Error';\n            }\n        }\n\n        if (col.key === '$thumbnail') {\n\n            if (this.imageResolver) {\n                let resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n\n            const node = (<ShareDataRow> row).node;\n\n            if (node.entry.isFolder) {\n                return this.documentListService.getMimeTypeIcon('folder');\n            }\n\n            if (node.entry.isFile) {\n                if (this.thumbnails) {\n                    return this.documentListService.getDocumentThumbnailUrl(node);\n                }\n            }\n\n            if (node.entry.content) {\n                const mimeType = node.entry.content.mimeType;\n                if (mimeType) {\n                    return this.documentListService.getMimeTypeIcon(mimeType);\n                }\n            }\n\n            return this.documentListService.getDefaultMimeTypeIcon();\n        }\n\n        if (col.type === 'image') {\n\n            if (this.imageResolver) {\n                let resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n        }\n\n        return dataRow.cacheValue(col.key, value);\n    }\n\n    formatDate(col: DataColumn, value: any): string {\n        if (col.type === 'date') {\n            const format = col.format || 'medium';\n            if (format === 'timeAgo') {\n                const timeAgoPipe = new TimeAgoPipe();\n                return timeAgoPipe.transform(value);\n            } else {\n                const datePipe = new DatePipe('en-US');\n                return datePipe.transform(value, format);\n            }\n        }\n\n        return value;\n    }\n\n    getSorting(): DataSorting {\n        return this.sorting;\n    }\n\n    setSorting(sorting: DataSorting): void {\n        this.sorting = sorting;\n\n        this.sortRows(this.rows, this.sorting);\n    }\n\n    sort(key?: string, direction?: string): void {\n        let sorting = this.sorting || new DataSorting();\n        if (key) {\n            sorting.key = key;\n            sorting.direction = direction || 'asc';\n        }\n        this.setSorting(sorting);\n    }\n\n    setFilter(filter: any) {\n        this.filter = filter;\n    }\n\n    setImageResolver(resolver: any) {\n        this.imageResolver = resolver;\n    }\n\n    private sortRows(rows: DataRow[], sorting: DataSorting) {\n        const options: Intl.CollatorOptions = {};\n\n        if (sorting && sorting.key && rows && rows.length > 0) {\n\n            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {\n                options.numeric = true;\n            }\n\n            rows.sort((a: ShareDataRow, b: ShareDataRow) => {\n                if (a.node.entry.isFolder !== b.node.entry.isFolder) {\n                    return a.node.entry.isFolder ? -1 : 1;\n                }\n\n                let left = a.getValue(sorting.key);\n                if (left) {\n                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();\n                } else {\n                    left = '';\n                }\n\n                let right = b.getValue(sorting.key);\n                if (right) {\n                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();\n                } else {\n                    right = '';\n                }\n\n                return sorting.direction === 'asc'\n                    ? left.localeCompare(right, undefined, options)\n                    : right.localeCompare(left, undefined, options);\n            });\n        }\n    }\n\n    public loadPage(page: NodePaging, merge: boolean = false) {\n        let rows = [];\n\n        if (page && page.list) {\n            let data = page.list.entries;\n            if (data && data.length > 0) {\n                rows = data.map(item => new ShareDataRow(item, this.documentListService, this.permissionsStyle));\n\n                if (this.filter) {\n                    rows = rows.filter(this.filter);\n                }\n\n                // Sort by first sortable or just first column\n                if (this.columns && this.columns.length > 0) {\n                    let sorting = this.getSorting();\n                    if (sorting) {\n                        this.sortRows(rows, sorting);\n                    } else {\n                        let sortable = this.columns.filter(c => c.sortable);\n                        if (sortable.length > 0) {\n                            this.sort(sortable[0].key, 'asc');\n                        } else {\n                            this.sort(this.columns[0].key, 'asc');\n                        }\n                    }\n                }\n            }\n        }\n\n        if (merge) {\n            this.rows = this.rows.concat(rows);\n        } else {\n            this.rows = rows;\n        }\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let presetsDefaultModel = {\n    '-trashcan-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'archivedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'archivedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_BY',\n            sortable: true\n        }\n    ],\n    '-sites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-mysites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-favorites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ],\n    '-recent-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        }\n    ],\n    '-sharedlinks-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        },\n        {\n            key: 'sharedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SHARED_BY',\n            sortable: true\n        }\n    ],\n    'default': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ]\n};\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ContentActionModel {\n    icon: string;\n    title: string;\n    handler: ContentActionHandler;\n    execute: Function;\n    target: string;\n    permission: string;\n    disableWithNoPermission: boolean = false;\n    disabled: boolean = false;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.icon = obj.icon;\n            this.title = obj.title;\n            this.handler = obj.handler;\n            this.execute = obj.execute;\n            this.target = obj.target;\n            this.permission = obj.permission;\n            this.disableWithNoPermission = obj.disableWithNoPermission;\n            this.disabled = obj.disabled;\n        }\n    }\n}\n\nexport enum ContentActionTarget {\n    Document = 'document',\n    Folder = 'folder',\n    All = 'all'\n}\n\nexport type ContentActionHandler = (obj: any, target?: any, permission?: string) => any;\n\nexport class DocumentActionModel extends ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'document';\n    }\n}\n\nexport class FolderActionModel extends  ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'folder';\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseEvent } from '@alfresco/adf-core';\nimport { MinimalNodeEntity, MinimalNodeEntryEntity } from 'alfresco-js-api';\n\nexport class NodeEntityEvent extends BaseEvent<MinimalNodeEntity> {\n\n    value: MinimalNodeEntity;\n\n    defaultPrevented: boolean;\n\n    constructor(entity: MinimalNodeEntity) {\n        super();\n        this.value = entity;\n    }\n}\n\nexport class NodeEntryEvent extends BaseEvent<MinimalNodeEntryEntity> {\n\n    value: MinimalNodeEntryEntity;\n\n    defaultPrevented: boolean;\n\n    constructor(entity: MinimalNodeEntryEntity) {\n        super();\n        this.value = entity;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AlfrescoApiService,\n    LogService,\n    PaginationModel\n} from '@alfresco/adf-core';\n\nimport {\n    NodePaging,\n    PersonEntry,\n    SitePaging,\n    DeletedNodesPaging\n} from 'alfresco-js-api';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class CustomResourcesService {\n\n    private CREATE_PERMISSION = 'create';\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    getRecentFiles(personId: string, pagination: PaginationModel): Observable<NodePaging> {\n        return new Observable(observer => {\n            this.apiService.peopleApi.getPerson(personId)\n                .then((person: PersonEntry) => {\n                        const username = person.entry.id;\n                        const query = {\n                            query: {\n                                query: '*',\n                                language: 'afts'\n                            },\n                            filterQueries: [\n                                { query: `cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]` },\n                                { query: `cm:modifier:${username} OR cm:creator:${username}` },\n                                { query: `TYPE:\"content\" AND -TYPE:\"app:filelink\" AND -TYPE:\"fm:post\"` }\n                            ],\n                            include: ['path', 'properties', 'allowableOperations'],\n                            sort: [{\n                                type: 'FIELD',\n                                field: 'cm:modified',\n                                ascending: false\n                            }],\n                            paging: {\n                                maxItems: pagination.maxItems,\n                                skipCount: pagination.skipCount\n                            }\n                        };\n                        return this.apiService.searchApi.search(query)\n                            .then((serachResult) => {\n                                    observer.next(serachResult);\n                                    observer.complete();\n                                },\n                                (err) => {\n                                    observer.error(err);\n                                    observer.complete();\n                                });\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).catch(err => this.handleError(err));\n    }\n\n    loadFavorites(pagination: PaginationModel, includeFields: string[] = []): Observable<NodePaging> {\n        let includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount,\n            where: '(EXISTS(target/file) OR EXISTS(target/folder))',\n            include: includeFieldsRequest\n        };\n\n        return new Observable(observer => {\n            this.apiService.favoritesApi.getFavorites('-me-', options)\n                .then((result: NodePaging) => {\n                        let page: NodePaging = {\n                            list: {\n                                entries: result.list.entries\n                                    .map(({ entry: { target } }: any) => ({\n                                        entry: target.file || target.folder\n                                    }))\n                                    .map(({ entry }: any) => {\n                                        entry.properties = {\n                                            'cm:title': entry.title,\n                                            'cm:description': entry.description\n                                        };\n                                        return { entry };\n                                    }),\n                                pagination: result.list.pagination\n                            }\n                        };\n\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).catch(err => this.handleError(err));\n    }\n\n    loadMemberSites(pagination: PaginationModel): Observable<NodePaging> {\n        const options = {\n            include: ['properties'],\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return new Observable(observer => {\n            this.apiService.peopleApi.getSiteMembership('-me-', options)\n                .then((result: SitePaging) => {\n                        let page: NodePaging = {\n                            list: {\n                                entries: result.list.entries\n                                    .map(({ entry: { site } }: any) => {\n                                        site.allowableOperations = site.allowableOperations ? site.allowableOperations : [this.CREATE_PERMISSION];\n                                        site.name = site.name || site.title;\n                                        return {\n                                            entry: site\n                                        };\n                                    }),\n                                pagination: result.list.pagination\n                            }\n                        };\n\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).catch(err => this.handleError(err));\n    }\n\n    loadSites(pagination: PaginationModel): Observable<NodePaging> {\n        const options = {\n            include: ['properties'],\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return new Observable(observer => {\n            this.apiService.sitesApi.getSites(options)\n                .then((page: NodePaging) => {\n                        page.list.entries.map(\n                            ({ entry }: any) => {\n                                entry.name = entry.name || entry.title;\n                                return { entry };\n                            }\n                        );\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).catch(err => this.handleError(err));\n    }\n\n    loadTrashcan(pagination: PaginationModel, includeFields: string[] = []): Observable<DeletedNodesPaging> {\n        let includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            include: includeFieldsRequest,\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return Observable.fromPromise(this.apiService.nodesApi.getDeletedNodes(options)).catch(err => this.handleError(err));\n\n    }\n\n    loadSharedLinks(pagination: PaginationModel, includeFields: string[] = []): Observable<NodePaging> {\n        let includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            include: includeFieldsRequest,\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return Observable.fromPromise(this.apiService.sharedLinksApi.findSharedLinks(options)).catch(err => this.handleError(err));\n    }\n\n    isCustomSource(folderId: string): boolean {\n        let isCustomSources = false;\n        const sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];\n\n        if (sources.indexOf(folderId) > -1) {\n            isCustomSources = true;\n        }\n\n        return isCustomSources;\n    }\n\n    loadFolderByNodeId(nodeId: string, pagination: PaginationModel, includeFields: string[]): Observable<NodePaging> {\n        if (nodeId === '-trashcan-') {\n            return this.loadTrashcan(pagination, includeFields);\n        } else if (nodeId === '-sharedlinks-') {\n            return this.loadSharedLinks(pagination, includeFields);\n        } else if (nodeId === '-sites-') {\n            return this.loadSites(pagination);\n        } else if (nodeId === '-mysites-') {\n            return this.loadMemberSites(pagination);\n        } else if (nodeId === '-favorites-') {\n            return this.loadFavorites(pagination, includeFields);\n        } else if (nodeId === '-recent-') {\n            return this.getRecentFiles('-me-', pagination);\n        }\n    }\n\n    // TODO: remove it from here\n    getCorrespondingNodeIds(nodeId: string, pagination: PaginationModel): Observable<string[]> {\n        if (nodeId === '-trashcan-') {\n            return Observable.fromPromise(this.apiService.nodesApi.getDeletedNodes()\n                .then(result => result.list.entries.map(node => node.entry.id)));\n\n        } else if (nodeId === '-sharedlinks-') {\n            return Observable.fromPromise(this.apiService.sharedLinksApi.findSharedLinks()\n                .then(result => result.list.entries.map(node => node.entry.nodeId)));\n\n        } else if (nodeId === '-sites-') {\n            return Observable.fromPromise(this.apiService.sitesApi.getSites()\n                .then(result => result.list.entries.map(node => node.entry.guid)));\n\n        } else if (nodeId === '-mysites-') {\n            return Observable.fromPromise(this.apiService.peopleApi.getSiteMembership('-me-')\n                .then(result => result.list.entries.map(node => node.entry.guid)));\n\n        } else if (nodeId === '-favorites-') {\n            return Observable.fromPromise(this.apiService.favoritesApi.getFavorites('-me-')\n                .then(result => result.list.entries.map(node => node.entry.targetGuid)));\n\n        } else if (nodeId === '-recent-') {\n            return new Observable(observer => {\n                this.getRecentFiles('-me-', pagination)\n                    .subscribe((recentFiles) => {\n                        let recentFilesIdS = recentFiles.list.entries.map(node => node.entry.id);\n                        observer.next(recentFilesIdS);\n                        observer.complete();\n                    });\n            });\n\n        }\n\n        return Observable.of([]);\n    }\n\n    private getIncludesFields(includeFields: string[]): string[] {\n        return ['path', 'properties', 'allowableOperations', 'permissions', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n    }\n\n    private handleError(error: Response) {\n        // in a real world app, we may send the error to some remote logging infrastructure\n        // instead of just logging it to the console\n        this.logService.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone,\n    OnChanges, OnDestroy, OnInit, Output, SimpleChanges, TemplateRef, ViewChild, ViewEncapsulation\n} from '@angular/core';\n\nimport {\n    ContentService, DataCellEvent, DataColumn, DataRowActionEvent, DataSorting, DataTableComponent,\n    DisplayMode, ObjectDataColumn, PaginatedComponent, AppConfigService, DataColumnListComponent,\n    UserPreferencesService, PaginationModel\n} from '@alfresco/adf-core';\n\nimport { MinimalNodeEntity, MinimalNodeEntryEntity, NodePaging } from 'alfresco-js-api';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { ShareDataRow } from './../data/share-data-row.model';\nimport { ShareDataTableAdapter } from './../data/share-datatable-adapter';\n\nimport { presetsDefaultModel } from '../models/preset.model';\nimport { ContentActionModel } from './../models/content-action.model';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\nimport { NodeEntityEvent, NodeEntryEvent } from './node.event';\nimport { CustomResourcesService } from './../services/custom-resources.service';\nimport { NavigableComponentInterface } from '../../breadcrumb/navigable-component.interface';\n\nexport enum PaginationStrategy {\n    Finite,\n    Infinite\n}\n\n@Component({\n    selector: 'adf-document-list',\n    styles: [``],\n    template: `<adf-datatable\n    #dataTable\n    [selectionMode]=\"selectionMode\"\n    [data]=\"data\"\n    [actions]=\"contentActions\"\n    [actionsPosition]=\"contentActionsPosition\"\n    [multiselect]=\"multiselect\"\n    [allowDropFiles]=\"allowDropFiles\"\n    [contextMenu]=\"contextMenuActions\"\n    [rowStyle]=\"rowStyle\"\n    [rowStyleClass]=\"rowStyleClass\"\n    [loading]=\"loading\"\n    [display]=\"display\"\n    [noPermission]=\"noPermission\"\n    [showHeader]=\"!isEmpty() && showHeader\"\n    (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n    (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n    (executeRowAction)=\"onExecuteRowAction($event)\"\n    (rowClick)=\"onNodeClick($event.value?.node)\"\n    (rowDblClick)=\"onNodeDblClick($event.value?.node)\"\n    (row-select)=\"onNodeSelect($event.detail)\"\n    (row-unselect)=\"onNodeUnselect($event.detail)\">\n\n    <div *ngIf=\"!isEmptyTemplateDefined()\">\n        <no-content-template>\n            <ng-template>\n                <adf-empty-list>\n                    <div class=\"adf-empty-list_template adf-empty-folder\">\n                        <div class=\"adf-empty-folder-this-space-is-empty\">{{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}}</div>\n                        <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-drag-drop\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\n                        <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-any-files-here-to-add\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\n                        <img class=\"adf-empty-folder-image\" [src]=\"emptyFolderImageUrl\">\n                    </div>\n                    <!-- <div adf-empty-list-header class=\"adf-empty-list-header\"> {{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}} </div> -->\n                </adf-empty-list>\n            </ng-template>\n        </no-content-template>\n    </div>\n\n    <div *ngIf=\"!isNoPermissionTemplateDefined()\">\n        <no-permission-template>\n            <ng-template>\n                <div class=\"adf-no-permission__template\">\n                    <mat-icon>ic_error</mat-icon>\n                    <p class=\"adf-no-permission__template--text\">{{ 'ADF-DOCUMENT-LIST.NO_PERMISSION' | translate }}</p>\n                </div>\n            </ng-template>\n        </no-permission-template>\n    </div>\n\n    <div>\n        <loading-content-template>\n            <ng-template>\n                <div class=\"adf-document-list-loading-container\">\n                    <mat-progress-spinner\n                        id=\"adf-document-list-loading\"\n                        class=\"adf-document-list-loading-margin\"\n                        [color]=\"'primary'\"\n                        [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </div>\n            </ng-template>\n        </loading-content-template>\n    </div>\n</adf-datatable>\n`,\n    encapsulation: ViewEncapsulation.None\n})\nexport class DocumentListComponent implements OnInit, OnChanges, OnDestroy, AfterContentInit, PaginatedComponent, NavigableComponentInterface {\n\n    static SINGLE_CLICK_NAVIGATION: string = 'click';\n    static DOUBLE_CLICK_NAVIGATION: string = 'dblclick';\n    static DEFAULT_PAGE_SIZE: number = 20;\n\n    @ContentChild(DataColumnListComponent)\n    columnList: DataColumnListComponent;\n\n    /** Include additional information about the node in the server request.for example: association, isLink, isLocked and others. */\n    @Input()\n    includeFields: string[];\n\n    /** Change the display mode of the table. Can be \"list\" or \"gallery\". */\n    @Input()\n    display: string = DisplayMode.List;\n\n    /** Define a set of CSS styles styles to apply depending on the permission\n     * of the user on that node. See the Permission Style model\n     * page for further details and examples.\n     */\n    @Input()\n    permissionsStyle: PermissionStyleModel[] = [];\n\n    /** The default route for all the location-based columns (if declared). */\n    @Input()\n    locationFormat: string = '/';\n\n    /** Toggles navigation to folder content or file preview */\n    @Input()\n    navigate: boolean = true;\n\n    /** Toggles the header */\n    @Input()\n    showHeader: boolean = true;\n\n    /** User interaction for folder navigation or file preview.\n     * Valid values are \"click\" and \"dblclick\". Default value: \"dblclick\"\n     */\n    @Input()\n    navigationMode: string = DocumentListComponent.DOUBLE_CLICK_NAVIGATION; // click|dblclick\n\n    /** Show document thumbnails rather than icons */\n    @Input()\n    thumbnails: boolean = false;\n\n    /** Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,\n     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // null|single|multiple\n\n    /** Toggles multiselect mode */\n    @Input()\n    multiselect: boolean = false;\n\n    /** Toggles content actions for each row */\n    @Input()\n    contentActions: boolean = false;\n\n    /** Position of the content actions dropdown menu. Can be set to \"left\" or \"right\". */\n    @Input()\n    contentActionsPosition: string = 'right'; // left|right\n\n    /** Toggles context menus for each row */\n    @Input()\n    contextMenuActions: boolean = false;\n\n    /** Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg' */\n    @Input()\n    emptyFolderImageUrl: string = './assets/images/empty_doc_lib.svg';\n\n    /** Toggle file drop support for rows (see Upload Directive for further details */\n    @Input()\n    allowDropFiles: boolean = false;\n\n    /** Defines default sorting. The format is an array of 2 strings `[key, direction]`\n     * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to\n     * override the default sorting detected by the component based on columns.\n     */\n    @Input()\n    sorting: string[];\n\n    /** The inline style to apply to every row. See\n     * the Angular NgStyle\n     * docs for more details and usage examples.\n     */\n    @Input()\n    rowStyle: string;\n\n    /** The CSS class to apply to every row */\n    @Input()\n    rowStyleClass: string;\n\n    /** Toggles the loading state and animated spinners for the component. Used in\n     * combination with `navigate=false` to perform custom navigation and loading\n     * state indication.\n     */\n    @Input()\n    loading: boolean = false;\n\n    /** Custom row filter */\n    @Input()\n    rowFilter: any | null = null;\n\n    /** Custom image resolver */\n    @Input()\n    imageResolver: any | null = null;\n\n    /** The ID of the folder node to display or a reserved string alias for special sources */\n    @Input()\n    currentFolderId: string = null;\n\n    /** @deprecated 2.3.0 use currentFolderId or node */\n    /** Currently displayed folder node */\n    @Input()\n    folderNode: MinimalNodeEntryEntity = null;\n\n    /** The Document list will show all the nodes contained in the NodePaging entity */\n    @Input()\n    node: NodePaging = null;\n\n    /** Default value is stored into user preference settings use it only if you are not using the pagination */\n    @Input()\n    maxItems: number;\n\n    /** @deprecated 2.3.0 define it in pagination */\n    /** Number of elements to skip over for pagination purposes */\n    @Input()\n    skipCount: number = 0;\n\n    /** @deprecated 2.3.0 */\n    /** Set document list to work in infinite scrolling mode */\n    @Input()\n    enableInfiniteScrolling: boolean = false;\n\n    /** Emitted when the user clicks a list node */\n    @Output()\n    nodeClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the user double-clicks a list node */\n    @Output()\n    nodeDblClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the current display folder changes */\n    @Output()\n    folderChange: EventEmitter<NodeEntryEvent> = new EventEmitter<NodeEntryEvent>();\n\n    /** Emitted when the user acts upon files with either single or double click\n     * (depends on `navigation-mode`). Useful for integration with the\n     * Viewer component.\n     */\n    @Output()\n    preview: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the Document List has loaded all items and is ready for use */\n    @Output()\n    ready: EventEmitter<NodePaging> = new EventEmitter();\n\n    /** Emitted when the API fails to get the Document List data */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('dataTable')\n    dataTable: DataTableComponent;\n\n    actions: ContentActionModel[] = [];\n    emptyFolderTemplate: TemplateRef<any>;\n    noPermissionTemplate: TemplateRef<any>;\n    contextActionHandler: Subject<any> = new Subject();\n    data: ShareDataTableAdapter;\n    noPermission: boolean = false;\n    selection = new Array<MinimalNodeEntity>();\n\n    private _pagination: BehaviorSubject<PaginationModel>;\n    private layoutPresets = {};\n\n    private contextActionHandlerSubscription: Subscription;\n\n    constructor(private documentListService: DocumentListService,\n                private ngZone: NgZone,\n                private elementRef: ElementRef,\n                private appConfig: AppConfigService,\n                private preferences: UserPreferencesService,\n                private customResourcesService: CustomResourcesService,\n                private contentService: ContentService) {\n    }\n\n    getContextActions(node: MinimalNodeEntity) {\n        if (node && node.entry) {\n            let actions = this.getNodeActions(node);\n            if (actions && actions.length > 0) {\n                return actions.map((currentAction: ContentActionModel) => {\n                    return {\n                        model: currentAction,\n                        node: node,\n                        subject: this.contextActionHandler\n                    };\n                });\n            }\n        }\n        return null;\n    }\n\n    /** @deprecated 2.3.0 define it in pagination */\n    get supportedPageSizes(): number[] {\n        return this.preferences.getDefaultPageSizes();\n    }\n\n    get hasCustomLayout(): boolean {\n        return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;\n    }\n\n    private getDefaultSorting(): DataSorting {\n        let defaultSorting: DataSorting;\n        if (this.sorting) {\n            const [key, direction] = this.sorting;\n            defaultSorting = new DataSorting(key, direction);\n        }\n        return defaultSorting;\n    }\n\n    private getLayoutPreset(name: string = 'default'): DataColumn[] {\n        return (this.layoutPresets[name] || this.layoutPresets['default']).map(col => new ObjectDataColumn(col));\n    }\n\n    get pagination(): BehaviorSubject<PaginationModel> {\n        let maxItems = this.preferences.paginationSize;\n\n        if (!this._pagination) {\n            if (this.maxItems) {\n                maxItems = this.maxItems;\n            }\n\n            let defaultPagination = <PaginationModel> {\n                maxItems: maxItems,\n                skipCount: 0,\n                totalItems: 0,\n                hasMoreItems: false\n            };\n\n            this._pagination = new BehaviorSubject<PaginationModel>(defaultPagination);\n        }\n\n        return this._pagination;\n    }\n\n    isEmptyTemplateDefined(): boolean {\n        if (this.dataTable) {\n            if (this.emptyFolderTemplate) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isNoPermissionTemplateDefined(): boolean {\n        if (this.dataTable) {\n            if (this.noPermissionTemplate) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isMobile(): boolean {\n        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    }\n\n    isEmpty() {\n        return !this.data || this.data.getRows().length === 0;\n    }\n\n    ngOnInit() {\n        this.loadLayoutPresets();\n        this.data = new ShareDataTableAdapter(this.documentListService, null, this.getDefaultSorting());\n        this.data.thumbnails = this.thumbnails;\n        this.data.permissionsStyle = this.permissionsStyle;\n\n        if (this.rowFilter) {\n            this.data.setFilter(this.rowFilter);\n        }\n\n        if (this.imageResolver) {\n            this.data.setImageResolver(this.imageResolver);\n        }\n\n        this.contextActionHandlerSubscription = this.contextActionHandler.subscribe(val => this.contextActionCallback(val));\n\n        this.enforceSingleClickNavigationForMobile();\n    }\n\n    ngAfterContentInit() {\n        let schema: DataColumn[] = [];\n\n        if (this.hasCustomLayout) {\n            schema = this.columnList.columns.map(c => <DataColumn> c);\n        }\n\n        if (!this.data) {\n            this.data = new ShareDataTableAdapter(this.documentListService, schema, this.getDefaultSorting());\n        } else if (schema && schema.length > 0) {\n            this.data.setColumns(schema);\n        }\n\n        let columns = this.data.getColumns();\n        if (!columns || columns.length === 0) {\n            this.setupDefaultColumns(this.currentFolderId);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.resetSelection();\n\n        if (changes.folderNode && changes.folderNode.currentValue) {\n            this.currentFolderId = changes.folderNode.currentValue.id;\n            this.resetNewFolderPagination();\n            this.loadFolder();\n        } else if (changes.currentFolderId &&\n            changes.currentFolderId.currentValue &&\n            changes.currentFolderId.currentValue !== changes.currentFolderId.previousValue) {\n            this.resetNewFolderPagination();\n            this.loadFolder();\n        } else if (this.data) {\n            if (changes.node && changes.node.currentValue) {\n                if (changes.node.currentValue.list.pagination) {\n                    changes.node.currentValue.list.pagination.skipCount = 0;\n                }\n                this.data.loadPage(changes.node.currentValue);\n                this.onDataReady(changes.node.currentValue);\n            } else if (changes.rowFilter) {\n                this.data.setFilter(changes.rowFilter.currentValue);\n                if (this.currentFolderId) {\n                    this.loadFolderNodesByFolderNodeId(this.currentFolderId, this.pagination.getValue()).catch(err => this.error.emit(err));\n                }\n            } else if (changes.imageResolver) {\n                this.data.setImageResolver(changes.imageResolver.currentValue);\n            }\n        }\n    }\n\n    reload() {\n        this.ngZone.run(() => {\n            this.resetSelection();\n            if (this.node) {\n                this.data.loadPage(this.node);\n                this.onDataReady(this.node);\n            } else {\n                this.loadFolder();\n            }\n        });\n    }\n\n    contextActionCallback(action) {\n        if (action) {\n            this.executeContentAction(action.node, action.model);\n        }\n    }\n\n    getNodeActions(node: MinimalNodeEntity | any): ContentActionModel[] {\n        let target = null;\n\n        if (node && node.entry) {\n            if (node.entry.isFile) {\n                target = 'document';\n            } else if (node.entry.isFolder) {\n                target = 'folder';\n            }\n\n            if (target) {\n                let actionsByTarget = this.actions.filter(entry => {\n                    return entry.target.toLowerCase() === target;\n                }).map(action => new ContentActionModel(action));\n\n                actionsByTarget.forEach((action) => {\n                    this.disableActionsWithNoPermissions(node, action);\n                });\n\n                return actionsByTarget;\n            }\n        }\n\n        return [];\n    }\n\n    disableActionsWithNoPermissions(node: MinimalNodeEntity, action: ContentActionModel) {\n        if (action.permission && node.entry.allowableOperations && !this.contentService.hasPermission(node.entry, action.permission)) {\n            action.disabled = true;\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onShowContextMenu(e?: Event) {\n        if (e && this.contextMenuActions) {\n            e.preventDefault();\n        }\n    }\n\n    performNavigation(node: MinimalNodeEntity): boolean {\n        if (this.canNavigateFolder(node)) {\n            this.updateFolderData(node);\n            return true;\n        }\n        return false;\n    }\n\n    performCustomSourceNavigation(node: MinimalNodeEntity): boolean {\n        if (this.customResourcesService.isCustomSource(this.currentFolderId)) {\n            this.updateFolderData(node);\n            return true;\n        }\n        return false;\n    }\n\n    updateFolderData(node: MinimalNodeEntity): void {\n        this.resetNewFolderPagination();\n        this.currentFolderId = node.entry.id;\n        this.reload();\n        this.folderChange.emit(new NodeEntryEvent(node.entry));\n    }\n\n    updateCustomSourceData(nodeId: string): void {\n        this.folderNode = null;\n        this.currentFolderId = nodeId;\n    }\n\n    /**\n     * Invoked when executing content action for a document or folder.\n     * @param node Node to be the context of the execution.\n     * @param action Action to be executed against the context.\n     */\n    executeContentAction(node: MinimalNodeEntity, action: ContentActionModel) {\n        if (node && node.entry && action) {\n            let handlerSub;\n\n            if (typeof action.handler === 'function') {\n                handlerSub = action.handler(node, this, action.permission);\n            } else {\n                handlerSub = Observable.of(true);\n            }\n\n            if (typeof action.execute === 'function') {\n                handlerSub.subscribe(() => {\n                    action.execute(node);\n                });\n            }\n        }\n    }\n\n    loadFolder() {\n        if (!this.pagination.getValue().merge) {\n            this.loading = true;\n        }\n\n        if (!this.hasCustomLayout) {\n            this.setupDefaultColumns(this.currentFolderId);\n        }\n\n        if (this.folderNode) {\n            return this.loadFolderNodesByFolderNodeId(this.folderNode.id, this.pagination.getValue())\n                .catch(err => this.handleError(err));\n        } else {\n            this.loadFolderByNodeId(this.currentFolderId);\n        }\n    }\n\n    loadFolderByNodeId(nodeId: string) {\n        if (this.customResourcesService.isCustomSource(nodeId)) {\n            this.updateCustomSourceData(nodeId);\n            this.customResourcesService.loadFolderByNodeId(nodeId, this.pagination.getValue(), this.includeFields)\n                .subscribe((page: NodePaging) => {\n                    this.onPageLoaded(page);\n                }, err => {\n                    this.error.emit(err);\n                });\n        } else {\n            this.documentListService\n                .getFolderNode(nodeId, this.includeFields)\n                .subscribe((node: MinimalNodeEntryEntity) => {\n                    this.folderNode = node;\n                    return this.loadFolderNodesByFolderNodeId(node.id, this.pagination.getValue())\n                        .catch(err => this.handleError(err));\n                }, err => {\n                    this.handleError(err);\n                });\n        }\n    }\n\n    loadFolderNodesByFolderNodeId(id: string, pagination: PaginationModel): Promise<any> {\n        return new Promise((resolve, reject) => {\n\n            this.documentListService\n                .getFolder(null, {\n                    maxItems: pagination.maxItems,\n                    skipCount: pagination.skipCount,\n                    rootFolderId: id\n                }, this.includeFields)\n                .subscribe(\n                    nodePaging => {\n                        this.data.loadPage(<NodePaging> nodePaging, this.pagination.getValue().merge);\n                        this.loading = false;\n                        this.onDataReady(nodePaging);\n                        resolve(true);\n                    }, err => {\n                        this.handleError(err);\n                    });\n        });\n    }\n\n    resetSelection() {\n        this.dataTable.resetSelection();\n        this.selection = [];\n        this.noPermission = false;\n    }\n\n    private onPageLoaded(nodePaging: NodePaging) {\n        if (nodePaging) {\n            this.data.loadPage(nodePaging, this.pagination.getValue().merge);\n            this.loading = false;\n            this.onDataReady(nodePaging);\n        }\n    }\n\n    /**\n     * Creates a set of predefined columns.\n     */\n    setupDefaultColumns(preset: string = 'default'): void {\n        if (this.data) {\n            const columns = this.getLayoutPreset(preset);\n            this.data.setColumns(columns);\n        }\n    }\n\n    onPreviewFile(node: MinimalNodeEntity) {\n        if (node) {\n            this.preview.emit(new NodeEntityEvent(node));\n        }\n    }\n\n    onNodeClick(node: MinimalNodeEntity) {\n        const domEvent = new CustomEvent('node-click', {\n            detail: {\n                sender: this,\n                node: node\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(node);\n        this.nodeClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {\n                if (node && node.entry) {\n                    if (node.entry.isFile) {\n                        this.onPreviewFile(node);\n                    }\n\n                    if (node.entry.isFolder) {\n                        this.performNavigation(node);\n                    }\n                }\n            }\n        }\n    }\n\n    onNodeDblClick(node: MinimalNodeEntity) {\n        const domEvent = new CustomEvent('node-dblclick', {\n            detail: {\n                sender: this,\n                node: node\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(node);\n        this.nodeDblClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {\n                if (node && node.entry) {\n                    if (node.entry.isFile) {\n                        this.onPreviewFile(node);\n                    }\n\n                    if (node.entry.isFolder) {\n                        this.performNavigation(node);\n                    }\n                }\n            }\n        }\n    }\n\n    onNodeSelect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map(entry => entry.node);\n        const domEvent = new CustomEvent('node-select', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onNodeUnselect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map(entry => entry.node);\n        const domEvent = new CustomEvent('node-unselect', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onShowRowContextMenu(event: DataCellEvent) {\n        if (this.contextMenuActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getContextActions(node) || [];\n            }\n        }\n    }\n\n    onShowRowActionsMenu(event: DataCellEvent) {\n        if (this.contentActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getNodeActions(node) || [];\n            }\n        }\n    }\n\n    onExecuteRowAction(event: DataRowActionEvent) {\n        if (this.contentActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            let action = (<ContentActionModel> args.action);\n            this.executeContentAction(node, action);\n        }\n    }\n\n    private enforceSingleClickNavigationForMobile(): void {\n        if (this.isMobile()) {\n            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;\n        }\n    }\n\n    canNavigateFolder(node: MinimalNodeEntity): boolean {\n        let canNavigateFolder: boolean = false;\n\n        if (this.customResourcesService.isCustomSource(this.currentFolderId)) {\n            canNavigateFolder = false;\n        } else if (node && node.entry && node.entry.isFolder) {\n            canNavigateFolder = true;\n        }\n\n        return canNavigateFolder;\n    }\n\n    private loadLayoutPresets(): void {\n        const externalSettings = this.appConfig.get('document-list.presets', null);\n\n        if (externalSettings) {\n            this.layoutPresets = Object.assign({}, presetsDefaultModel, externalSettings);\n        } else {\n            this.layoutPresets = presetsDefaultModel;\n        }\n    }\n\n    private onDataReady(nodePaging: NodePaging) {\n        this.ready.emit(nodePaging);\n\n        this.pagination.next(nodePaging.list.pagination);\n    }\n\n    updatePagination(pagination: PaginationModel) {\n        this.reload();\n    }\n\n    navigateTo(nodeId: string) {\n        this.currentFolderId = nodeId;\n        this.resetNewFolderPagination();\n        this.loadFolder();\n        this.folderChange.emit(new NodeEntryEvent({ id: nodeId }));\n    }\n\n    private resetNewFolderPagination() {\n        this.folderNode = null;\n        this.pagination.value.skipCount = 0;\n    }\n\n    // TODO: remove it from here\n    getCorrespondingNodeIds(nodeId: string): Observable<string[]> {\n        if (this.customResourcesService.isCustomSource(nodeId)) {\n            return this.customResourcesService.getCorrespondingNodeIds(nodeId, this.pagination.getValue());\n        } else if (nodeId) {\n            return new Observable(observer => {\n                this.documentListService.getFolderNode(nodeId, this.includeFields)\n                    .subscribe((node: MinimalNodeEntryEntity) => {\n                        observer.next([node.id]);\n                        observer.complete();\n                    });\n            });\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this.contextActionHandlerSubscription) {\n            this.contextActionHandlerSubscription.unsubscribe();\n            this.contextActionHandlerSubscription = null;\n        }\n    }\n\n    private handleError(err: any) {\n        if (err.message) {\n            if (JSON.parse(err.message).error.statusCode === 403) {\n                this.loading = false;\n                this.noPermission = true;\n            }\n        }\n        this.error.emit(err);\n\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { Component } from '@angular/core';\n\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-columns',\n    template: ''\n})\nexport class ContentColumnListComponent {\n\n    constructor(private documentList: DocumentListComponent, private logService: LogService ) {\n        this.logService.log('ContentColumnListComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnListComponent instead.');\n    }\n\n    /**\n     * Registers column model within the parent document list component.\n     * @param column Column definition model to register.\n     */\n    registerColumn(column: DataColumn): boolean {\n        if (this.documentList && column) {\n            let columns = this.documentList.data.getColumns();\n            columns.push(column);\n            return true;\n        }\n        return false;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector no-input-rename  */\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { AfterContentInit, Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core';\n\nimport { ContentColumnListComponent } from './content-column-list.component';\n\n@Component({\n    selector: 'content-column',\n    template: ''\n})\nexport class ContentColumnComponent implements OnInit, AfterContentInit, DataColumn {\n\n    @Input()\n    key: string;\n\n    @Input()\n    type: string = 'text';\n\n    @Input()\n    format: string;\n\n    @Input()\n    sortable: boolean = false;\n\n    @Input()\n    title: string = '';\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    /**\n     * Title to be used for screen readers.\n     */\n    @Input('sr-title')\n    srTitle: string;\n\n    @Input('class')\n    cssClass: string;\n\n    constructor(private list: ContentColumnListComponent, private logService: LogService) {\n        this.logService.log('ContentColumnComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnComponent instead.');\n    }\n\n    ngOnInit() {\n        if (!this.srTitle && this.key === '$thumbnail') {\n            this.srTitle = 'Thumbnail';\n        }\n    }\n\n    ngAfterContentInit() {\n        this.register();\n    }\n\n    register(): boolean {\n        if (this.list) {\n            return this.list.registerColumn(this);\n        }\n        return false;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class PermissionModel {\n    type: string;\n    action: string;\n    permission: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.type = obj.type || null;\n            this.action = obj.action || null;\n            this.permission = obj.permission || null;\n        }\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable, Output, EventEmitter } from '@angular/core';\nimport { MinimalNodeEntryEntity, MinimalNodeEntity } from 'alfresco-js-api';\nimport { Subject } from 'rxjs/Subject';\nimport { AlfrescoApiService, ContentService } from '@alfresco/adf-core';\nimport { MatDialog } from '@angular/material';\n\nimport { DocumentListService } from './document-list.service';\nimport { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';\nimport { NodeDownloadDirective } from '../../directives/node-download.directive';\n\n@Injectable()\nexport class NodeActionsService {\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private contentDialogService: ContentNodeDialogService,\n                public dialogRef: MatDialog,\n                public content: ContentService,\n                private documentListService?: DocumentListService,\n                private apiService?: AlfrescoApiService,\n                private dialog?: MatDialog) {}\n\n    downloadNode(node: MinimalNodeEntity) {\n        new NodeDownloadDirective(this.apiService, this.dialog)\n            .downloadNode(node);\n    }\n\n    /**\n     * Copy content node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyContent(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Copy folder node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyFolder(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * Move content node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveContent(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Move folder node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveFolder(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * General method for performing the given operation (copy|move)\n     *\n     * @param action the action to perform (copy|move)\n     * @param type type of the content (content|folder)\n     * @param contentEntry the contentEntry which has to have the action performed on\n     * @param permission permission which is needed to apply the action\n     */\n    private doFileOperation(action: string, type: string, contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        const observable: Subject<string> = new Subject<string>();\n\n        this.contentDialogService\n            .openCopyMoveDialog(action, contentEntry, permission)\n            .subscribe((selections: MinimalNodeEntryEntity[]) => {\n                const selection = selections[0];\n                this.documentListService[`${action}Node`].call(this.documentListService, contentEntry.id, selection.id)\n                    .subscribe(\n                    observable.next.bind(observable, `OPERATION.SUCCES.${type.toUpperCase()}.${action.toUpperCase()}`),\n                    observable.error.bind(observable)\n                    );\n            },\n            (error) => {\n                observable.error(error);\n                return observable;\n            });\n        return observable;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, TranslationService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\nimport { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';\nimport 'rxjs/add/observable/throw';\n\n@Injectable()\nexport class DocumentActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private contentNodeDialogService: ContentNodeDialogService,\n                private translation: TranslationService,\n                private documentListService?: DocumentListService,\n                private contentService?: ContentService) {\n        this.setupActionHandlers();\n    }\n\n    /**\n     * Gets the handler for an action.\n     * @param key Identifier of the action\n     * @returns The handler for the action\n     */\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            let lkey = key.toLowerCase();\n            return this.handlers[lkey] || null;\n        }\n        return null;\n    }\n\n    /**\n     * Sets a new handler for an action.\n     * @param key Identifier of the action\n     * @param handler Handler for the action\n     * @returns False if the key was an empty/null string, true otherwise\n     */\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            let lkey = key.toLowerCase();\n            this.handlers[lkey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if actions can be executed for an item.\n     * @param obj Item to receive an action\n     * @returns True if the action can be executed on this item, false otherwise\n     */\n    canExecuteAction(obj: any): boolean {\n        return this.documentListService && obj && obj.entry.isFile === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n        this.handlers['download'] = this.downloadNode.bind(this);\n        this.handlers['lock'] = this.lockNode.bind(this);\n    }\n\n    private lockNode(node: MinimalNodeEntity, target?: any, permission?: string) {\n        return this.contentNodeDialogService.openLockNodeDialog(node.entry);\n    }\n\n    private downloadNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        this.nodeActionsService.downloadNode(obj);\n    }\n\n    private copyNode(node: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(node: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(node: MinimalNodeEntity, target?: any, permission?: string): Observable<any> {\n        let handlerObservable;\n\n        if (this.canExecuteAction(node)) {\n            if (this.contentService.hasPermission(node.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(node.entry.id);\n                handlerObservable.subscribe(() => {\n                    let message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });\n                    this.success.next(message);\n                }, () => {\n                    let message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });\n                    this.error.next(message);\n                });\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({\n                    type: 'content',\n                    action: 'delete',\n                    permission: permission\n                }));\n                return Observable.throw(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, TranslationService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\nimport 'rxjs/add/observable/throw';\n\n@Injectable()\nexport class FolderActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private documentListService: DocumentListService,\n                private contentService: ContentService,\n                private translation: TranslationService) {\n        this.setupActionHandlers();\n    }\n\n    /**\n     * Gets the handler function for an action.\n     * @param key Identifier for the action\n     * @returns The handler function\n     */\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            let lkey = key.toLowerCase();\n            return this.handlers[lkey] || null;\n        }\n        return null;\n    }\n\n    /**\n     * Sets a new handler function for an action.\n     * @param key Identifier for the action\n     * @param handler The new handler function\n     * @returns True if the key was a valid action identifier, false otherwise\n     */\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            let lkey = key.toLowerCase();\n            this.handlers[lkey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if an action is available for a particular item.\n     * @param obj Item to check\n     * @returns True if the action is available, false otherwise\n     */\n    canExecuteAction(obj: any): boolean {\n        return this.documentListService && obj && obj.entry.isFolder === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n        this.handlers['download'] = this.downloadNode.bind(this);\n    }\n\n    private downloadNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        this.nodeActionsService.downloadNode(obj);\n    }\n\n    private copyNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyFolder(obj.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveFolder(obj.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                if (target && typeof target.reload === 'function') {\n                    target.reload();\n                }\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(node: MinimalNodeEntity, target?: any, permission?: string): Observable<any> {\n        let handlerObservable: Observable<any>;\n\n        if (this.canExecuteAction(node)) {\n            if (this.contentService.hasPermission(node.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(node.entry.id);\n                handlerObservable.subscribe(() => {\n                    if (target && typeof target.reload === 'function') {\n                        target.reload();\n                    }\n\n                    let message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });\n                    this.success.next(message);\n                }, () => {\n                    let message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });\n                    this.error.next(message);\n                });\n\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({type: 'folder', action: 'delete', permission: permission}));\n                return Observable.throw(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component } from '@angular/core';\n\nimport { ContentActionModel } from './../../models/content-action.model';\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-actions',\n    template: ''\n})\nexport class ContentActionListComponent {\n\n    constructor(private documentList: DocumentListComponent) {\n    }\n\n    /**\n     * Registers action handler within the parent document list component.\n     * @param action Action model to register.\n     */\n    registerAction(action: ContentActionModel): boolean {\n        if (this.documentList && action) {\n            this.documentList.actions.push(action);\n            return true;\n        }\n        return false;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { ContentActionHandler } from '../../models/content-action.model';\nimport { DocumentActionsService } from '../../services/document-actions.service';\nimport { FolderActionsService } from '../../services/folder-actions.service';\nimport { ContentActionModel, ContentActionTarget } from './../../models/content-action.model';\nimport { ContentActionListComponent } from './content-action-list.component';\n\n@Component({\n    selector: 'content-action',\n    template: '',\n    providers: [\n        DocumentActionsService,\n        FolderActionsService\n    ]\n})\nexport class ContentActionComponent implements OnInit {\n\n    /** The title of the action as shown in the menu. */\n    @Input()\n    title: string = 'Action';\n\n    /** The name of the icon to display next to the menu command (can be left blank). */\n    @Input()\n    icon: string;\n\n    /** System actions. Can be \"delete\", \"download\", \"copy\" or \"move\". */\n    @Input()\n    handler: string;\n\n    /** Type of item that the action appies to. Can be \"document\" or \"folder\" */\n    @Input()\n    target: string = ContentActionTarget.All;\n\n    /** The permission type. */\n    @Input()\n    permission: string;\n\n    /** Should this action be disabled in the menu if the user doesn't have permission for it? */\n    @Input()\n    disableWithNoPermission: boolean;\n\n    /** Is the menu item disabled? */\n    @Input()\n    disabled: boolean = false;\n\n    /** Emitted when the user selects the action from the menu. */\n    @Output()\n    execute = new EventEmitter();\n\n    /** Emitted when a permission error occurs */\n    @Output()\n    permissionEvent = new EventEmitter();\n\n    /** Emitted when an error occurs during the action.\n     * Applies to copy and move actions.\n     */\n    @Output()\n    error = new EventEmitter();\n\n    /** Emitted when the action succeeds with the success string message.\n     * Applies to copy, move and delete actions.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    constructor(\n        private list: ContentActionListComponent,\n        private documentActions: DocumentActionsService,\n        private folderActions: FolderActionsService) {\n    }\n\n    ngOnInit() {\n        if (this.target === ContentActionTarget.All) {\n            this.generateAction(ContentActionTarget.Folder);\n            this.generateAction(ContentActionTarget.Document);\n        } else {\n            this.generateAction(this.target);\n        }\n    }\n\n    register(model: ContentActionModel): boolean {\n        if (this.list) {\n            return this.list.registerAction(model);\n        }\n        return false;\n    }\n\n    private generateAction(target: string) {\n        let model = new ContentActionModel({\n            title: this.title,\n            icon: this.icon,\n            permission: this.permission,\n            disableWithNoPermission: this.disableWithNoPermission,\n            target: target,\n            disabled: this.disabled\n        });\n        if (this.handler) {\n            model.handler = this.getSystemHandler(target, this.handler);\n        }\n\n        if (this.execute) {\n            model.execute = (value: any): void => {\n                this.execute.emit({ value });\n            };\n        }\n\n        this.register(model);\n    }\n\n    getSystemHandler(target: string, name: string): ContentActionHandler {\n        if (target) {\n            let ltarget = target.toLowerCase();\n\n            if (ltarget === ContentActionTarget.Document) {\n                if (this.documentActions) {\n                    this.documentActions.permissionEvent.subscribe((permission) => {\n                        this.permissionEvent.emit(permission);\n                    });\n\n                    this.documentActions.error.subscribe((errors) => {\n                        this.error.emit(errors);\n                    });\n\n                    this.documentActions.success.subscribe((message) => {\n                        this.success.emit(message);\n                    });\n\n                    return this.documentActions.getHandler(name);\n                }\n                return null;\n            }\n\n            if (ltarget === ContentActionTarget.Folder) {\n                if (this.folderActions) {\n                    this.folderActions.permissionEvent.subscribe((permission) => {\n                        this.permissionEvent.emit(permission);\n                    });\n\n                    this.folderActions.error.subscribe((errors) => {\n                        this.error.emit(errors);\n                    });\n\n                    this.folderActions.success.subscribe((message) => {\n                        this.success.emit(message);\n                    });\n\n                    return this.folderActions.getHandler(name);\n                }\n                return null;\n            }\n        }\n        return null;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AfterContentInit, ContentChild, Directive, TemplateRef } from '@angular/core';\nimport { DocumentListComponent } from './../document-list.component';\n\n@Directive({\n    selector: 'empty-folder-content'\n})\nexport class EmptyFolderContentDirective implements AfterContentInit {\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    constructor(private documentList: DocumentListComponent) {\n    }\n\n    ngAfterContentInit() {\n        this.documentList.emptyFolderTemplate = this.template;\n        this.documentList.dataTable.noContentTemplate = this.template;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AfterContentInit, ContentChild, Directive, TemplateRef } from '@angular/core';\nimport { DocumentListComponent } from './../document-list.component';\n\n@Directive({\n    selector: 'no-permission-content'\n})\nexport class NoPermissionContentDirective implements AfterContentInit {\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    constructor(private documentList: DocumentListComponent) {\n    }\n\n    ngAfterContentInit() {\n        this.documentList.noPermissionTemplate = this.template;\n        this.documentList.dataTable.noPermissionTemplate = this.template;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// note: contains only limited subset of available fields\n\nimport { MinimalNodeEntity, MinimalNodeEntryEntity } from 'alfresco-js-api';\n\nexport class NodePaging {\n    list: NodePagingList;\n}\n\nexport class NodePagingList {\n    pagination: Pagination;\n    entries: NodeMinimalEntry[];\n}\n\nexport class NodeMinimalEntry implements MinimalNodeEntity {\n    entry: NodeMinimal;\n}\n\nexport class Pagination {\n    count: number;\n    hasMoreItems: boolean;\n    totalItems: number;\n    skipCount: number;\n    maxItems: number;\n}\n\nexport class NodeMinimal implements MinimalNodeEntryEntity {\n    id: string;\n    parentId: string;\n    name: string;\n    nodeType: string;\n    isFolder: boolean;\n    isFile: boolean;\n    modifiedAt: Date;\n    modifiedByUser: UserInfo;\n    createdAt: Date;\n    createdByUser: UserInfo;\n    content: ContentInfo;\n    path: PathInfoEntity;\n    properties: NodeProperties = {};\n}\n\nexport class UserInfo {\n    displayName: string;\n    id: string;\n}\n\nexport class ContentInfo {\n    mimeType: string;\n    mimeTypeName: string;\n    sizeInBytes: number;\n    encoding: string;\n}\n\nexport class PathInfoEntity {\n    elements: PathElementEntity[];\n    isComplete: boolean;\n    name: string;\n}\n\nexport class PathElementEntity {\n    id: string;\n    name: string;\n}\n\nexport interface NodeProperties {\n    [key: string]: any;\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PermissionsEnum } from '@alfresco/adf-core';\n\nexport class PermissionStyleModel {\n    css: string;\n    permission: PermissionsEnum;\n    isFolder: boolean = true;\n    isFile: boolean = true;\n\n    constructor(css: string, permission: PermissionsEnum, isFile: boolean = true, isFolder: boolean = true) {\n        this.css = css;\n        this.permission = permission;\n        this.isFile = isFile;\n        this.isFolder = isFolder;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileUploadStatus, NodesApiService, TranslationService, UploadService } from '@alfresco/adf-core';\nimport { Component, ContentChild, Input, Output, TemplateRef, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n    selector: 'adf-file-uploading-list',\n    template: `<div class=\"upload-list\">\n    <ng-template\n        ngFor\n        [ngForOf]=\"files\"\n        [ngForTemplate]=\"template\">\n    </ng-template>\n</div>\n`,\n    styles: [`:host{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}`]\n})\nexport class FileUploadingListComponent {\n\n    FileUploadStatus = FileUploadStatus;\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    @Input()\n    files: FileModel[] = [];\n\n    /** Emitted when a file in the list has an error. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    constructor(\n        private uploadService: UploadService,\n        private nodesApi: NodesApiService,\n        private translateService: TranslationService) {\n    }\n\n    /**\n     * Cancel file upload\n     *\n     * @param file File model to cancel upload for.\n     *\n     * @memberOf FileUploadingListComponent\n     */\n    cancelFile(file: FileModel): void {\n        this.uploadService.cancelUpload(file);\n    }\n\n    removeFile(file: FileModel): void {\n        this.deleteNode(file)\n            .subscribe(() => {\n                if ( file.status === FileUploadStatus.Error) {\n                    this.notifyError(file);\n                }\n\n                this.uploadService.cancelUpload(file);\n            });\n    }\n\n    /**\n     * Call the appropriate method for each file, depending on state\n     */\n    cancelAllFiles(): void {\n        this.getUploadingFiles()\n            .forEach((file) => this.uploadService.cancelUpload(file));\n\n        const deletedFiles = this.files\n            .filter((file) => file.status === FileUploadStatus.Complete)\n            .map((file) => this.deleteNode(file));\n\n        Observable.forkJoin(...deletedFiles)\n            .subscribe((files: FileModel[]) => {\n                const errors = files\n                    .filter((file) => file.status === FileUploadStatus.Error);\n\n                if (errors.length) {\n                    this.notifyError(...errors);\n                }\n\n                this.uploadService.cancelUpload(...files);\n            });\n    }\n\n    /**\n     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending\n     */\n    isUploadCompleted(): boolean {\n         return !this.isUploadCancelled() &&\n            Boolean(this.files.length) &&\n            !this.files\n                .some(({status}) =>\n                    status === FileUploadStatus.Starting ||\n                    status === FileUploadStatus.Progress ||\n                    status === FileUploadStatus.Pending\n                );\n    }\n\n    /**\n     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states\n     */\n    isUploadCancelled(): boolean {\n        return !!this.files.length &&\n            this.files\n                .every(({status}) =>\n                    status === FileUploadStatus.Aborted ||\n                    status === FileUploadStatus.Cancelled ||\n                    status === FileUploadStatus.Deleted\n                );\n    }\n\n    private deleteNode(file: FileModel): Observable<FileModel> {\n        const { id } = file.data.entry;\n\n        return this.nodesApi\n            .deleteNode(id, { permanent: true })\n            .map(() => {\n                file.status = FileUploadStatus.Deleted;\n                return file;\n            })\n            .catch((error) => {\n                file.status = FileUploadStatus.Error;\n                return Observable.of(file);\n            });\n    }\n\n    private notifyError(...files: FileModel[]) {\n        let messageError: string = null;\n\n        if (files.length === 1) {\n            messageError = this.translateService\n                .instant(\n                    'FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR',\n                    { fileName: files[0].name}\n                );\n        } else {\n            messageError = this.translateService\n                .instant(\n                    'FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR',\n                    { total: files.length }\n                );\n        }\n\n        this.error.emit(messageError);\n    }\n\n    private getUploadingFiles() {\n        return this.files.filter((item) => {\n            if (\n                item.status === FileUploadStatus.Pending ||\n                item.status === FileUploadStatus.Progress ||\n                item.status === FileUploadStatus.Starting\n            ) {\n                return item;\n            }\n        });\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    FileModel, FileUploadCompleteEvent, FileUploadDeleteEvent,\n    FileUploadErrorEvent, FileUploadStatus, UploadService\n} from '@alfresco/adf-core';\nimport { ChangeDetectorRef, Component, Input, Output, EventEmitter, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FileUploadingListComponent } from './file-uploading-list.component';\nimport 'rxjs/add/observable/merge';\n\n// @deprecated file-uploading-dialog TODO remove in 3.0.0\n@Component({\n    selector: 'adf-file-uploading-dialog, file-uploading-dialog',\n    template: `<div *ngIf=\"isDialogActive\"\n     class=\"upload-dialog\"\n     [class.upload-dialog--minimized]=\"isDialogMinimized\"\n     [class.upload-dialog--position-left]=\"position === 'left'\"\n     [class.upload-dialog--position-right]=\"position === 'right'\">\n    <header class=\"upload-dialog__header\">\n        <button\n            mat-button\n            color=\"secondary\"\n            [disabled]=\"isConfirmation\"\n            (click)=\"toggleMinimized()\">\n            <mat-icon\n                mat-list-icon\n                title=\"{{ (isDialogMinimized ? 'ADF_FILE_UPLOAD.BUTTON.MAXIMIZE': 'ADF_FILE_UPLOAD.BUTTON.MINIMIZE') | translate }}\">\n                    {{ isDialogMinimized ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}\n            </mat-icon>\n        </button>\n\n        <span\n            class=\"upload-dialog__title\"\n            *ngIf=\"!uploadList.isUploadCompleted() && !uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_PROGRESS'\n                | translate: {\n                    completed: totalCompleted,\n                    total: filesUploadingList.length\n                }\n            }}\n        </span>\n\n        <span\n            class=\"upload-dialog__title\"\n            *ngIf=\"uploadList.isUploadCompleted()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_COMPLETED'\n                | translate: {\n                    completed: totalCompleted,\n                    total: filesUploadingList.length\n                }\n            }}\n        </span>\n\n        <span\n            class=\"upload-dialog__title\"\n            *ngIf=\"uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_CANCELED' | translate }}\n        </span>\n    </header>\n\n    <section\n        class=\"upload-dialog__info\"\n        *ngIf=\"totalErrors\">\n        {{\n            (totalErrors > 1\n                 ? 'FILE_UPLOAD.MESSAGES.UPLOAD_ERRORS'\n                 : 'FILE_UPLOAD.MESSAGES.UPLOAD_ERROR')\n                 | translate: { total: totalErrors }\n        }}\n    </section>\n\n    <section\n        class=\"upload-dialog__content\"\n        [class.upload-dialog--padding]=\"isConfirmation\">\n        <adf-file-uploading-list\n            (error)=\"onError($event)\"\n            [class.upload-dialog--hide]=\"isConfirmation\"\n            #uploadList\n            [files]=\"filesUploadingList\">\n                <ng-template let-file=\"$implicit\">\n                     <adf-file-uploading-list-row\n                        [file]=\"file\"\n                        (remove)=\"uploadList.removeFile(file)\"\n                        (cancel)=\"uploadList.cancelFile(file)\">\n                    </adf-file-uploading-list-row>\n                </ng-template>\n        </adf-file-uploading-list>\n\n        <div\n            class=\"upload-dialog__confirmation\"\n            [class.upload-dialog--hide]=\"!isConfirmation\">\n                <p class=\"upload-dialog__confirmation--title\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TITLE' | translate }}\n                </p>\n\n                <p class=\"upload-dialog__confirmation--text\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TEXT' | translate }}\n                </p>\n        </div>\n    </section>\n\n    <footer\n        class=\"upload-dialog__actions\"\n        [class.upload-dialog--hide]=\"isConfirmation\">\n        <button\n            color=\"primary\"\n            mat-button\n            *ngIf=\"!uploadList.isUploadCompleted() && !uploadList.isUploadCancelled()\"\n            (click)=\"toggleConfirmation()\">\n            {{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_ALL' | translate }}\n        </button>\n\n        <button\n            *ngIf=\"uploadList.isUploadCompleted() || uploadList.isUploadCancelled()\"\n            mat-button\n            color=\"primary\"\n            (click)=\"close($event)\">\n            {{ 'ADF_FILE_UPLOAD.BUTTON.CLOSE' | translate }}\n        </button>\n    </footer>\n\n    <footer\n        class=\"upload-dialog__actions\"\n        [class.upload-dialog--hide]=\"!isConfirmation\">\n        <button\n            color=\"secondary\"\n            mat-button\n            (click)=\"cancelAllUploads()\">\n            {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CANCEL' | translate }}\n        </button>\n\n        <button\n            mat-button\n            color=\"primary\"\n            (click)=\"toggleConfirmation()\">\n            {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CONTINUE' | translate }}\n        </button>\n    </footer>\n</div>\n`,\n    styles: [``]\n})\nexport class FileUploadingDialogComponent implements OnInit, OnDestroy {\n    @ViewChild('uploadList')\n    uploadList: FileUploadingListComponent;\n\n    /** Dialog position. Can be 'left' or 'right'. */\n    @Input()\n    position: string = 'right';\n\n    /** Emitted when a file in the list has an error. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    filesUploadingList: FileModel[] = [];\n    isDialogActive: boolean = false;\n    totalCompleted: number = 0;\n    totalErrors: number = 0;\n    isDialogMinimized: boolean = false;\n    isConfirmation: boolean = false;\n\n    private listSubscription: Subscription;\n    private counterSubscription: Subscription;\n    private fileUploadSubscription: Subscription;\n    private errorSubscription: Subscription;\n\n    constructor(private uploadService: UploadService,\n                private changeDetecor: ChangeDetectorRef) {\n    }\n\n    ngOnInit() {\n        this.listSubscription = this.uploadService\n            .queueChanged.subscribe((fileList: FileModel[]) => {\n                this.filesUploadingList = fileList;\n\n                if (this.filesUploadingList.length) {\n                    this.isDialogActive = true;\n                }\n            });\n\n        this.counterSubscription = Observable\n            .merge(\n                this.uploadService.fileUploadComplete,\n                this.uploadService.fileUploadDeleted\n            )\n            .subscribe((event: (FileUploadDeleteEvent | FileUploadCompleteEvent)) => {\n                this.totalCompleted = event.totalComplete;\n                this.changeDetecor.detectChanges();\n            });\n\n        this.errorSubscription = this.uploadService.fileUploadError\n            .subscribe((event: FileUploadErrorEvent) => {\n                this.totalErrors = event.totalError;\n                this.changeDetecor.detectChanges();\n            });\n\n        this.fileUploadSubscription = this.uploadService\n            .fileUpload.subscribe(() => {\n                this.changeDetecor.detectChanges();\n            });\n\n        this.uploadService.fileDeleted.subscribe((objId) => {\n            if (this.filesUploadingList) {\n                let file = this.filesUploadingList.find((item) => {\n                    return item.data.entry.id === objId;\n                });\n                if (file) {\n                    file.status = FileUploadStatus.Cancelled;\n                    this.changeDetecor.detectChanges();\n                }\n            }\n        });\n    }\n\n    /**\n     * Toggle confirmation message.\n     */\n    toggleConfirmation() {\n        this.isConfirmation = !this.isConfirmation;\n\n        if (this.isDialogMinimized) {\n            this.isDialogMinimized = false;\n        }\n    }\n\n    /**\n     * Cancel uploads and hide confiramtion\n     */\n    cancelAllUploads() {\n        this.toggleConfirmation();\n\n        this.uploadList.cancelAllFiles();\n    }\n\n    /**\n     * Toggle dialog minimized state.\n     */\n    toggleMinimized(): void {\n        this.isDialogMinimized = !this.isDialogMinimized;\n        this.changeDetecor.detectChanges();\n    }\n\n    /**\n     * Dismiss dialog\n     */\n    close(): void {\n        this.isConfirmation = false;\n        this.totalCompleted = 0;\n        this.totalErrors = 0;\n        this.filesUploadingList = [];\n        this.isDialogActive = false;\n        this.isDialogMinimized = false;\n        this.uploadService.clearQueue();\n        this.changeDetecor.detectChanges();\n    }\n\n    ngOnDestroy() {\n        this.uploadService.clearQueue();\n        this.listSubscription.unsubscribe();\n        this.counterSubscription.unsubscribe();\n        this.fileUploadSubscription.unsubscribe();\n        this.errorSubscription.unsubscribe();\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileUploadStatus } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'adf-file-uploading-list-row',\n    template: `<div class=\"adf-file-uploading-row\">\n    <mat-icon\n        mat-list-icon\n        class=\"adf-file-uploading-row__type\">\n        insert_drive_file\n    </mat-icon>\n\n    <span\n        class=\"adf-file-uploading-row__name\"\n        title=\"{{ file.name }}\">\n        {{ file.name }}\n    </span>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Progress || file.status === FileUploadStatus.Starting\"\n        (click)=\"onCancel(file)\"\n        class=\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\"\n        title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE' | translate }}\">\n        <span class=\"adf-file-uploading-row__status\">\n            {{ file.progress.loaded | adfFileSize }} / {{ file.progress.total | adfFileSize }}\n        </span>\n\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--cancel\">\n            clear\n        </mat-icon>\n    </div>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Complete\"\n        (click)=\"onRemove(file)\"\n        class=\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\"\n        title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.REMOVE_FILE' | translate }}\">\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__status adf-file-uploading-row__status--done\">\n            check_circle\n        </mat-icon>\n\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\">\n            remove_circle\n        </mat-icon>\n    </div>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Pending\"\n        (click)=\"onCancel(file)\"\n        class=\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\">\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__status adf-file-uploading-row__status--pending\">\n            schedule\n        </mat-icon>\n\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\">\n            remove_circle\n        </mat-icon>\n    </div>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Error\"\n        class=\"adf-file-uploading-row__block adf-file-uploading-row__status--error\"\n        title=\"{{ file.response }}\">\n        <mat-icon mat-list-icon>\n            report_problem\n        </mat-icon>\n    </div>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Cancelled  ||\n            file.status === FileUploadStatus.Aborted ||\n            file.status === FileUploadStatus.Deleted\"\n        class=\"adf-file-uploading-row__block adf-file-uploading-row__status--cancelled\">\n        {{ 'ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS' | translate }}\n    </div>\n<div>`,\n    styles: [``]\n})\nexport class FileUploadingListRowComponent {\n    @Input()\n    file: FileModel;\n\n    @Output()\n    cancel: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    @Output()\n    remove: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    FileUploadStatus = FileUploadStatus;\n\n    onCancel(file: FileModel): void {\n        this.cancel.emit(file);\n    }\n\n    onRemove(file: FileModel): void {\n        this.remove.emit(file);\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel } from '@alfresco/adf-core';\nimport { Input } from '@angular/core';\n\nexport abstract class UploadBase {\n\n    /** Filter for accepted file types. */\n    @Input()\n    acceptedFilesType: string = '*';\n\n    constructor() {}\n    /**\n     * Checks if the given file is allowed by the extension filters\n     *\n     * @param file FileModel\n     */\n    protected isFileAcceptable(file: FileModel): boolean {\n        if (this.acceptedFilesType === '*') {\n            return true;\n        }\n\n        const allowedExtensions = this.acceptedFilesType\n            .split(',')\n            .map(ext => ext.replace(/^\\./, ''));\n\n        if (allowedExtensions.indexOf(file.extension) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, EXTENDIBLE_COMPONENT, FileModel, FileUtils,\n    LogService, NodePermissionSubject, TranslationService, UploadService\n} from '@alfresco/adf-core';\nimport { Component, EventEmitter, forwardRef, Input,\n    OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { PermissionModel } from '../../document-list/models/permissions.model';\nimport 'rxjs/add/observable/throw';\nimport { UploadBase } from './base-upload/upload-base';\n\n@Component({\n    selector: 'adf-upload-button',\n    template: `<form class=\"adf-upload-button-file-container\">\n    <!--Files Upload-->\n    <a *ngIf=\"!uploadFolders\"\n        [disabled]=\"isButtonDisabled()\"\n        mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n\n        <!--Multiple Files Upload-->\n        <span *ngIf=\"multipleFiles\">\n            <label\n                id=\"upload-multiple-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-multiple-files\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-multiple-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-multiple-files\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-multiple-files\"\n                data-automation-id=\"upload-multiple-files\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n\n        <!--Single Files Upload-->\n        <span *ngIf=\"!multipleFiles\">\n            <label\n                id=\"upload-single-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-single-file\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-single-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-single-file\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-single-file\"\n                data-automation-id=\"upload-single-file\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n    </a>\n\n    <!--Folders Upload-->\n    <a *ngIf=\"uploadFolders\"\n        [disabled]=\"isButtonDisabled()\" mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n        <label\n            id=\"uploadFolder-label\"\n            *ngIf=\"!staticTitle\"\n            for=\"uploadFolder\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</label>\n        <label\n            id=\"uploadFolder-label-static\"\n            *ngIf=\"staticTitle\"\n            for=\"uploadFolder\">{{ staticTitle }}</label>\n        <input #uploadFolders\n            id=\"uploadFolder\"\n            data-automation-id=\"uploadFolder\"\n            type=\"file\"\n            name=\"uploadFiles\"\n            multiple=\"multiple\"\n            accept=\"{{acceptedFilesType}}\"\n            webkitdirectory directory\n            [attr.disabled]=\"isButtonDisabled()\"\n            [title]=\"tooltip\"\n            (change)=\"onDirectoryAdded($event)\">\n    </a>\n</form>\n`,\n    styles: [`.adf-upload-button-file-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}`],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadButtonComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadButtonComponent extends UploadBase implements OnInit, OnChanges, NodePermissionSubject {\n\n    /** Toggles component disabled state (if there is no node permission checking). */\n    @Input()\n    disabled: boolean = false;\n\n    /** Allows/disallows upload folders (only for Chrome). */\n    @Input()\n    uploadFolders: boolean = false;\n\n    /** Allows/disallows multiple files */\n    @Input()\n    multipleFiles: boolean = false;\n\n    /** Toggles versioning. */\n    @Input()\n    versioning: boolean = false;\n\n    /** Sets a limit on the maximum size (in bytes) of a file to be uploaded.\n     * Has no effect if undefined.\n     */\n    @Input()\n    maxFilesSize: number;\n\n    /** Defines the text of the upload button. */\n    @Input()\n    staticTitle: string;\n\n    /** Custom tooltip text. */\n    @Input()\n    tooltip: string = null;\n\n    /** The ID of the root. Use the nodeId for\n     * Content Services or the taskId/processId for Process Services.\n     */\n    @Input()\n    rootFolderId: string = '-root-';\n\n    /** Emitted when the file is uploaded successfully. */\n    @Output()\n    success = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error = new EventEmitter();\n\n    /** Emitted when a folder is created. */\n    @Output()\n    createFolder = new EventEmitter();\n\n    /** Emitted when delete permission is missing. */\n    @Output()\n    permissionEvent: EventEmitter<PermissionModel> = new EventEmitter<PermissionModel>();\n\n    private hasPermission: boolean = false;\n\n    private permissionValue: Subject<boolean> = new Subject<boolean>();\n\n    constructor(private uploadService: UploadService,\n                private contentService: ContentService,\n                protected translateService: TranslationService,\n                protected logService: LogService\n            ) {\n                super();\n    }\n\n    ngOnInit() {\n        this.permissionValue.subscribe((permission: boolean) => {\n            this.hasPermission = permission;\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let rootFolderId = changes['rootFolderId'];\n        if (rootFolderId && rootFolderId.currentValue) {\n            this.checkPermission();\n        }\n    }\n\n    isButtonDisabled(): boolean {\n        return this.disabled ? true : undefined;\n    }\n\n    onFilesAdded($event: any): void {\n        let files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n\n        if (this.hasPermission) {\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({type: 'content', action: 'upload', permission: 'create'}));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    onDirectoryAdded($event: any): void {\n        if (this.hasPermission) {\n            let files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({type: 'content', action: 'upload', permission: 'create'}));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    /**\n     * Upload a list of file in the specified path\n     * @param files\n     * @param path\n     */\n    uploadFiles(files: File[]): void {\n        const latestFilesAdded: FileModel[] = files\n            .map<FileModel>(this.createFileModel.bind(this))\n            .filter(this.isFileAcceptable.bind(this))\n            .filter(this.isFileSizeAcceptable.bind(this));\n\n        if (latestFilesAdded.length > 0) {\n            this.uploadService.addToQueue(...latestFilesAdded);\n            this.uploadService.uploadFilesInTheQueue(this.success);\n        }\n    }\n\n    /**\n     * Creates FileModel from File\n     *\n     * @param file\n     */\n    protected createFileModel(file: File): FileModel {\n        return new FileModel(file, {\n            newVersion: this.versioning,\n            parentId: this.rootFolderId,\n            path: (file.webkitRelativePath || '').replace(/\\/[^\\/]*$/, '')\n        });\n    }\n\n    /**\n     * Checks if the given file is an acceptable size\n     *\n     * @param file FileModel\n     */\n    private isFileSizeAcceptable(file: FileModel): boolean {\n        let acceptableSize = true;\n\n        if (this.isFileSizeAllowed(file)) {\n            acceptableSize = false;\n\n            this.translateService.get('FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE', {fileName: file.name}).subscribe((message: string) => {\n                this.error.emit(message);\n            });\n        }\n\n        return acceptableSize;\n    }\n\n    private isFileSizeAllowed(file: FileModel) {\n        return this.isMaxFileSizeDefined() && this.isFileSizeCorrect(file);\n    }\n\n    private isMaxFileSizeDefined() {\n        return this.maxFilesSize !== undefined && this.maxFilesSize !== null;\n    }\n\n    private isFileSizeCorrect(file: FileModel) {\n        return this.maxFilesSize < 0 || file.size > this.maxFilesSize;\n    }\n\n    checkPermission() {\n        if (this.rootFolderId) {\n            let opts: any = {\n                includeSource: true,\n                include: ['allowableOperations']\n            };\n\n            this.contentService.getNode(this.rootFolderId, opts).subscribe(\n                res => this.permissionValue.next(this.hasCreatePermission(res.entry)),\n                error => this.error.emit(error)\n            );\n        }\n    }\n\n    private hasCreatePermission(node: any): boolean {\n        if (node && node.allowableOperations) {\n            return node.allowableOperations.find(permission => permission === 'create') ? true : false;\n        }\n        return false;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, forwardRef, Input, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { UploadButtonComponent } from './upload-button.component';\nimport { FileModel, EXTENDIBLE_COMPONENT } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-upload-version-button',\n    template: `<form class=\"adf-upload-button-file-container\">\n    <!--Files Upload-->\n    <a *ngIf=\"!uploadFolders\"\n        [disabled]=\"isButtonDisabled()\"\n        mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n\n        <!--Multiple Files Upload-->\n        <span *ngIf=\"multipleFiles\">\n            <label\n                id=\"upload-multiple-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-multiple-files\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-multiple-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-multiple-files\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-multiple-files\"\n                data-automation-id=\"upload-multiple-files\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n\n        <!--Single Files Upload-->\n        <span *ngIf=\"!multipleFiles\">\n            <label\n                id=\"upload-single-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-single-file\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-single-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-single-file\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-single-file\"\n                data-automation-id=\"upload-single-file\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n    </a>\n\n    <!--Folders Upload-->\n    <a *ngIf=\"uploadFolders\"\n        [disabled]=\"isButtonDisabled()\" mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n        <label\n            id=\"uploadFolder-label\"\n            *ngIf=\"!staticTitle\"\n            for=\"uploadFolder\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</label>\n        <label\n            id=\"uploadFolder-label-static\"\n            *ngIf=\"staticTitle\"\n            for=\"uploadFolder\">{{ staticTitle }}</label>\n        <input #uploadFolders\n            id=\"uploadFolder\"\n            data-automation-id=\"uploadFolder\"\n            type=\"file\"\n            name=\"uploadFiles\"\n            multiple=\"multiple\"\n            accept=\"{{acceptedFilesType}}\"\n            webkitdirectory directory\n            [attr.disabled]=\"isButtonDisabled()\"\n            [title]=\"tooltip\"\n            (change)=\"onDirectoryAdded($event)\">\n    </a>\n</form>\n`,\n    styles: [`.adf-upload-button-file-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}`],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadVersionButtonComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadVersionButtonComponent extends UploadButtonComponent implements OnChanges {\n\n    /** (**Required**) The node to be versioned. */\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    ngOnChanges(changes: SimpleChanges) {\n        super.ngOnChanges(changes);\n\n        if (changes['acceptedFilesType']) {\n            const message = this.translateService.instant('FILE_UPLOAD.VERSION.MESSAGES.NO_ACCEPTED_FILE_TYPES');\n            this.logService.error(message);\n        }\n        this.acceptedFilesType = '.' + this.node.name.split('.').pop();\n    }\n\n    protected createFileModel(file: File): FileModel {\n        const fileModel = super.createFileModel(file);\n        fileModel.options.newVersionBaseName = this.node.name;\n\n        if (!this.isFileAcceptable(fileModel)) {\n            const message = this.translateService.instant('FILE_UPLOAD.VERSION.MESSAGES.INCOMPATIBLE_VERSION');\n            this.error.emit(message);\n        }\n\n        return fileModel;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    EXTENDIBLE_COMPONENT,\n    FileInfo,\n    FileModel,\n    FileUtils,\n    NodePermissionSubject,\n    NotificationService,\n    TranslationService,\n    UploadService\n} from '@alfresco/adf-core';\nimport { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { UploadBase } from './base-upload/upload-base';\n\n@Component({\n    selector: 'adf-upload-drag-area',\n    template: `<div [file-draggable]=\"isDroppable()\" id=\"UploadBorder\" class=\"upload-border\"\n     (filesDropped)=\"onFilesDropped($event)\"\n     (filesEntityDropped)=\"onFilesEntityDropped($event)\"\n     (folderEntityDropped)=\"onFolderEntityDropped($event)\"\n     (upload-files)=\"onUploadFiles($event)\"\n     dropzone=\"\" webkitdropzone=\"*\" #droparea>\n    <ng-content></ng-content>\n</div>\n`,\n    styles: [`adf-upload-drag-area{overflow:hidden}.upload-border{vertical-align:middle;text-align:center;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.file-draggable__input-focus{color:#2196f3;border:1px dashed #2196f3}`],\n    host: {'class': 'adf-upload-drag-area'},\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadDragAreaComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadDragAreaComponent extends UploadBase implements NodePermissionSubject {\n\n    /** Toggle component disabled state. */\n    @Input()\n    disabled: boolean = false;\n\n    /** When false, renames the file using an integer suffix if there is a name clash.\n     * Set to true to indicate that a major version should be created instead.\n     */\n    @Input()\n    versioning: boolean = false;\n\n    /** ID of parent folder node. */\n    @Input()\n    parentId: string;\n\n    /** Emitted when the file is uploaded. */\n    @Output()\n    success = new EventEmitter();\n\n    /** Raised when the file upload goes in error. */\n    @Output()\n    error = new EventEmitter();\n\n    constructor(private uploadService: UploadService,\n                private translateService: TranslationService,\n                private notificationService: NotificationService) {\n                    super();\n    }\n\n    /**\n     * Method called when files are dropped in the drag area.\n     *\n     * @param files - files dropped in the drag area.\n     */\n    onFilesDropped(files: File[]): void {\n        if (!this.disabled && files.length) {\n            const fileModels = files.map(file => new FileModel(file, {\n                newVersion: this.versioning,\n                path: '/',\n                parentId: this.parentId\n            })).filter(this.isFileAcceptable.bind(this));\n            this.addNodeInUploadQueue(fileModels);\n        }\n    }\n\n    /**\n     * Called when the file are dropped in the drag area\n     *\n     * @param item - FileEntity\n     */\n    onFilesEntityDropped(item: any): void {\n        if (!this.disabled) {\n            item.file((file: File) => {\n                const fileModel = new FileModel(file, {\n                    newVersion: this.versioning,\n                    parentId: this.parentId,\n                    path: item.fullPath.replace(item.name, '')\n                });\n                if (this.isFileAcceptable(fileModel)) {\n                    this.addNodeInUploadQueue([fileModel]);\n                }\n            });\n        }\n    }\n\n    /**\n     * Called when a folder are dropped in the drag area\n     *\n     * @param folder - name of the dropped folder\n     */\n    onFolderEntityDropped(folder: any): void {\n        if (!this.disabled && folder.isDirectory) {\n            FileUtils.flattern(folder).then(entries => {\n                let files = entries.map(entry => {\n                    return new FileModel(entry.file, {\n                        newVersion: this.versioning,\n                        parentId: this.parentId,\n                        path: entry.relativeFolder\n                    });\n                }).filter(this.isFileAcceptable.bind(this));\n                this.addNodeInUploadQueue(files);\n            });\n        }\n    }\n\n    private addNodeInUploadQueue(files: FileModel[]) {\n        if (files.length) {\n            this.uploadService.addToQueue(...files);\n            this.uploadService.uploadFilesInTheQueue(this.success);\n            this.uploadService.fileUploadError.subscribe((error) => {\n                this.error.emit(error);\n                });\n        }\n    }\n\n    /**\n     * Show undo notification bar.\n     *\n     * @param latestFilesAdded - files in the upload queue enriched with status flag and xhr object.\n     */\n    showUndoNotificationBar(latestFilesAdded: FileModel[]) {\n        let messageTranslate: any, actionTranslate: any;\n        messageTranslate = this.translateService.get('FILE_UPLOAD.MESSAGES.PROGRESS');\n        actionTranslate = this.translateService.get('FILE_UPLOAD.ACTION.UNDO');\n\n        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(() => {\n            this.uploadService.cancelUpload(...latestFilesAdded);\n        });\n    }\n\n    /** Returns true or false considering the component options and node permissions */\n    isDroppable(): boolean {\n        return !this.disabled;\n    }\n\n    /**\n     * Handles 'upload-files' events raised by child components.\n     *\n     * @param event DOM event\n     */\n    onUploadFiles(event: CustomEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        let isAllowed: boolean = this.hasCreatePermission(event.detail.data.obj.entry);\n        if (isAllowed) {\n            let files: FileInfo[] = event.detail.files;\n            if (files && files.length > 0) {\n                let parentId = this.parentId;\n                if (event.detail.data && event.detail.data.obj.entry.isFolder) {\n                    parentId = event.detail.data.obj.entry.id || this.parentId;\n                }\n                const fileModels = files.map(fileInfo => new FileModel(fileInfo.file, {\n                    newVersion: this.versioning,\n                    path: fileInfo.relativeFolder,\n                    parentId: parentId\n                })).filter(this.isFileAcceptable.bind(this));\n                this.addNodeInUploadQueue(fileModels);\n            }\n        }\n    }\n\n    /**\n     * Check if \"create\" permission is present on the given node\n     *\n     * @param node\n     */\n    private hasCreatePermission(node: any): boolean {\n        let isPermitted = false;\n        if (node && node['allowableOperations']) {\n            let permFound = node['allowableOperations'].find(element => element === 'create');\n            isPermitted = permFound ? true : false;\n        }\n        return isPermitted;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { FileUtils } from '@alfresco/adf-core';\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\n\n@Directive({\n    selector: '[file-draggable]'\n})\nexport class FileDraggableDirective implements OnInit, OnDestroy {\n\n    files: File [];\n\n    /** Enables/disables drag-and-drop functionality. */\n    @Input('file-draggable')\n    enabled: boolean = true;\n\n    /** Emitted when one or more files are dragged and dropped onto the draggable element. */\n    @Output()\n    filesDropped: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Emitted when one or more files are dragged and dropped onto the draggable element. */\n    @Output()\n    filesEntityDropped: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when a directory is dragged and dropped onto the draggable element. */\n    @Output()\n    folderEntityDropped: EventEmitter<any> = new EventEmitter();\n\n    private cssClassName: string = 'file-draggable__input-focus';\n    private element: HTMLElement;\n\n    constructor(el: ElementRef, private ngZone: NgZone) {\n        this.element = el.nativeElement;\n    }\n\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            this.element.addEventListener('dragenter', this.onDragEnter.bind(this));\n            this.element.addEventListener('dragover', this.onDragOver.bind(this));\n            this.element.addEventListener('dragleave', this.onDragLeave.bind(this));\n            this.element.addEventListener('drop', this.onDropFiles.bind(this));\n        });\n    }\n\n    ngOnDestroy() {\n        this.element.removeEventListener('dragenter', this.onDragEnter);\n        this.element.removeEventListener('dragover', this.onDragOver);\n        this.element.removeEventListener('dragleave', this.onDragLeave);\n        this.element.removeEventListener('drop', this.onDropFiles);\n    }\n\n    /**\n     * Method called when files is dropped in the drag and drop area.\n     * @param event DOM event.\n     */\n    onDropFiles(event: any): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n\n            let items = event.dataTransfer.items;\n            if (items) {\n                for (let i = 0; i < items.length; i++) {\n                    if (typeof items[i].webkitGetAsEntry !== 'undefined') {\n                        let item = items[i].webkitGetAsEntry();\n                        if (item) {\n                            if (item.isFile) {\n                                this.filesEntityDropped.emit(item);\n                            } else if (item.isDirectory) {\n                                this.folderEntityDropped.emit(item);\n                            }\n                        }\n                    } else {\n                        let files = FileUtils.toFileArray(event.dataTransfer.files);\n                        this.filesDropped.emit(files);\n                    }\n                }\n            } else {\n                // safari or FF\n                let files = FileUtils.toFileArray(event.dataTransfer.files);\n                this.filesDropped.emit(files);\n            }\n\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag in.\n     *\n     * @param event - DOM event.\n     */\n    onDragEnter(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag out.\n     *\n     * @param event - DOM event.\n     */\n    onDragLeave(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file is over the drag area.\n     *\n     * @param event\n     */\n    onDragOver(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Prevent default and stop propagation of the DOM event.\n     *\n     * @param $event - DOM event.\n     */\n    preventDefault(event: Event): void {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { MaterialModule } from '../material.module';\nimport { FileUploadingDialogComponent } from './components/file-uploading-dialog.component';\nimport { FileUploadingListRowComponent } from './components/file-uploading-list-row.component';\nimport { FileUploadingListComponent } from './components/file-uploading-list.component';\nimport { UploadButtonComponent } from './components/upload-button.component';\nimport { UploadVersionButtonComponent } from './components/upload-version-button.component';\nimport { UploadDragAreaComponent } from './components/upload-drag-area.component';\n\nimport { PipeModule } from '@alfresco/adf-core';\nimport { FileDraggableDirective } from './directives/file-draggable.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        PipeModule\n    ],\n    declarations: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        UploadVersionButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent\n    ],\n    exports: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        UploadVersionButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent\n    ]\n})\nexport class UploadModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DataTableModule, PaginationModule, ToolbarModule } from '@alfresco/adf-core';\n\nimport { MaterialModule } from '../material.module';\nimport { UploadModule } from '../upload/upload.module';\n\nimport { ContentActionListComponent } from './components/content-action/content-action-list.component';\nimport { ContentActionComponent } from './components/content-action/content-action.component';\nimport { ContentColumnListComponent } from './components/content-column/content-column-list.component';\nimport { ContentColumnComponent } from './components/content-column/content-column.component';\nimport { DocumentListComponent } from './components/document-list.component';\n\nimport { EmptyFolderContentDirective } from './components/empty-folder/empty-folder-content.directive';\nimport { NoPermissionContentDirective } from './components/no-permission/no-permission-content.directive';\n\nimport { DocumentActionsService } from './services/document-actions.service';\nimport { DocumentListService } from './services/document-list.service';\nimport { FolderActionsService } from './services/folder-actions.service';\nimport { NodeActionsService } from './services/node-actions.service';\nimport { CustomResourcesService } from './services/custom-resources.service';\n\n@NgModule({\n    imports: [\n        ToolbarModule,\n        CommonModule,\n        DataTableModule,\n        FlexLayoutModule,\n        MaterialModule,\n        UploadModule,\n        TranslateModule,\n        PaginationModule\n    ],\n    declarations: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent,\n        EmptyFolderContentDirective,\n        NoPermissionContentDirective\n    ],\n    providers: [\n        DocumentListService,\n        FolderActionsService,\n        DocumentActionsService,\n        NodeActionsService,\n        CustomResourcesService\n    ],\n    exports: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent,\n        EmptyFolderContentDirective,\n        NoPermissionContentDirective\n    ]\n})\nexport class DocumentListModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport { QueryBody } from 'alfresco-js-api';\nimport { SearchCategory } from './search-category.interface';\nimport { FilterQuery } from './filter-query.interface';\nimport { SearchRange } from './search-range.interface';\nimport { SearchConfiguration } from './search-configuration.interface';\nimport { FacetQuery } from './facet-query.interface';\n\n@Injectable()\nexport class SearchQueryBuilderService {\n\n    updated: Subject<QueryBody> = new Subject();\n    executed: Subject<any> = new Subject();\n\n    categories: Array<SearchCategory> = [];\n    queryFragments: { [id: string]: string } = {};\n    fields: { [id: string]: string[] } = {};\n    scope: { locations?: string };\n    filterQueries: FilterQuery[] = [];\n    ranges: { [id: string]: SearchRange } = {};\n    paging: { maxItems?: number; skipCount?: number } = null;\n\n    config: SearchConfiguration;\n\n    constructor(appConfig: AppConfigService,  private api: AlfrescoApiService) {\n        this.config = appConfig.get<SearchConfiguration>('search');\n        if (!this.config) {\n            throw new Error('Search configuration not found.');\n        }\n\n        if (this.config.query && this.config.query.categories) {\n            this.categories = this.config.query.categories.filter(f => f.enabled);\n        }\n\n        this.filterQueries = this.config.filterQueries || [];\n        this.scope = {\n            locations: null\n        };\n    }\n\n    addFilterQuery(query: string): void {\n        if (query) {\n            const existing = this.filterQueries.find(q => q.query === query);\n            if (!existing) {\n                this.filterQueries.push({ query: query });\n            }\n        }\n    }\n\n    removeFilterQuery(query: string): void {\n        if (query) {\n            this.filterQueries = this.filterQueries.filter(f => f.query !== query);\n        }\n    }\n\n    getFacetQuery(label: string): FacetQuery {\n        if (label) {\n            const queries = this.config.facetQueries || [];\n            return queries.find(q => q.label === label);\n        }\n        return null;\n    }\n\n    update(): void {\n        const query = this.buildQuery();\n        this.updated.next(query);\n    }\n\n    async execute() {\n        const query = this.buildQuery();\n        const data = await this.api.searchApi.search(query);\n        this.executed.next(data);\n    }\n\n    buildQuery(): QueryBody {\n        let query = '';\n        const fields: string[] = [];\n\n        this.categories.forEach(facet => {\n            const customQuery = this.queryFragments[facet.id];\n            if (customQuery) {\n                if (query.length > 0) {\n                    query += ' AND ';\n                }\n                query += `(${customQuery})`;\n            }\n\n            const customFields = this.fields[facet.id];\n            if (customFields && customFields.length > 0) {\n                for (const field of customFields) {\n                    if (!fields.includes(field)) {\n                        fields.push(field);\n                    }\n                }\n            }\n        });\n\n        if (query) {\n\n            const result: QueryBody = {\n                query: {\n                    query: query,\n                    language: 'afts'\n                },\n                include: ['path', 'allowableOperations'],\n                fields: fields,\n                paging: this.paging,\n                filterQueries: this.filterQueries,\n                facetQueries: this.config.facetQueries,\n                facetFields: this.config.facetFields,\n                limits: this.config.limits,\n                scope: this.scope\n            };\n\n            return result;\n        }\n\n        return null;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchService } from '@alfresco/adf-core';\nimport {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NodePaging, QueryBody } from 'alfresco-js-api';\nimport { Subject } from 'rxjs/Subject';\n\n@Component({\n    selector: 'adf-search',\n    template: `<div role=\"listbox\" id=\"adf-search-results-content\" [ngClass]=\"_classList\" #panel>\n    <ng-template\n        [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{ $implicit: results }\">\n    </ng-template>\n</div>\n\n\n`,\n    styles: [``],\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    exportAs: 'searchAutocomplete',\n    host: {\n        'class': 'adf-search'\n    }\n})\nexport class SearchComponent implements AfterContentInit, OnChanges {\n\n    @ViewChild('panel')\n    panel: ElementRef;\n\n    @ContentChild(TemplateRef)\n    template: TemplateRef<any>;\n\n    /** Function that maps an option's value to its display value in the trigger. */\n    @Input()\n    displayWith: ((value: any) => string) | null = null;\n\n    /** Maximum number of results to show in the search. */\n    @Input()\n    maxResults: number = 20;\n\n    /** Number of results to skip from the results pagination. */\n    @Input()\n    skipResults: number = 0;\n\n    /** @deprecated in 2.1.0 */\n    @Input()\n    queryBody: QueryBody;\n\n    /** Search term to use when executing the search. Updating this value will\n     * run a new search and update the results.\n     */\n    @Input()\n    searchTerm: string = '';\n\n    /** CSS class for display. */\n    @Input('class')\n    set classList(classList: string) {\n        if (classList && classList.length) {\n            classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Emitted when search results have fully loaded. */\n    @Output()\n    resultLoaded: EventEmitter<NodePaging> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    showPanel: boolean = false;\n    results: NodePaging;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    _isOpen: boolean = false;\n\n    keyPressedStream: Subject<string> = new Subject();\n\n    _classList: { [key: string]: boolean } = {};\n\n    constructor(private searchService: SearchService,\n                private _elementRef: ElementRef) {\n        this.keyPressedStream.asObservable()\n            .debounceTime(200)\n            .subscribe((searchedWord: string) => {\n                this.loadSearchResults(searchedWord);\n            });\n\n        searchService.dataLoaded.subscribe(\n            data => this.onSearchDataLoaded(data),\n            error => this.onSearchDataError(error)\n        );\n    }\n\n    ngAfterContentInit() {\n        this.setVisibility();\n    }\n\n    ngOnChanges(changes) {\n        if (changes.queryBody &&\n            this.hasDifferentQueryBody(changes.queryBody.previousValue, changes.queryBody.currentValue)) {\n            this.loadSearchResults();\n        }\n        if (changes.searchTerm && changes.searchTerm.currentValue) {\n            this.loadSearchResults(changes.searchTerm.currentValue);\n        }\n    }\n\n    resetResults() {\n        this.cleanResults();\n        this.setVisibility();\n    }\n\n    reload() {\n        this.loadSearchResults(this.searchTerm);\n    }\n\n    private hasDifferentQueryBody(previousQueryBody: QueryBody, currentQueryBody: QueryBody) {\n        return JSON.stringify(previousQueryBody) !== JSON.stringify(currentQueryBody);\n    }\n\n    private cleanResults() {\n        if (this.results) {\n            this.results = {};\n        }\n    }\n\n    private loadSearchResults(searchTerm?: string) {\n        this.resetResults();\n        if (searchTerm) {\n            if (this.queryBody) {\n                this.searchService.searchByQueryBody(this.queryBody).subscribe(\n                    result => this.onSearchDataLoaded(result),\n                    err => this.onSearchDataError(err)\n                );\n            } else {\n                this.searchService.search(searchTerm, this.maxResults, this.skipResults).subscribe(\n                    result => this.onSearchDataLoaded(result),\n                    err => this.onSearchDataError(err)\n                );\n            }\n        } else {\n            this.cleanResults();\n        }\n    }\n\n    onSearchDataLoaded(data: NodePaging) {\n        if (data) {\n            this.results = data;\n            this.resultLoaded.emit(this.results);\n            this.isOpen = true;\n            this.setVisibility();\n        }\n    }\n\n    onSearchDataError(error) {\n        if (error && error.status !== 400) {\n            this.results = null;\n            this.error.emit(error);\n        }\n    }\n\n    hidePanel() {\n        if (this.isOpen) {\n            this._classList['adf-search-show'] = false;\n            this._classList['adf-search-hide'] = true;\n            this.isOpen = false;\n        }\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.results && !!this.results.list;\n        this._classList['adf-search-show'] = this.showPanel;\n        this._classList['adf-search-hide'] = !this.showPanel;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'adf-empty-search-result',\n    template: `<div class=\"adf-empty-search-result\">\n    <ng-content></ng-content>\n</div>\n`,\n    encapsulation: ViewEncapsulation.None\n})\nexport class EmptySearchResultComponent {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthenticationService, ThumbnailService } from '@alfresco/adf-core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output,\n         QueryList, ViewEncapsulation, ViewChild, ViewChildren, ElementRef, TemplateRef, ContentChild } from '@angular/core';\nimport { MinimalNodeEntity, QueryBody } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchComponent } from './search.component';\nimport { MatListItem } from '@angular/material';\nimport { EmptySearchResultComponent } from './empty-search-result.component';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-search-control',\n    template: `<div class=\"adf-search-container\">\n    <div *ngIf=\"isLoggedIn()\" [@transitionMessages]=\"subscriptAnimationState\" (@transitionMessages.done)=\"applySearchFocus($event)\">\n        <a mat-icon-button\n            *ngIf=\"expandable\"\n            id=\"adf-search-button\"\n            class=\"adf-search-button\"\n            (click)=\"toggleSearchBar($event)\"\n            (keyup.enter)=\"toggleSearchBar($event)\">\n            <mat-icon aria-label=\"search button\">search</mat-icon>\n        </a>\n        <mat-form-field class=\"adf-input-form-field-divider\">\n            <input matInput #searchInput\n                [type]=\"inputType\"\n                [autocomplete]=\"getAutoComplete()\"\n                id=\"adf-control-input\"\n                [(ngModel)]=\"searchTerm\"\n                (focus)=\"activateToolbar($event)\"\n                (blur)=\"onBlur($event)\"\n                (keyup.escape)=\"toggleSearchBar()\"\n                (keyup.arrowdown)=\"selectFirstResult()\"\n                (ngModelChange)=\"inputChange($event)\"\n                [searchAutocomplete]=\"auto\"\n                (keyup.enter)=\"searchSubmit($event)\">\n        </mat-form-field>\n    </div>\n</div>\n\n<adf-search #search\n            #auto=\"searchAutocomplete\"\n            class=\"adf-search-result-autocomplete\"\n            [maxResults]=\"liveSearchMaxResults\"\n            [queryBody]=\"customQueryBody\">\n    <ng-template let-data>\n        <mat-list *ngIf=\"isSearchBarActive()\" id=\"autocomplete-search-result-list\">\n            <mat-list-item\n                *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                id=\"result_option_{{idx}}\"\n                [attr.data-automation-id]=\"'autocomplete_for_' + item.entry.name\"\n                [tabindex]=\"0\"\n                (focus)=\"onFocus($event)\"\n                (blur)=\"onBlur($event)\"\n                (keyup.arrowdown)=\"onRowArrowDown($event)\"\n                (keyup.arrowup)=\"onRowArrowUp($event)\"\n                class=\"adf-search-autocomplete-item\"\n                (click)=\"elementClicked(item)\"\n                (keyup.enter)=\"elementClicked(item)\">\n                <mat-icon mat-list-icon>\n                    <img [src]=\"getMimeTypeIcon(item)\" />\n                </mat-icon>\n                <h4 mat-line id=\"result_name_{{idx}}\"\n                    *ngIf=\"highlight; else elseBlock\"\n                    class=\"adf-search-fixed-text\"\n                    [innerHtml]=\"item.entry.name | highlight: searchTerm\">\n                    {{ item?.entry.name }}\n                </h4>\n                <ng-template #elseBlock>\n                    <h4 class=\"adf-search-fixed-text\" mat-line id=\"result_name_{{idx}}\" [innerHtml]=\"item.entry.name\"></h4>\n                </ng-template>\n                <p mat-line class=\"adf-search-fixed-text\"> {{item?.entry.createdByUser.displayName}} </p>\n            </mat-list-item>\n            <mat-list-item id=\"search_no_result\"\n                data-automation-id=\"search_no_result_found\"\n                *ngIf=\"data?.list?.entries.length === 0\">\n                <ng-content\n                    selector=\"adf-empty-search-result\"\n                    *ngIf=\"isNoSearchTemplatePresent() else defaultNoResult\">\n                </ng-content>\n                <ng-template #defaultNoResult>\n                    <p mat-line class=\"adf-search-fixed-text\">{{ 'SEARCH.RESULTS.NONE' | translate:{searchTerm: searchTerm} }}</p>\n                </ng-template>\n            </mat-list-item>\n        </mat-list>\n    </ng-template>\n</adf-search>\n`,\n    styles: [``],\n    animations: [\n        trigger('transitionMessages', [\n            state('active', style({ transform: 'translateX(0%)', 'margin-left': '13px' })),\n            state('inactive', style({ transform: 'translateX(81%)'})),\n            state('no-animation', style({ transform: 'translateX(0%)', width: '100%' })),\n            transition('inactive => active',\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')),\n            transition('active => inactive',\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-control' }\n})\nexport class SearchControlComponent implements OnInit, OnDestroy {\n\n    /** Toggles whether to use an expanding search control. If false\n     * then a regular input is used.\n     */\n    @Input()\n    expandable: boolean = true;\n\n    /** Toggles highlighting of the search term in the results. */\n    @Input()\n    highlight: boolean = false;\n\n    /** Type of the input field to render, e.g. \"search\" or \"text\" (default). */\n    @Input()\n    inputType: string = 'text';\n\n    /** Toggles auto-completion of the search input field. */\n    @Input()\n    autocomplete: boolean = false;\n\n    /** Toggles \"find-as-you-type\" suggestions for possible matches. */\n    @Input()\n    liveSearchEnabled: boolean = true;\n\n    /** Maximum number of results to show in the live search. */\n    @Input()\n    liveSearchMaxResults: number = 5;\n\n    /** @deprecated in 2.1.0 */\n    @Input()\n    customQueryBody: QueryBody;\n\n    /** Emitted when the search is submitted pressing ENTER button.\n     * The search term is provided as value of the event.\n     */\n    @Output()\n    submit: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when the search term is changed. The search term is provided\n     * in the 'value' property of the returned object.  If the term is less\n     * than three characters in length then the term is truncated to an empty\n     * string.\n     */\n    @Output()\n    searchChange: EventEmitter<string> = new EventEmitter();\n\n    /** Emitted when a file item from the list of \"find-as-you-type\" results is selected. */\n    @Output()\n    optionClicked: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('search')\n    searchAutocomplete: SearchComponent;\n\n    @ViewChild('searchInput')\n    searchInput: ElementRef;\n\n    @ViewChildren(MatListItem)\n    private listResultElement: QueryList<MatListItem>;\n\n    @ContentChild(EmptySearchResultComponent)\n    emptySearchTemplate: EmptySearchResultComponent;\n\n    searchTerm: string = '';\n    subscriptAnimationState: string;\n    noSearchResultTemplate: TemplateRef <any> = null;\n\n    private toggleSearch = new Subject<any>();\n    private focusSubject = new Subject<FocusEvent>();\n\n    constructor(public authService: AuthenticationService,\n                private thumbnailService: ThumbnailService) {\n\n        this.toggleSearch.asObservable().pipe(debounceTime(200)).subscribe(() => {\n            if (this.expandable) {\n                this.subscriptAnimationState = this.subscriptAnimationState === 'inactive' ? 'active' : 'inactive';\n\n                if (this.subscriptAnimationState === 'inactive') {\n                    this.searchTerm = '';\n                    this.searchAutocomplete.resetResults();\n                    if ( document.activeElement.id === this.searchInput.nativeElement.id) {\n                        this.searchInput.nativeElement.blur();\n                    }\n                }\n            }\n        });\n    }\n\n    applySearchFocus(animationDoneEvent) {\n        if (animationDoneEvent.toState === 'active') {\n            this.searchInput.nativeElement.focus();\n        }\n    }\n\n    ngOnInit() {\n        this.subscriptAnimationState = this.expandable ? 'inactive' : 'no-animation';\n        this.setupFocusEventHandlers();\n    }\n\n    isNoSearchTemplatePresent(): boolean {\n        return this.emptySearchTemplate ? true : false;\n    }\n\n    ngOnDestroy(): void {\n        if (this.focusSubject) {\n            this.focusSubject.unsubscribe();\n            this.focusSubject = null;\n        }\n\n        if (this.toggleSearch) {\n            this.toggleSearch.unsubscribe();\n            this.toggleSearch = null;\n        }\n    }\n\n    isLoggedIn(): boolean {\n        return this.authService.isEcmLoggedIn();\n    }\n\n    searchSubmit(event: any) {\n        this.submit.emit(event);\n        this.toggleSearchBar();\n    }\n\n    inputChange(event: any) {\n        this.searchChange.emit(event);\n    }\n\n    getAutoComplete(): string {\n        return this.autocomplete ? 'on' : 'off';\n    }\n\n    getMimeTypeIcon(node: MinimalNodeEntity): string {\n        let mimeType;\n\n        if (node.entry.content && node.entry.content.mimeType) {\n            mimeType = node.entry.content.mimeType;\n        }\n        if (node.entry.isFolder) {\n            mimeType = 'folder';\n        }\n\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    isSearchBarActive() {\n        return this.subscriptAnimationState === 'active' && this.liveSearchEnabled;\n    }\n\n    toggleSearchBar() {\n        if (this.toggleSearch) {\n            this.toggleSearch.next();\n        }\n    }\n\n    elementClicked(item: any) {\n        if (item.entry) {\n            this.optionClicked.next(item);\n            this.toggleSearchBar();\n        }\n    }\n\n    onFocus($event): void {\n        this.focusSubject.next($event);\n    }\n\n    onBlur($event): void {\n        this.focusSubject.next($event);\n    }\n\n    activateToolbar() {\n        if (!this.isSearchBarActive()) {\n            this.toggleSearchBar();\n        }\n    }\n\n    selectFirstResult() {\n        if ( this.listResultElement && this.listResultElement.length > 0) {\n            let firstElement: MatListItem = <MatListItem> this.listResultElement.first;\n            firstElement._getHostElement().focus();\n        }\n    }\n\n    onRowArrowDown($event: KeyboardEvent): void {\n        let nextElement: any = this.getNextElementSibling(<Element> $event.target);\n        if (nextElement) {\n            nextElement.focus();\n        }\n    }\n\n    onRowArrowUp($event: KeyboardEvent): void {\n        let previousElement: any = this.getPreviousElementSibling(<Element> $event.target);\n        if (previousElement) {\n            previousElement.focus();\n        } else {\n            this.searchInput.nativeElement.focus();\n            this.focusSubject.next(new FocusEvent('focus'));\n        }\n    }\n\n    private setupFocusEventHandlers() {\n        let focusEvents: Observable<FocusEvent> = this.focusSubject.asObservable()\n            .debounceTime(50);\n        focusEvents.filter(($event: any) => {\n            return this.isSearchBarActive() && ($event.type === 'blur' || $event.type === 'focusout');\n        }).subscribe(() => {\n            this.toggleSearchBar();\n        });\n    }\n\n    private getNextElementSibling(node: Element): Element {\n        return node.nextElementSibling;\n    }\n\n    private getPreviousElementSibling(node: Element): Element {\n        return node.previousElementSibling;\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable: no-input-rename no-use-before-declare no-input-rename  */\n\nimport { ENTER, ESCAPE } from '@angular/cdk/keycodes';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { Observable } from 'rxjs/Observable';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SearchComponent } from './search.component';\n\nexport const SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SearchTriggerDirective),\n    multi: true\n};\n\n@Directive({\n    selector: `input[searchAutocomplete], textarea[searchAutocomplete]`,\n    host: {\n        'role': 'combobox',\n        'autocomplete': 'off',\n        'aria-autocomplete': 'list',\n        '[attr.aria-expanded]': 'panelOpen.toString()',\n        '[attr.aria-owns]': 'autocomplete?.id',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    providers: [SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class SearchTriggerDirective implements ControlValueAccessor, OnDestroy {\n\n    @Input('searchAutocomplete')\n    searchPanel: SearchComponent;\n\n    private _panelOpen: boolean = false;\n    private closingActionsSubscription: Subscription;\n    private escapeEventStream = new Subject<void>();\n\n    onChange: (value: any) => void = () => { };\n\n    onTouched = () => { };\n\n    constructor(private element: ElementRef,\n                private ngZone: NgZone,\n                private changeDetectorRef: ChangeDetectorRef,\n                @Optional() @Inject(DOCUMENT) private document: any) { }\n\n    ngOnDestroy() {\n        if (this.escapeEventStream) {\n            this.escapeEventStream.unsubscribe();\n            this.escapeEventStream = null;\n        }\n        if ( this.closingActionsSubscription ) {\n            this.closingActionsSubscription.unsubscribe();\n        }\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen && this.searchPanel.showPanel;\n    }\n\n    openPanel(): void {\n        this.searchPanel.isOpen = this._panelOpen = true;\n        this.closingActionsSubscription = this.subscribeToClosingActions();\n    }\n\n    closePanel(): void {\n        if (this._panelOpen) {\n            this.closingActionsSubscription.unsubscribe();\n            this._panelOpen = false;\n            this.searchPanel.resetResults();\n            this.searchPanel.hidePanel();\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    get panelClosingActions(): Observable<any> {\n        return merge(\n            this.escapeEventStream,\n            this.outsideClickStream\n        );\n    }\n\n    private get outsideClickStream(): Observable<any> {\n        if (!this.document) {\n            return Observable.of(null);\n        }\n\n        return merge(\n            fromEvent(this.document, 'click'),\n            fromEvent(this.document, 'touchend')\n        ).filter((event: MouseEvent | TouchEvent) => {\n            const clickTarget = event.target as HTMLElement;\n            return this._panelOpen &&\n                clickTarget !== this.element.nativeElement;\n        });\n    }\n\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === ESCAPE && this.panelOpen) {\n            this.escapeEventStream.next();\n            event.stopPropagation();\n        } else if (keyCode === ENTER) {\n            this.escapeEventStream.next();\n            event.preventDefault();\n        }\n\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        if (document.activeElement === event.target) {\n            let inputValue: string = (event.target as HTMLInputElement).value;\n            this.onChange(inputValue);\n            if (inputValue) {\n                this.searchPanel.keyPressedStream.next(inputValue);\n                this.openPanel();\n            } else {\n                this.searchPanel.resetResults();\n                this.closePanel();\n            }\n        }\n    }\n\n    private isPanelOptionClicked(event: MouseEvent) {\n        let isPanelOption: boolean = false;\n        if ( event ) {\n            let clickTarget = event.target as HTMLElement;\n            isPanelOption = !this.isNoResultOption(event) &&\n                            !!this.searchPanel.panel &&\n                            !!this.searchPanel.panel.nativeElement.contains(clickTarget);\n        }\n        return isPanelOption;\n    }\n\n    private isNoResultOption(event: MouseEvent) {\n        return this.searchPanel.results.list ? this.searchPanel.results.list.entries.length === 0 : true;\n    }\n\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.ngZone.onStable.asObservable();\n        const optionChanges = this.searchPanel.keyPressedStream.asObservable();\n\n        return merge(firstStable, optionChanges)\n            .switchMap(() => {\n                this.searchPanel.setVisibility();\n                return this.panelClosingActions;\n            })\n            .subscribe(event => this.setValueAndClose(event));\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.searchPanel && this.searchPanel.displayWith ?\n            this.searchPanel.displayWith(value) : value;\n        const inputValue = toDisplay != null ? toDisplay : '';\n        this.element.nativeElement.value = inputValue;\n    }\n\n    private setValueAndClose(event: any | null): void {\n        if (this.isPanelOptionClicked(event)) {\n            this.setTriggerValue(event.target.textContent.trim());\n            this.onChange(event.target.textContent.trim());\n            this.element.nativeElement.focus();\n        }\n        this.closePanel();\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material';\nimport { SearchService } from '@alfresco/adf-core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { FacetQuery } from '../../facet-query.interface';\nimport { ResponseFacetField } from '../../response-facet-field.interface';\nimport { FacetFieldBucket } from '../../facet-field-bucket.interface';\nimport { SearchCategory } from '../../search-category.interface';\nimport { ResponseFacetQuery } from '../../response-facet-query.interface';\n\n@Component({\n    selector: 'adf-search-filter',\n    template: `<mat-accordion multi=\"true\" displayMode=\"flat\">\n\n    <mat-expansion-panel\n        *ngFor=\"let category of queryBuilder.categories\"\n        [expanded]=\"category.expanded\"\n        (opened)=\"onCategoryExpanded(category)\"\n        (closed)=\"onCategoryCollapsed(category)\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ category.name | translate }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <adf-search-widget-container\n            [id]=\"category.id\"\n            [selector]=\"category.component.selector\"\n            [settings]=\"category.component.settings\">\n        </adf-search-widget-container>\n    </mat-expansion-panel>\n\n    <mat-expansion-panel>\n        <mat-expansion-panel-header>\n            <mat-panel-title>Facet Queries</mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class=\"checklist\">\n            <ng-container *ngFor=\"let query of responseFacetQueries\">\n                <mat-checkbox\n                    *ngIf=\"query.count > 0\"\n                    [checked]=\"query.$checked\"\n                    (change)=\"onFacetQueryToggle($event, query)\">\n                    {{ query.label }} ({{ query.count }})\n                </mat-checkbox>\n            </ng-container>\n        </div>\n    </mat-expansion-panel>\n\n    <mat-expansion-panel\n        *ngFor=\"let field of responseFacetFields\"\n        [expanded]=\"field.$expanded\"\n        (opened)=\"onFacetFieldExpanded(field)\"\n        (closed)=\"onFacetFieldCollapsed(field)\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>{{ field.label }}</mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class=\"checklist\">\n            <mat-checkbox\n                *ngFor=\"let bucket of field.buckets\"\n                [checked]=\"bucket.$checked\"\n                (change)=\"onFacetToggle($event, field, bucket)\">\n                {{ bucket.display || bucket.label }} ({{ bucket.count }})\n            </mat-checkbox>\n        </div>\n    </mat-expansion-panel>\n\n</mat-accordion>\n`,\n    styles: [`.checklist{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.checklist .mat-checkbox{margin:5px}`],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-filter' }\n})\nexport class SearchFilterComponent implements OnInit {\n\n    selectedFacetQueries: string[] = [];\n    selectedBuckets: FacetFieldBucket[] = [];\n    responseFacetQueries: FacetQuery[] = [];\n    responseFacetFields: ResponseFacetField[] = [];\n\n    constructor(public queryBuilder: SearchQueryBuilderService, private search: SearchService) {\n        this.queryBuilder.updated.subscribe(query => {\n            this.queryBuilder.execute();\n        });\n    }\n\n    ngOnInit() {\n        if (this.queryBuilder) {\n            this.queryBuilder.executed.subscribe(data => {\n                this.onDataLoaded(data);\n                this.search.dataLoaded.next(data);\n            });\n        }\n    }\n\n    onCategoryExpanded(category: SearchCategory) {\n        category.expanded = true;\n    }\n\n    onCategoryCollapsed(category: SearchCategory) {\n        category.expanded = false;\n    }\n\n    onFacetFieldExpanded(field: ResponseFacetField) {\n        field.$expanded = true;\n    }\n\n    onFacetFieldCollapsed(field: ResponseFacetField) {\n        field.$expanded = false;\n    }\n\n    onFacetQueryToggle(event: MatCheckboxChange, query: ResponseFacetQuery) {\n        const facetQuery = this.queryBuilder.getFacetQuery(query.label);\n\n        if (event.checked) {\n            query.$checked = true;\n            this.selectedFacetQueries.push(facetQuery.label);\n\n            if (facetQuery) {\n                this.queryBuilder.addFilterQuery(facetQuery.query);\n            }\n        } else {\n            query.$checked = false;\n            this.selectedFacetQueries = this.selectedFacetQueries.filter(q => q !== query.label);\n\n            if (facetQuery) {\n                this.queryBuilder.removeFilterQuery(facetQuery.query);\n            }\n        }\n\n        this.queryBuilder.update();\n    }\n\n    onFacetToggle(event: MatCheckboxChange, field: ResponseFacetField, bucket: FacetFieldBucket) {\n        if (event.checked) {\n            bucket.$checked = true;\n            this.selectedBuckets.push({ ...bucket });\n            this.queryBuilder.addFilterQuery(bucket.filterQuery);\n        } else {\n            bucket.$checked = false;\n            const idx = this.selectedBuckets.findIndex(\n                b => b.$field === bucket.$field && b.label === bucket.label\n            );\n\n            if (idx >= 0) {\n                this.selectedBuckets.splice(idx, 1);\n            }\n            this.queryBuilder.removeFilterQuery(bucket.filterQuery);\n        }\n\n        this.queryBuilder.update();\n    }\n\n    unselectFacetQuery(label: string) {\n        const facetQuery = this.queryBuilder.getFacetQuery(label);\n        this.selectedFacetQueries = this.selectedFacetQueries.filter(q => q !== label);\n\n        this.queryBuilder.removeFilterQuery(facetQuery.query);\n        this.queryBuilder.update();\n    }\n\n    unselectFacetBucket(bucket: FacetFieldBucket) {\n        if (bucket) {\n            const idx = this.selectedBuckets.findIndex(\n                b => b.$field === bucket.$field && b.label === bucket.label\n            );\n\n            if (idx >= 0) {\n                this.selectedBuckets.splice(idx, 1);\n            }\n            this.queryBuilder.removeFilterQuery(bucket.filterQuery);\n            this.queryBuilder.update();\n        }\n    }\n\n    onDataLoaded(data: any) {\n        const context = data.list.context;\n\n        if (context) {\n            this.responseFacetQueries = (context.facetQueries || []).map(q => {\n                q.$checked = this.selectedFacetQueries.includes(q.label);\n                return q;\n            });\n\n            const expandedFields = this.responseFacetFields.filter(f => f.$expanded).map(f => f.label);\n\n            this.responseFacetFields = (context.facetsFields || []).map(\n                (field: ResponseFacetField) => {\n                    field.$expanded = expandedFields.includes(field.label);\n\n                    (field.buckets || []).forEach(bucket => {\n                        bucket.$field = field.label;\n                        bucket.$checked = false;\n\n                        const previousBucket = this.selectedBuckets.find(\n                            b => b.$field === bucket.$field && b.label === bucket.label\n                        );\n                        if (previousBucket) {\n                           bucket.$checked = true;\n                        }\n                    });\n                    return field;\n                }\n            );\n        } else {\n            this.responseFacetQueries = [];\n            this.responseFacetFields = [];\n        }\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input } from '@angular/core';\nimport { SearchFilterComponent } from '../../components/search-filter/search-filter.component';\n\n@Component({\n    selector: 'adf-search-chip-list',\n    template: `<mat-chip-list>\n    <ng-container *ngIf=\"searchFilter && searchFilter.selectedFacetQueries\">\n        <mat-chip\n            *ngFor=\"let label of searchFilter.selectedFacetQueries\"\n            [removable]=\"true\"\n            (remove)=\"searchFilter.unselectFacetQuery(label)\">\n            {{ label }}\n            <mat-icon matChipRemove>cancel</mat-icon>\n        </mat-chip>\n    </ng-container>\n    <ng-container *ngIf=\"searchFilter && searchFilter.selectedBuckets\">\n        <mat-chip\n            *ngFor=\"let bucket of searchFilter.selectedBuckets\"\n            [removable]=\"true\"\n            (remove)=\"searchFilter.unselectFacetBucket(bucket)\">\n            {{ bucket.display || bucket.label }}\n            <mat-icon matChipRemove>cancel</mat-icon>\n        </mat-chip>\n    </ng-container>\n</mat-chip-list>\n`,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-chip-list' }\n})\nexport class SearchChipListComponent {\n\n    @Input()\n    searchFilter: SearchFilterComponent;\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\n\n@Component({\n    selector: 'adf-search-text',\n    template: `<mat-form-field>\n    <input\n        matInput\n        [placeholder]=\"settings?.placeholder\"\n        [value]=\"value\"\n        (change)=\"onChangedHandler($event)\">\n</mat-form-field>\n`,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-text' }\n})\nexport class SearchTextComponent implements SearchWidget, OnInit {\n\n    @Input()\n    value = '';\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n\n    ngOnInit() {\n        if (this.context && this.settings) {\n            const pattern = new RegExp(this.settings.pattern, 'g');\n            const match = pattern.exec(this.context.queryFragments[this.id] || '');\n\n            if (match && match.length > 1) {\n                this.value = match[1];\n            }\n        }\n    }\n\n    onChangedHandler(event) {\n        this.value = event.target.value;\n        if (this.value) {\n            this.context.queryFragments[this.id] = `${this.settings.field}:'${this.value}'`;\n            this.context.update();\n        }\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { MatRadioChange } from '@angular/material';\n\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\n\n@Component({\n    selector: 'adf-search-radio',\n    template: `<mat-radio-group [(ngModel)]=\"value\" (change)=\"changeHandler($event)\">\n    <mat-radio-button\n        *ngFor=\"let option of settings.options\" [value]=\"option.value\">\n        {{ option.name }}\n    </mat-radio-button>\n</mat-radio-group>\n`,\n    styles: [`.adf-search-radio .mat-radio-group{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.adf-search-radio .mat-radio-button{margin:5px}`],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-radio' }\n})\nexport class SearchRadioComponent implements SearchWidget, OnInit {\n\n    @Input()\n    value: string;\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n\n    ngOnInit() {\n        this.setValue(\n            this.getSelectedValue()\n        );\n    }\n\n    private getSelectedValue(): string {\n        const options: any[] = this.settings['options'] || [];\n        if (options && options.length > 0) {\n            let selected = options.find(opt => opt.default);\n            if (!selected) {\n                selected = options[0];\n            }\n            return selected.value;\n        }\n        return null;\n    }\n\n    private setValue(newValue: string) {\n        this.value = newValue;\n        this.context.queryFragments[this.id] = newValue;\n        this.context.update();\n    }\n\n    changeHandler(event: MatRadioChange) {\n        this.setValue(event.value);\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material';\n\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\n\n@Component({\n    selector: 'adf-search-fields',\n    template: `<mat-checkbox\n    *ngFor=\"let option of settings.options\"\n    [checked]=\"option.checked\"\n    (change)=\"changeHandler($event, option)\">\n    {{ option.name }}\n</mat-checkbox>\n`,\n    styles: [`.adf-search-fields{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.adf-search-fields .mat-checkbox{margin:5px}`],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-fields' }\n})\nexport class SearchFieldsComponent implements SearchWidget, OnInit {\n\n    @Input()\n    value: string;\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n\n    ngOnInit() {\n        const defaultOptions = (this.settings.options || [])\n            .filter(opt => opt.default)\n            .map(opt => {\n                opt.checked = true;\n                return opt;\n            });\n\n        if (defaultOptions.length > 0) {\n            this.flush(defaultOptions);\n        }\n    }\n\n    changeHandler(event: MatCheckboxChange, option: any) {\n        option.checked = event.checked;\n        this.flush(this.settings.options);\n    }\n\n    flush(opts: any[] = []) {\n        const checkedValues = opts\n            .filter(v => v.checked)\n            .map(v => v.fields)\n            .reduce((prev, curr) => {\n                return prev.concat(curr);\n            }, []);\n\n        this.context.fields[this.id] = checkedValues;\n        this.context.update();\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { MatSelectChange } from '@angular/material';\n\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\n\n@Component({\n    selector: 'adf-search-scope-locations',\n    template: `<mat-form-field>\n    <mat-select\n        [(value)]=\"value\"\n        (selectionChange)=\"changeHandler($event)\">\n        <mat-option\n            *ngFor=\"let option of settings.options\"\n            [value]=\"option.value\">\n            {{option.name}}\n        </mat-option>\n    </mat-select>\n</mat-form-field>\n`,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-scope-locations' }\n})\nexport class SearchScopeLocationsComponent implements SearchWidget, OnInit {\n\n    @Input()\n    value: string;\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n\n    ngOnInit() {\n\n        const defaultSelection = (this.settings.options || []).find(opt => opt.default);\n        if (defaultSelection) {\n            this.flush(defaultSelection.value);\n        }\n    }\n\n    changeHandler(event: MatSelectChange) {\n        this.flush(event.value);\n    }\n\n    flush(value: string) {\n        this.value = value;\n        this.context.scope.locations = value;\n        this.context.update();\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule, MatInputModule, MatRadioModule, MatCheckboxModule, MatSelectModule } from '@angular/material';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { SearchTextComponent } from '../search-text/search-text.component';\nimport { SearchRadioComponent } from '../search-radio/search-radio.component';\nimport { SearchFieldsComponent } from '../search-fields/search-fields.component';\nimport { SearchScopeLocationsComponent } from '../search-scope-locations/search-scope-locations.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatInputModule,\n        MatRadioModule,\n        MatCheckboxModule,\n        MatSelectModule\n    ],\n    declarations: [\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchFieldsComponent,\n        SearchScopeLocationsComponent\n    ],\n    exports: [\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchFieldsComponent,\n        SearchScopeLocationsComponent\n    ],\n    entryComponents: [\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchFieldsComponent,\n        SearchScopeLocationsComponent\n    ]\n})\nexport class SearchWidgetsModule {\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewChild, ViewContainerRef, OnInit, OnDestroy, Compiler, ModuleWithComponentFactories, ComponentRef } from '@angular/core';\nimport { SearchWidgetsModule } from './search-widgets.module';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\n\n@Component({\n    selector: 'adf-search-widget-container',\n    template: '<div #content></div>'\n})\nexport class SearchWidgetContainerComponent implements OnInit, OnDestroy {\n\n    @ViewChild('content', { read: ViewContainerRef })\n    content: ViewContainerRef;\n\n    @Input()\n    id: string;\n\n    @Input()\n    selector: string;\n\n    @Input()\n    settings: any;\n\n    @Input()\n    config: any;\n\n    private module: ModuleWithComponentFactories<SearchWidgetsModule>;\n    private componentRef: ComponentRef<any>;\n\n    constructor(compiler: Compiler, private queryBuilder: SearchQueryBuilderService) {\n        this.module = compiler.compileModuleAndAllComponentsSync(SearchWidgetsModule);\n    }\n\n    ngOnInit() {\n        const factory = this.module.componentFactories.find(f => f.selector === this.selector);\n        if (factory) {\n            this.content.clear();\n            this.componentRef = this.content.createComponent(factory, 0);\n            this.setupWidget(this.componentRef);\n        }\n    }\n\n    private setupWidget(ref: ComponentRef<any>) {\n        if (ref && ref.instance) {\n            ref.instance.id = this.id;\n            ref.instance.settings = { ...this.settings };\n            ref.instance.context = this.queryBuilder;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.componentRef) {\n            this.componentRef.destroy();\n            this.componentRef = null;\n        }\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../material.module';\n\nimport { PipeModule } from '@alfresco/adf-core';\n\nimport { SearchTriggerDirective } from './components/search-trigger.directive';\n\nimport { SearchControlComponent } from './components/search-control.component';\nimport { SearchComponent } from './components/search.component';\nimport { EmptySearchResultComponent } from './components/empty-search-result.component';\nimport { SearchWidgetContainerComponent } from './components/search-widget-container/search-widget-container.component';\nimport { SearchFilterComponent } from './components/search-filter/search-filter.component';\nimport { SearchChipListComponent } from './components/search-chip-list/search-chip-list.component';\n\nexport const ALFRESCO_SEARCH_DIRECTIVES: any[] = [\n    SearchComponent,\n    SearchControlComponent,\n    SearchTriggerDirective,\n    EmptySearchResultComponent,\n    SearchFilterComponent,\n    SearchChipListComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        PipeModule,\n        TranslateModule\n    ],\n    declarations: [\n        ...ALFRESCO_SEARCH_DIRECTIVES,\n        SearchWidgetContainerComponent\n    ],\n    exports: [\n        ...ALFRESCO_SEARCH_DIRECTIVES,\n        SearchWidgetContainerComponent\n    ],\n    entryComponents: [\n        SearchWidgetContainerComponent\n    ]\n})\nexport class SearchModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { SitesService, LogService } from '@alfresco/adf-core';\nimport { SitePaging, SiteEntry } from 'alfresco-js-api';\n\nexport enum Relations {\n    Members = 'members',\n    Containers = 'containers'\n}\n\n@Component({\n    selector: 'adf-sites-dropdown',\n    styles: [`.adf-sites-dropdown.full-width .mat-input-container{width:100%}`],\n    template: `<div id=\"site-dropdown-container\" class=\"adf-site-dropdown-container\">\n    <mat-form-field>\n        <mat-select\n            data-automation-id=\"site-my-files-option\"\n            class=\"adf-site-dropdown-list-element\"\n            id=\"site-dropdown\"\n            placeholder=\"{{placeholder | translate}}\"\n            floatPlaceholder=\"never\"\n            data-automation-id=\"site-my-files-select\"\n            [(value)]=\"selected\"\n            (selectionChange)=\"selectedSite($event)\">\n            <mat-option *ngFor=\"let site of siteList?.list.entries\" [value]=\"site\">\n                {{ site.entry.title | translate}}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n`,\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-sites-dropdown' }\n})\nexport class DropdownSitesComponent implements OnInit {\n\n    /** Hide the \"My Files\" option. */\n    @Input()\n    hideMyFiles: boolean = false;\n\n    /** A custom list of sites to be displayed by the dropdown. If no value\n     * is given, the sites of the current user are displayed by default. A\n     * list of objects only with properties 'title' and 'guid' is enough to\n     * be able to display the dropdown.\n     */\n    @Input()\n    siteList: SitePaging = null;\n\n    /** Id of the selected site */\n    @Input()\n    value: string = null;\n\n    /** Text or a translation key to act as a placeholder. Default value is the\n     * key \"DROPDOWN.PLACEHOLDER_LABEL\".\n     */\n    @Input()\n    placeholder: string = 'DROPDOWN.PLACEHOLDER_LABEL';\n\n    /** Filter for the results of the sites query. Possible values are\n     * \"members\" and \"containers\". When \"members\" is used, the site list\n     * will be restricted to the sites that the user is a member of.\n     */\n    @Input()\n    relations: string;\n\n    /** Emitted when the user selects a site. When the default option is selected,\n     * an empty model is emitted.\n     */\n    @Output()\n    change: EventEmitter<SiteEntry> = new EventEmitter();\n\n    selected: SiteEntry = null;\n\n    public MY_FILES_VALUE = '-my-';\n\n    constructor(private sitesService: SitesService,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        if (!this.siteList) {\n            this.setDefaultSiteList();\n        }\n    }\n\n    selectedSite(event: any) {\n        this.change.emit(event.value);\n    }\n\n    private setDefaultSiteList() {\n        let extendedOptions = null;\n        if (this.relations) {\n            extendedOptions = { relations: [this.relations] };\n        }\n        this.sitesService.getSites(extendedOptions).subscribe((result) => {\n\n            this.siteList = this.relations === Relations.Members ? this.filteredResultsByMember(result) : result;\n\n            if (!this.hideMyFiles) {\n                let myItem = { entry: { id: '-my-', guid: '-my-', title: 'DROPDOWN.MY_FILES_OPTION' } };\n\n                this.siteList.list.entries.unshift(myItem);\n\n                if (!this.value) {\n                    this.value = '-my-';\n                }\n            }\n\n            this.selected = this.siteList.list.entries.find(site => site.entry.id === this.value);\n        },\n        (error) => {\n            this.logService.error(error);\n        });\n    }\n\n    private filteredResultsByMember(sites: SitePaging): SitePaging {\n        const loggedUserName = this.sitesService.getEcmCurrentLoggedUserName();\n        sites.list.entries = sites.list.entries.filter( (site) => this.isCurrentUserMember(site, loggedUserName));\n        return sites;\n    }\n\n    private isCurrentUserMember(site, loggedUserName): boolean {\n        return site.entry.visibility === 'PUBLIC' ||\n            !!site.relations.members.list.entries.find((member) => {\n                return member.entry.id.toLowerCase() === loggedUserName.toLowerCase();\n            });\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DropdownSitesComponent } from './sites-dropdown.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    exports: [\n        DropdownSitesComponent\n    ],\n    declarations: [\n        DropdownSitesComponent\n    ]\n})\nexport class SitesDropdownModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { MinimalNodeEntryEntity, PathElementEntity } from 'alfresco-js-api';\nimport { DocumentListComponent } from '../document-list';\n\n@Component({\n    selector: 'adf-breadcrumb',\n    template: `<div *ngIf=\"folderNode\" data-automation-id=\"breadcrumb\" class=\"adf-breadcrumb-container\">\n    <li *ngFor=\"let item of route; let last = last\"\n        [class.active]=\"last\"\n        [ngSwitch]=\"last\"\n        title=\"{{ item.name | translate }}\"\n        class=\"adf-breadcrumb-item\">\n\n        <a *ngSwitchDefault href=\"#\" [attr.data-automation-id]=\"'breadcrumb_' + item.name\"\n           class=\"adf-breadcrumb-item-anchor\"\n           (click)=\"onRoutePathClick(item, $event)\">\n            {{ item.name | translate }}\n        </a>\n\n        <div *ngSwitchCase=\"true\" class=\"adf-breadcrumb-item-current\">\n            {{ item.name | translate }}\n        </div>\n\n        <mat-icon class=\"adf-breadcrumb-item-chevron\" *ngIf=\"!last\">\n            chevron_right\n        </mat-icon>\n    </li>\n</div>\n<div *ngIf=\"!folderNode && hasRoot\">\n    <li class=\"adf-breadcrumb-item\">\n        <div class=\"adf-breadcrumb-item-current\">\n            {{ root | translate }}\n        </div>\n    </li>\n</div>\n`,\n    styles: [``],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-breadcrumb'\n    }\n})\nexport class BreadcrumbComponent implements OnInit, OnChanges {\n\n    /** Active node, builds UI based on folderNode.path.elements collection. */\n    @Input()\n    folderNode: MinimalNodeEntryEntity = null;\n\n    /** (optional) Name of the root element of the breadcrumb. You can use\n     * this property to rename \"Company Home\" to \"Personal Files\" for\n     * example. You can use an i18n resource key for the property value.\n     */\n    @Input()\n    root: string = null;\n\n    /** (optional) The id of the root element. You can use this property\n     * to set a custom element the breadcrumb should start with.\n     */\n    @Input()\n    rootId: string = null;\n\n    /** (optional) Document List component to operate with. The list will\n     * update when the breadcrumb is clicked.\n     */\n    @Input()\n    target: DocumentListComponent;\n\n    /** Transformation to be performed on the chosen/folder node before building\n     * the breadcrumb UI. Can be useful when custom formatting is needed for the\n     * breadcrumb. You can change the path elements from the node that are used to\n     * build the breadcrumb using this function.\n     */\n    @Input()\n    transform: (node) => any;\n\n    route: PathElementEntity[] = [];\n\n    get hasRoot(): boolean {\n        return !!this.root;\n    }\n\n    /** Emitted when the user clicks on a breadcrumb. */\n    @Output()\n    navigate: EventEmitter<PathElementEntity> = new EventEmitter<PathElementEntity>();\n\n    ngOnInit() {\n        this.transform = this.transform ? this.transform : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.folderNode) {\n            let node: MinimalNodeEntryEntity = null;\n            node = this.transform ? this.transform(changes.folderNode.currentValue) : changes.folderNode.currentValue;\n            this.route = this.parseRoute(node);\n        }\n\n        if (changes.transform) {\n            let node = this.transform ? this.transform(this.folderNode) : this.folderNode;\n            this.route = this.parseRoute(node);\n        }\n    }\n\n    parseRoute(node: MinimalNodeEntryEntity): PathElementEntity[] {\n        if (node && node.path) {\n            const route = <PathElementEntity[]> (node.path.elements || []).slice();\n\n            route.push(<PathElementEntity> {\n                id: node.id,\n                name: node.name\n            });\n\n            const rootPos = this.getElementPosition(route, this.rootId);\n            if (rootPos > 0) {\n                route.splice(0, rootPos);\n            }\n\n            if (rootPos === -1 && this.rootId) {\n                route[0].id = this.rootId;\n            }\n\n            if (this.root) {\n                route[0].name = this.root;\n            }\n\n            return route;\n        }\n\n        return [];\n    }\n\n    private getElementPosition(route: PathElementEntity[], nodeId: string): number {\n        let result: number = -1;\n\n        if (route && route.length > 0 && nodeId) {\n            result = route.findIndex(el => el.id === nodeId);\n        }\n\n        return result;\n    }\n\n    onRoutePathClick(route: PathElementEntity, event?: Event): void {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (route) {\n            this.navigate.emit(route);\n\n            if (this.target) {\n                this.target.navigateTo(route.id);\n            }\n        }\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnChanges, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { MatSelect } from '@angular/material';\nimport { PathElementEntity } from 'alfresco-js-api';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@Component({\n    selector: 'adf-dropdown-breadcrumb',\n    template: `<ng-container *ngIf=\"route.length > 0\">\n\n    <button\n        tabindex=\"0\"\n        class=\"adf-dropdown-breadcumb-trigger\"\n        (click)=\"open()\"\n        data-automation-id=\"dropdown-breadcrumb-trigger\">\n        <mat-icon [class.isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n    </button>\n    <mat-icon class=\"adf-dropdown-breadcrumb-item-chevron\">chevron_right</mat-icon>\n\n    <mat-select\n        #select\n        *ngIf=\"hasPreviousNodes()\"\n        class=\"adf-dropdown-breadcrumb-path\"\n        tabindex=\"0\"\n        data-automation-id=\"dropdown-breadcrumb-path\" >\n\n        <mat-option\n            *ngFor=\"let node of previousNodes;\"\n            (click)=\"onRoutePathClick(node, $event)\"\n            class=\"adf-dropdown-breadcrumb-path-option\"\n            tabindex=\"0\"\n            data-automation-class=\"dropdown-breadcrumb-path-option\">\n            {{ node.name }}\n        </mat-option>\n    </mat-select>\n\n    <span\n        class=\"adf-current-folder\"\n        [class.isRoot]=\"!hasPreviousNodes()\"\n        data-automation-id=\"current-folder\">{{ currentNode.name }}</span>\n</ng-container>\n`,\n    styles: [``],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-dropdown-breadcrumb'\n    }\n})\nexport class DropdownBreadcrumbComponent extends BreadcrumbComponent implements OnChanges {\n\n    @ViewChild('select')\n    selectbox: MatSelect;\n\n    currentNode: PathElementEntity;\n    previousNodes: PathElementEntity[];\n\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n        this.recalculateNodes();\n    }\n\n    /**\n     * Calculate the current and previous nodes from the route array\n     */\n    private recalculateNodes(): void {\n        this.currentNode = this.route[this.route.length - 1];\n        this.previousNodes = this.route.slice(0, this.route.length - 1).reverse();\n    }\n\n    /**\n     * Opens the selectbox overlay\n     */\n    open(): void {\n        if (this.selectbox) {\n            this.selectbox.open();\n        }\n    }\n\n    /**\n     * Return if route has more than one element (means: we are not in the root directory)\n     */\n    hasPreviousNodes(): boolean {\n        return this.previousNodes.length > 0;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { BreadcrumbComponent } from './breadcrumb.component';\nimport { DropdownBreadcrumbComponent } from './dropdown-breadcrumb.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule\n    ],\n    exports: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ],\n    declarations: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ]\n})\nexport class BreadcrumbModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\n\n@Component({\n    selector: 'adf-confirm-dialog',\n    template: `\n        <h1 mat-dialog-title>{{ title | translate }}</h1>\n        <mat-dialog-content>\n            <p>{{ message | translate }}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n            <span class=\"spacer\"></span>\n            <button mat-button [mat-dialog-close]=\"true\">{{ yesLabel | translate }}</button>\n            <button mat-button color=\"primary\" [mat-dialog-close]=\"false\" cdkFocusInitial>{{ noLabel | translate }}</button>\n        </mat-dialog-actions>\n    `,\n    styles: [`\n        .spacer { flex: 1 1 auto; }\n\n        .adf-confirm-dialog .mat-dialog-actions .mat-button-wrapper {\n            text-transform: uppercase;\n        }\n    `],\n    host: { 'class': 'adf-confirm-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ConfirmDialogComponent {\n\n    title: string;\n    message: string;\n    yesLabel: string;\n    noLabel: string;\n\n    constructor(@Inject(MAT_DIALOG_DATA) data) {\n        data = data || {};\n        this.title = data.title || 'ADF_CONFIRM_DIALOG.CONFIRM';\n        this.message = data.message || 'ADF_CONFIRM_DIALOG.MESSAGE';\n        this.yesLabel = data.yesLabel || 'ADF_CONFIRM_DIALOG.YES_LABEL';\n        this.noLabel = data.noLabel || 'ADF_CONFIRM_DIALOG.NO_LABEL';\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, ContentService } from '@alfresco/adf-core';\nimport { Component, Input, OnChanges, ViewEncapsulation, ElementRef } from '@angular/core';\nimport { VersionsApi, MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { MatDialog } from '@angular/material';\nimport { ConfirmDialogComponent } from '../dialogs/confirm.dialog';\n\n@Component({\n    selector: 'adf-version-list',\n    template: `<mat-list class=\"adf-version-list\" *ngIf=\"!isLoading; else loading_template\">\n    <mat-list-item *ngFor=\"let version of versions\">\n        <mat-icon mat-list-icon>insert_drive_file</mat-icon>\n        <h4 mat-line class=\"adf-version-list-item-name\">{{version.entry.name}}</h4>\n        <p mat-line>\n            <span class=\"adf-version-list-item-version\">{{version.entry.id}}</span> -\n            <span class=\"adf-version-list-item-date\">{{version.entry.modifiedAt | date}}</span>\n        </p>\n        <p mat-line class=\"adf-version-list-item-comment\" *ngIf=\"showComments\">{{version.entry.versionComment}}</p>\n\n        <mat-menu #versionMenu=\"matMenu\" yPosition=\"below\" xPosition=\"before\">\n            <button *ngIf=\"canUpdate()\"\n                mat-menu-item\n                (click)=\"restore(version.entry.id)\">\n                {{ 'ADF_VERSION_LIST.ACTIONS.RESTORE' | translate }}\n            </button>\n            <button *ngIf=\"allowDownload\"\n                mat-menu-item\n                (click)=\"downloadVersion(version.entry.id)\">\n                {{ 'ADF_VERSION_LIST.ACTIONS.DOWNLOAD' | translate }}\n            </button>\n            <button *ngIf=\"canUpdate()\"\n                (click)=\"deleteVersion(version.entry.id)\"\n                mat-menu-item>\n                {{ 'ADF_VERSION_LIST.ACTIONS.DELETE' | translate }}\n            </button>\n        </mat-menu>\n\n        <button mat-icon-button [matMenuTriggerFor]=\"versionMenu\">\n            <mat-icon>more_vert</mat-icon>\n        </button>\n    </mat-list-item>\n</mat-list>\n\n<ng-template #loading_template>\n    <mat-progress-bar data-automation-id=\"version-history-loading-bar\" mode=\"indeterminate\" color=\"accent\"></mat-progress-bar>\n</ng-template>\n`,\n    styles: [`.adf-version-list .mat-list-item{border-bottom:1px solid #d8d8d8}.adf-version-list-item-version{font-weight:700}.adf-version-list-item-date{opacity:.6}.adf-version-list-item-comment{opacity:.5}`],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-version-list'\n    }\n})\nexport class VersionListComponent implements OnChanges {\n\n    private versionsApi: VersionsApi;\n    versions: any = [];\n    isLoading = true;\n\n    /** @deprecated in 2.3.0 */\n    @Input()\n    id: string;\n\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    @Input()\n    showComments = true;\n\n    /** Enable/disable possibility to download a version of the current node. */\n    @Input()\n    allowDownload = true;\n\n    constructor(\n        private alfrescoApi: AlfrescoApiService,\n        private contentService: ContentService,\n        private dialog: MatDialog,\n        private el: ElementRef) {\n        this.versionsApi = this.alfrescoApi.versionsApi;\n    }\n\n    ngOnChanges() {\n        this.loadVersionHistory();\n    }\n\n    canUpdate(): boolean {\n        return this.contentService.hasPermission(this.node, 'update');\n    }\n\n    restore(versionId) {\n        if (this.canUpdate()) {\n            this.versionsApi\n                .revertVersion(this.node.id, versionId, { majorVersion: true, comment: ''})\n                .then(() => this.onVersionRestored());\n        }\n    }\n\n    loadVersionHistory() {\n        this.isLoading = true;\n        this.versionsApi.listVersionHistory(this.node.id).then((data) => {\n            this.versions = data.list.entries;\n            this.isLoading = false;\n        });\n    }\n\n    downloadVersion(versionId: string) {\n        if (this.allowDownload) {\n            const versionDownloadUrl = this.getVersionContentUrl(this.node.id, versionId, true);\n            this.downloadContent(versionDownloadUrl);\n        }\n    }\n\n    deleteVersion(versionId: string) {\n        if (this.canUpdate()) {\n            const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n                data: {\n                    title: 'ADF_VERSION_LIST.CONFIRM_DELETE.TITLE',\n                    message: 'ADF_VERSION_LIST.CONFIRM_DELETE.MESSAGE',\n                    yesLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.YES_LABEL',\n                    noLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.NO_LABEL'\n                },\n                minWidth: '250px'\n            });\n\n            dialogRef.afterClosed().subscribe(result => {\n                if (result === true) {\n                    this.alfrescoApi.versionsApi\n                        .deleteVersion(this.node.id, versionId)\n                        .then(() => this.onVersionDeleted());\n                }\n            });\n        }\n    }\n\n    onVersionDeleted() {\n        this.loadVersionHistory();\n\n        const event = new CustomEvent('version-deleted', { bubbles: true });\n        this.el.nativeElement.dispatchEvent(event);\n    }\n\n    onVersionRestored() {\n        this.loadVersionHistory();\n\n        const event = new CustomEvent('version-restored', { bubbles: true });\n        this.el.nativeElement.dispatchEvent(event);\n    }\n\n    private getVersionContentUrl(nodeId: string, versionId: string, attachment?: boolean) {\n        const nodeDownloadUrl = this.alfrescoApi.contentApi.getContentUrl(nodeId, attachment);\n        return nodeDownloadUrl.replace('/content', '/versions/' + versionId + '/content');\n    }\n\n    downloadContent(url: string) {\n        if (url) {\n            const link = document.createElement('a');\n\n            link.style.display = 'none';\n            link.href = url;\n\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { VersionListComponent } from './version-list.component';\nimport { AppConfigService, ContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-version-manager',\n    template: `<div class=\"adf-new-version-uploader-container\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <adf-version-upload\n        [node]=\"node\"\n        (success)=\"onUploadSuccess($event)\"\n        (error)=\"uploadError.emit($event)\">\n    </adf-version-upload>\n</div>\n<div class=\"adf-version-list-container\">\n    <adf-version-list\n        #versionList\n        [node]=\"node\"\n        [allowDownload]=\"allowDownload\"\n        [showComments]=\"showComments\">\n    </adf-version-list>\n</div>\n`,\n    styles: [`.adf-button.upload-new-version{-webkit-box-shadow:none;box-shadow:none}.adf-new-version-uploader-container{border-bottom:1px solid #d8d8d8;padding:16px 0}`],\n    encapsulation: ViewEncapsulation.None\n})\nexport class VersionManagerComponent {\n\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    @Input()\n    showComments = true;\n\n    @Input()\n    allowDownload = true;\n\n    @Output()\n    uploadSuccess = new EventEmitter();\n\n    @Output()\n    uploadError = new EventEmitter();\n\n    @ViewChild('versionList')\n    versionListComponent: VersionListComponent;\n\n    constructor(\n        config: AppConfigService,\n        private contentService: ContentService) {\n        this.showComments = config.get('adf-version-manager.allowComments', true);\n        this.allowDownload = config.get('adf-version-manager.allowDownload', true);\n    }\n\n    onUploadSuccess(event): void {\n        this.versionListComponent.loadVersionHistory();\n        this.uploadSuccess.emit(event);\n    }\n\n    canUpdate(): boolean {\n        return this.contentService.hasPermission(this.node, 'update');\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation, Output, EventEmitter } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { ContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-version-upload',\n    template: `<adf-upload-version-button\n    data-automation-id=\"adf-new-version-file-upload\"\n    class=\"adf-new-version-file-upload\"\n    staticTitle=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.TITLE' | translate }}\"\n    [node]=\"node\"\n    [disabled]=\"!canUpload()\"\n    [rootFolderId]=\"node.parentId\"\n    tooltip=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.TOOLTIP' | translate }}\"\n    [versioning]=\"true\"\n    (success)=\"success.emit($event)\"\n    (error)=\"error.emit($event)\">\n</adf-upload-version-button>\n`,\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-version-upload' }\n})\nexport class VersionUploadComponent {\n\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    @Output()\n    success = new EventEmitter();\n\n    @Output()\n    error = new EventEmitter();\n\n    constructor(private contentService: ContentService) {\n    }\n\n    canUpload(): boolean {\n        return this.contentService.hasPermission(this.node, 'update');\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { VersionUploadComponent } from './version-upload.component';\nimport { VersionManagerComponent } from './version-manager.component';\nimport { VersionListComponent } from './version-list.component';\nimport { UploadModule } from '../upload/upload.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        UploadModule\n    ],\n    exports: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent\n    ],\n    declarations: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent\n    ],\n    providers: []\n})\nexport class VersionManagerModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Input, ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { DataRow } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-name-location-cell',\n    template: `\n        <div class=\"adf-name-location-cell-name\">{{ name }}</div>\n        <div class=\"adf-name-location-cell-location\" [title]=\"path\">{{ path }}</div>\n    `,\n    styles: [``],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'adf-name-location-cell' }\n})\nexport class NameLocationCellComponent implements OnInit {\n\n    name: string = '';\n    path: string = '';\n\n    @Input()\n    row: DataRow;\n\n    ngOnInit() {\n        if (this.row) {\n            this.name = this.row.getValue('name');\n\n            const fullPath = this.row.getValue('path');\n            if (fullPath) {\n                this.path = fullPath.name || '';\n            }\n        }\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodePaging } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * Internal service used by ContentNodeSelector component.\n */\n@Injectable()\nexport class ContentNodeSelectorService {\n\n    constructor(private searchService: SearchService) {\n    }\n\n    /**\n     * Performs a search for content node selection\n     *\n     * @param searchTerm    The term to search for\n     * @param rootNodeId    The root is to start the search from\n     * @param skipCount     From where to start the loading\n     * @param maxItems      How many items to load\n     * @param [extraNodeIds]  List of extra node ids to search from. This last parameter is necessary when\n     * the rootNodeId is one of the supported aliases (e.g. '-my-', '-root-', '-mysites-', etc.)\n     * and search is not supported for that alias, but can be performed on its corresponding nodes.\n     */\n    public search(searchTerm: string, rootNodeId: string = null, skipCount: number = 0, maxItems: number = 25, extraNodeIds?: string[]): Observable<NodePaging> {\n\n        let extraParentFiltering = '';\n\n        if (extraNodeIds && extraNodeIds.length) {\n            extraNodeIds\n                .filter(id => id !== rootNodeId)\n                .forEach(extraId => {\n                    extraParentFiltering += ` OR ANCESTOR:'workspace://SpacesStore/${extraId}'`;\n                });\n        }\n\n        const parentFiltering = rootNodeId ? [{ query: `ANCESTOR:'workspace://SpacesStore/${rootNodeId}'${extraParentFiltering}` }] : [];\n\n        let defaultSearchNode: any = {\n            query: {\n                query: `${searchTerm}* OR name:${searchTerm}*`\n            },\n            include: ['path', 'allowableOperations'],\n            paging: {\n                maxItems: maxItems,\n                skipCount: skipCount\n            },\n            filterQueries: [\n                { query: \"TYPE:'cm:folder'\" },\n                { query: 'NOT cm:creator:System' },\n                ...parentFiltering\n            ],\n            scope: {\n                locations: ['nodes']\n            }\n        };\n\n        return this.searchService.searchByQueryBody(defaultSearchNode);\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport {\n    AlfrescoApiService, HighlightDirective, UserPreferencesService,\n    PaginatedComponent, PaginationModel\n} from '@alfresco/adf-core';\nimport { FormControl } from '@angular/forms';\nimport { MinimalNodeEntryEntity, NodePaging, Pagination, SiteEntry, SitePaging } from 'alfresco-js-api';\nimport { DocumentListComponent, PaginationStrategy } from '../document-list/components/document-list.component';\nimport { RowFilter } from '../document-list/data/row-filter.model';\nimport { ImageResolver } from '../document-list/data/image-resolver.model';\nimport { ContentNodeSelectorService } from './content-node-selector.service';\nimport { debounceTime } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nexport type ValidationFunction = (entry: MinimalNodeEntryEntity) => boolean;\n\nconst defaultValidation = () => true;\n\n@Component({\n    selector: 'adf-content-node-selector-panel',\n    styles: [``],\n    template: `<div class=\"adf-content-node-selector-content\" (node-select)=\"onNodeSelect($event)\">\n    <mat-form-field floatPlaceholder=\"never\" class=\"adf-content-node-selector-content-input\">\n        <input matInput\n            id=\"searchInput\"\n            [formControl]=\"searchInput\"\n            type=\"text\"\n            placeholder=\"{{'NODE_SELECTOR.SEARCH' | translate}}\"\n            [value]=\"searchTerm\"\n            data-automation-id=\"content-node-selector-search-input\">\n\n        <mat-icon *ngIf=\"searchTerm.length > 0\"\n            matSuffix (click)=\"clear()\"\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-clear\">clear\n        </mat-icon>\n\n        <mat-icon *ngIf=\"searchTerm.length === 0\"\n            matSuffix\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-icon\">search\n        </mat-icon>\n\n    </mat-form-field>\n\n    <adf-sites-dropdown\n        class=\"full-width\"\n        (change)=\"siteChanged($event)\"\n        [placeholder]=\"'NODE_SELECTOR.SELECT_LOCATION'\"\n        [hideMyFiles]=\"dropdownHideMyFiles\"\n        [siteList]=\"dropdownSiteList\"\n        data-automation-id=\"content-node-selector-sites-combo\">\n    </adf-sites-dropdown>\n\n    <adf-toolbar>\n        <adf-toolbar-title>\n            <ng-container *ngIf=\"!showBreadcrumbs()\">\n                <span class=\"search-results-label\">{{ 'NODE_SELECTOR.SEARCH_RESULTS' | translate }}</span>\n            </ng-container>\n            <adf-dropdown-breadcrumb *ngIf=\"showBreadcrumbs()\"\n                class=\"adf-content-node-selector-content-breadcrumb\"\n                (navigate)=\"clearSearch()\"\n                [target]=\"documentList\"\n                [transform]=\"breadcrumbTransform\"\n                [folderNode]=\"breadcrumbFolderNode\"\n                data-automation-id=\"content-node-selector-content-breadcrumb\">\n            </adf-dropdown-breadcrumb>\n        </adf-toolbar-title>\n    </adf-toolbar>\n\n    <div\n        class=\"adf-content-node-selector-content-list\"\n        [class.adf-content-node-selector-content-list-searchLayout]=\"showingSearchResults\"\n        data-automation-id=\"content-node-selector-content-list\">\n        <adf-document-list\n            #documentList\n            adf-highlight\n            adf-highlight-selector=\"adf-name-location-cell .adf-name-location-cell-name\"\n            [showHeader]=\"false\"\n            [node]=\"nodes\"\n            [maxItems]=\"pageSize\"\n            [rowFilter]=\"rowFilter\"\n            [imageResolver]=\"imageResolver\"\n            [currentFolderId]=\"folderIdToShow\"\n            selectionMode=\"single\"\n            [contextMenuActions]=\"false\"\n            [contentActions]=\"false\"\n            [allowDropFiles]=\"false\"\n            (folderChange)=\"onFolderChange()\"\n            (ready)=\"onFolderLoaded($event)\"\n            (node-dblclick)=\"onNodeDoubleClick($event)\"\n            data-automation-id=\"content-node-selector-document-list\">\n            <empty-folder-content>\n                <ng-template>\n                    <div>{{ 'NODE_SELECTOR.NO_RESULTS' | translate }}</div>\n                </ng-template>\n            </empty-folder-content>\n\n            <data-columns>\n                <data-column key=\"$thumbnail\" type=\"image\"></data-column>\n                <data-column key=\"name\" type=\"text\" class=\"full-width ellipsis-cell\">\n                    <ng-template let-context>\n                        <adf-name-location-cell [row]=\"context.row\"></adf-name-location-cell>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"modifiedAt\" type=\"date\" format=\"timeAgo\" class=\"adf-content-selector-modified-cell\"></data-column>\n                <data-column key=\"modifiedByUser.displayName\" type=\"text\" class=\"adf-content-selector-modifier-cell\"></data-column>\n                <data-column key=\"visibility\" type=\"text\"></data-column>\n            </data-columns>\n\n        </adf-document-list>\n\n        <adf-infinite-pagination\n            [target]=\"documentList\"\n            [loading]=\"loadingSearchResults\"\n            (loadMore)=\"getNextPageOfSearch($event)\"\n            data-automation-id=\"content-node-selector-search-pagination\">\n            {{ 'ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE' | translate }}\n        </adf-infinite-pagination>\n    </div>\n</div>\n`,\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-content-node-selector-panel' }\n})\nexport class ContentNodeSelectorPanelComponent implements OnInit, PaginatedComponent {\n\n    /** Node ID of the folder currently listed. */\n    @Input()\n    currentFolderId: string = null;\n\n    /** Hide the \"My Files\" option added to the site list by default.\n     * See the [Sites Dropdown component](sites-dropdown.component.md)\n     * for more information.\n     */\n    @Input()\n    dropdownHideMyFiles: boolean = false;\n\n    /** Custom site for site dropdown same as siteList. See the\n     * [Sites Dropdown component](sites-dropdown.component.md)\n     * for more information.\n     */\n    @Input()\n    dropdownSiteList: SitePaging = null;\n\n    /** Custom row filter function. See the\n     * [Document List component](document-list.component.md#custom-row-filter)\n     * for more information.\n     */\n    @Input()\n    rowFilter: RowFilter = null;\n\n    /** Custom image resolver function. See the\n     * [Document List component](document-list.component.md#custom-row-filter)\n     * for more information.\n     */\n    @Input()\n    imageResolver: ImageResolver = null;\n\n    /** Number of items shown per page in the list. */\n    @Input()\n    pageSize: number;\n\n    /** Function used to decide if the selected node has permission to be selected.\n     * Default value is a function that always returns true.\n     */\n    @Input()\n    isSelectionValid: ValidationFunction = defaultValidation;\n\n    /** Transformation to be performed on the chosen/folder node before building the\n     * breadcrumb UI. Can be useful when custom formatting is needed for the breadcrumb.\n     * You can change the path elements from the node that are used to build the\n     * breadcrumb using this function.\n     */\n    @Input()\n    breadcrumbTransform: (node) => any;\n\n    /** Emitted when the user has chosen an item. */\n    @Output()\n    select: EventEmitter<MinimalNodeEntryEntity[]> = new EventEmitter<MinimalNodeEntryEntity[]>();\n\n    @ViewChild('documentList')\n    documentList: DocumentListComponent;\n\n    @ViewChild(HighlightDirective)\n    highlighter: HighlightDirective;\n\n    nodes: NodePaging | null = null;\n    siteId: null | string;\n    searchTerm: string = '';\n    showingSearchResults: boolean = false;\n    loadingSearchResults: boolean = false;\n    inDialog: boolean = false;\n    _chosenNode: MinimalNodeEntryEntity = null;\n    folderIdToShow: string | null = null;\n    paginationStrategy: PaginationStrategy = PaginationStrategy.Infinite;\n    pagination: BehaviorSubject<PaginationModel>;\n\n    skipCount: number = 0;\n    infiniteScroll: boolean = false;\n    debounceSearch: number = 200;\n    searchInput: FormControl = new FormControl();\n\n    constructor(private contentNodeSelectorService: ContentNodeSelectorService,\n                private apiService: AlfrescoApiService,\n                private preferences: UserPreferencesService) {\n        this.searchInput.valueChanges\n            .pipe(\n                debounceTime(this.debounceSearch)\n            )\n            .subscribe((searchValue) => {\n                this.search(searchValue);\n            });\n        this.pageSize = this.preferences.paginationSize;\n\n        let defaultPagination = <PaginationModel> {\n            maxItems: this.pageSize,\n            skipCount: 0,\n            totalItems: 0,\n            hasMoreItems: false\n        };\n        this.pagination = new BehaviorSubject<PaginationModel>(defaultPagination);\n    }\n\n    set chosenNode(value: MinimalNodeEntryEntity) {\n        this._chosenNode = value;\n        let valuesArray = null;\n        if (value) {\n            valuesArray = [value];\n        }\n        this.select.next(valuesArray);\n    }\n\n    get chosenNode() {\n        return this._chosenNode;\n    }\n\n    ngOnInit() {\n        this.folderIdToShow = this.currentFolderId;\n\n        this.breadcrumbTransform = this.breadcrumbTransform ? this.breadcrumbTransform : null;\n        this.isSelectionValid = this.isSelectionValid ? this.isSelectionValid : defaultValidation;\n    }\n\n    /**\n     * Updates the site attribute and starts a new search\n     *\n     * @param chosenSite SiteEntry to search within\n     */\n    siteChanged(chosenSite: SiteEntry): void {\n        this.siteId = chosenSite.entry.guid;\n        this.updateResults();\n    }\n\n    /**\n     * Updates the searchTerm attribute and starts a new search\n     *\n     * @param searchTerm string value to search against\n     */\n    search(searchTerm: string): void {\n        this.searchTerm = searchTerm;\n        this.updateResults();\n    }\n\n    /**\n     * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb\n     */\n    get breadcrumbFolderNode(): MinimalNodeEntryEntity | null {\n        let folderNode: MinimalNodeEntryEntity;\n\n        if (this.showingSearchResults && this.chosenNode) {\n            folderNode = this.chosenNode;\n        } else {\n            folderNode = this.documentList.folderNode;\n        }\n\n        return folderNode;\n    }\n\n    /**\n     * Clear the search input and reset to last folder node in which search was performed\n     */\n    clear(): void {\n        this.clearSearch();\n        this.folderIdToShow = this.siteId || this.currentFolderId;\n    }\n\n    /**\n     * Clear the search input and search related data\n     */\n    clearSearch() {\n        this.searchTerm = '';\n        this.nodes = null;\n        this.skipCount = 0;\n        this.chosenNode = null;\n        this.showingSearchResults = false;\n    }\n\n    /**\n     * Update the result list depending on the criterias\n     */\n    private updateResults(): void {\n        if (this.searchTerm.length === 0) {\n            this.clear();\n        } else {\n            this.startNewSearch();\n        }\n    }\n\n    /**\n     * Load the first page of a new search result\n     */\n    private startNewSearch(): void {\n        this.nodes = null;\n        this.skipCount = 0;\n        this.chosenNode = null;\n        this.folderIdToShow = null;\n        this.querySearch();\n    }\n\n    /**\n     * Loads the next batch of search results\n     *\n     * @param event Pagination object\n     */\n    updatePagination(pagination: Pagination): void {\n        this.infiniteScroll = true;\n        this.skipCount = pagination.skipCount;\n\n        if (this.searchTerm.length > 0) {\n            this.querySearch();\n        }\n    }\n\n    /**\n     * Perform the call to searchService with the proper parameters\n     */\n    private querySearch(): void {\n        this.loadingSearchResults = true;\n\n        if (this.dropdownSiteList) {\n            this.documentList.getCorrespondingNodeIds(this.siteId)\n                .subscribe(nodeIds => {\n                        this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.skipCount, this.pageSize, nodeIds)\n                            .subscribe(this.showSearchResults.bind(this));\n                    },\n                    () => {\n                        this.showSearchResults({ list: { entries: [] } });\n                    });\n        } else {\n            this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.skipCount, this.pageSize)\n                .subscribe(this.showSearchResults.bind(this));\n        }\n    }\n\n    /**\n     * Show the results of the search\n     *\n     * @param results Search results\n     */\n    private showSearchResults(nodePaging: NodePaging): void {\n        this.showingSearchResults = true;\n        this.loadingSearchResults = false;\n\n        // Documentlist hack, since data displaying for preloaded nodes is a little bit messy there\n        if (!this.nodes) {\n            this.nodes = nodePaging;\n        } else {\n            this.documentList.data.loadPage(nodePaging, true);\n        }\n\n        this.pagination.next(nodePaging.list.pagination);\n        this.highlight();\n    }\n\n    /**\n     * Hightlight the actual searchterm in the next frame\n     */\n    highlight(): void {\n        setTimeout(() => {\n            this.highlighter.highlight(this.searchTerm);\n        }, 0);\n    }\n\n    /**\n     * Sets showingSearchResults state to be able to differentiate between search results or folder results\n     */\n    onFolderChange(): void {\n        this.showingSearchResults = false;\n        this.infiniteScroll = false;\n        this.clearSearch();\n    }\n\n    /**\n     * Attempts to set the currently loaded node\n     */\n    onFolderLoaded(nodePaging: NodePaging): void {\n        if (!this.showingSearchResults) {\n            this.attemptNodeSelection(this.documentList.folderNode);\n        }\n    }\n\n    /**\n     * Returns whether breadcrumb has to be shown or not\n     */\n    showBreadcrumbs() {\n        return !this.showingSearchResults || this.chosenNode;\n    }\n\n    /**\n     * Loads the next batch of search results\n     *\n     * @param event Pagination object\n     */\n    getNextPageOfSearch(event: Pagination): void {\n        this.infiniteScroll = true;\n        this.skipCount = event.skipCount;\n\n        if (this.searchTerm.length > 0) {\n            this.querySearch();\n        }\n    }\n\n    /**\n     * Selects node as chosen if it has the right permission, clears the selection otherwise\n     *\n     * @param entry\n     */\n    private attemptNodeSelection(entry: MinimalNodeEntryEntity): void {\n        if (this.isSelectionValid(entry)) {\n            this.chosenNode = entry;\n        } else {\n            this.resetChosenNode();\n        }\n    }\n\n    /**\n     * Clears the chosen node\n     */\n    resetChosenNode(): void {\n        this.chosenNode = null;\n    }\n\n    /**\n     * Invoked when user selects a node\n     *\n     * @param event CustomEvent for node-select\n     */\n    onNodeSelect(event: any): void {\n        this.attemptNodeSelection(event.detail.node.entry);\n    }\n\n    onNodeDoubleClick(e: CustomEvent) {\n        const node: any = e.detail.node.entry;\n\n        if (node && node.guid) {\n            const options = {\n                maxItems: this.pageSize,\n                skipCount: this.skipCount,\n                include: ['path', 'properties', 'allowableOperations']\n            };\n\n            this.apiService.nodesApi.getNode(node.guid, options)\n                .then(documentLibrary => {\n                    this.documentList.performCustomSourceNavigation(documentLibrary);\n                });\n        }\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { ContentNodeSelectorPanelComponent } from './content-node-selector-panel.component';\nimport { ContentNodeSelectorComponent } from './content-node-selector.component';\nimport { ContentNodeSelectorService } from './content-node-selector.service';\nimport { ContentNodeDialogService } from './content-node-dialog.service';\nimport { SitesDropdownModule } from '../site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from '../breadcrumb/breadcrumb.module';\nimport { PaginationModule, ToolbarModule, DirectiveModule, DataColumnModule, DataTableModule } from '@alfresco/adf-core';\nimport { DocumentListModule } from '../document-list/document-list.module';\nimport { NameLocationCellComponent } from './name-location-cell/name-location-cell.component';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        DirectiveModule,\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ToolbarModule,\n        DocumentListModule,\n        DataColumnModule,\n        DataTableModule,\n        PaginationModule\n    ],\n    exports: [\n        ContentNodeSelectorPanelComponent,\n        NameLocationCellComponent,\n        ContentNodeSelectorComponent\n    ],\n    entryComponents: [\n        ContentNodeSelectorPanelComponent, ContentNodeSelectorComponent\n    ],\n    declarations: [\n        ContentNodeSelectorPanelComponent,\n        NameLocationCellComponent,\n        ContentNodeSelectorComponent\n    ],\n    providers: [\n        ContentNodeSelectorService,\n        ContentNodeDialogService\n    ]\n})\nexport class ContentNodeSelectorModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormControl } from '@angular/forms';\n\nconst I18N_ERRORS_PATH = 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS';\n\nexport function forbidSpecialCharacters({ value }: FormControl) {\n    const specialCharacters: RegExp = /([\\*\\\"\\<\\>\\\\\\/\\?\\:\\|])/;\n    const isValid: boolean = !specialCharacters.test(value);\n\n    return (isValid) ? null : {\n        message: `${I18N_ERRORS_PATH}.SPECIAL_CHARACTERS`\n    };\n}\n\nexport function forbidEndingDot({ value }: FormControl) {\n    const isValid: boolean = ((value || '').trim().split('').pop() !== '.');\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ENDING_DOT`\n    };\n}\n\nexport function forbidOnlySpaces({ value }: FormControl) {\n    const isValid: boolean = !!((value || '')).trim();\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ONLY_SPACES`\n    };\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { Component, Inject, OnInit, Optional, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { NodesApiService, TranslationService } from '@alfresco/adf-core';\n\nimport { forbidEndingDot, forbidOnlySpaces, forbidSpecialCharacters } from './folder-name.validators';\n\n@Component({\n    selector: 'adf-folder-dialog',\n    styles: [`.adf-fill-remaining-space{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.adf-full-width{width:100%}`],\n    template: `<h2 mat-dialog-title>\n    {{\n    (editing\n    ? 'CORE.FOLDER_DIALOG.EDIT_FOLDER_TITLE'\n    : 'CORE.FOLDER_DIALOG.CREATE_FOLDER_TITLE'\n    ) | translate\n    }}\n</h2>\n\n<mat-dialog-content>\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-input-container class=\"adf-full-width\">\n            <input\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.LABEL' | translate }}\"\n                matInput\n                required\n                [formControl]=\"form.controls['name']\"\n            />\n\n            <mat-hint *ngIf=\"form.controls['name'].dirty\">\n                <span *ngIf=\"form.controls['name'].errors?.required\">\n                    {{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS.REQUIRED' | translate }}\n                </span>\n\n                <span *ngIf=\"!form.controls['name'].errors?.required && form.controls['name'].errors?.message\">\n                    {{ form.controls['name'].errors?.message | translate }}\n                </span>\n            </mat-hint>\n        </mat-input-container>\n\n        <br />\n        <br />\n\n        <mat-input-container class=\"adf-full-width\">\n            <textarea\n                matInput\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_DESCRIPTION.LABEL' | translate }}\"\n                rows=\"4\"\n                [formControl]=\"form.controls['description']\"></textarea>\n        </mat-input-container>\n    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button\n        mat-button\n        mat-dialog-close>\n        {{ 'CORE.FOLDER_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\"\n            mat-button\n            (click)=\"submit()\"\n            [disabled]=\"!form.valid\">\n        {{\n        (editing\n        ? 'CORE.FOLDER_DIALOG.UPDATE_BUTTON.LABEL'\n        : 'CORE.FOLDER_DIALOG.CREATE_BUTTON.LABEL'\n        ) | translate\n        }}\n    </button>\n</mat-dialog-actions>\n`\n})\nexport class FolderDialogComponent implements OnInit {\n\n    form: FormGroup;\n\n    folder: MinimalNodeEntryEntity = null;\n\n    /** Emitted when the edit/create folder give error for example a folder with same name already exist\n     */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private dialog: MatDialogRef<FolderDialogComponent>,\n        private nodesApi: NodesApiService,\n        private translation: TranslationService,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        public data: any\n    ) {}\n\n    get editing(): boolean {\n        return !!this.data.folder;\n    }\n\n    ngOnInit() {\n        const { folder } = this.data;\n        let name = '';\n        let description = '';\n\n        if (folder) {\n            const { properties } = folder;\n\n            name = folder.name || '';\n            description = properties ? properties['cm:description'] : '';\n        }\n\n        const validators = {\n            name: [\n                Validators.required,\n                forbidSpecialCharacters,\n                forbidEndingDot,\n                forbidOnlySpaces\n            ]\n        };\n\n        this.form = this.formBuilder.group({\n            name: [ name, validators.name ],\n            description: [ description ]\n        });\n    }\n\n    get name(): string {\n        let { name } = this.form.value;\n\n        return (name || '').trim();\n    }\n\n    get description(): string {\n        let { description } = this.form.value;\n\n        return (description || '').trim();\n    }\n\n    private get properties(): any {\n        const { name: title, description } = this;\n\n        return {\n            'cm:title': title,\n            'cm:description': description\n        };\n    }\n\n    private create(): Observable<MinimalNodeEntryEntity> {\n        const { name, properties, nodesApi, data: { parentNodeId} } = this;\n        return nodesApi.createFolder(parentNodeId, { name, properties });\n    }\n\n    private edit(): Observable<MinimalNodeEntryEntity> {\n        const { name, properties, nodesApi, data: { folder: { id: nodeId }} } = this;\n        return nodesApi.updateNode(nodeId, { name, properties });\n    }\n\n    submit() {\n        const { form, dialog, editing } = this;\n\n        if (!form.valid) { return; }\n\n        (editing ? this.edit() : this.create())\n            .subscribe(\n                (folder: MinimalNodeEntryEntity) => dialog.close(folder),\n                (error) => this.handleError(error)\n            );\n    }\n\n    handleError(error: any): any {\n        let errorMessage = 'CORE.MESSAGES.ERRORS.GENERIC';\n\n        try {\n            const { error: { statusCode } } = JSON.parse(error.message);\n\n            if (statusCode === 409) {\n                errorMessage = 'CORE.MESSAGES.ERRORS.EXISTENT_FOLDER';\n            }\n        } catch (err) { /* Do nothing, keep the original message */ }\n\n        this.error.emit(this.translation.instant(errorMessage));\n\n        return error;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { DownloadZipDialogComponent } from './download-zip.dialog';\nimport { FolderDialogComponent } from './folder.dialog';\nimport { NodeLockDialogComponent } from './node-lock.dialog';\nimport { ShareDialogComponent } from './share.dialog';\nimport { ConfirmDialogComponent } from './confirm.dialog';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { FormModule } from '@alfresco/adf-core';\nimport { MatDatetimepickerModule } from '@mat-datetimepicker/core';\nimport { MatMomentDatetimeModule } from '@mat-datetimepicker/moment';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        FormsModule,\n        FormModule,\n        ReactiveFormsModule,\n        MatMomentDatetimeModule,\n        MatDatetimepickerModule\n    ],\n    declarations: [\n        DownloadZipDialogComponent,\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ShareDialogComponent,\n        ConfirmDialogComponent\n    ],\n    exports: [\n        DownloadZipDialogComponent,\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ShareDialogComponent,\n        ConfirmDialogComponent\n    ],\n    entryComponents: [\n        DownloadZipDialogComponent,\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ShareDialogComponent,\n        ConfirmDialogComponent\n    ]\n})\nexport class DialogModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\n\nconst DEFAULT_FOLDER_PARENT_ID = '-my-';\n\n@Directive({\n    selector: '[adf-create-folder]'\n})\nexport class FolderCreateDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    /** Parent folder where the new folder will be located after creation. */\n    @Input('adf-create-folder')\n    parentNodeId: string = DEFAULT_FOLDER_PARENT_ID;\n\n    /** Emitted when the create folder give error for example a folder with same name already exist */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        this.openDialog();\n    }\n\n    constructor(\n        public dialogRef: MatDialog,\n        public content: ContentService\n    ) {}\n\n    private get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderCreateDirective;\n        const { parentNodeId } = this;\n\n        return {\n            data: { parentNodeId },\n            width: `${width}px`\n        };\n    }\n\n    private openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.componentInstance.error.subscribe((error) => {\n            this.error.emit(error);\n        });\n\n        dialogInstance.afterClosed().subscribe((node: MinimalNodeEntryEntity) => {\n            if (node) {\n                content.folderCreate.next(node);\n            }\n        });\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\n\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\n\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\n\n@Directive({\n    selector: '[adf-edit-folder]'\n})\nexport class FolderEditDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    /** Folder node to edit. */\n    @Input('adf-edit-folder')\n    folder: MinimalNodeEntryEntity;\n\n    /** Emitted when the edit/create folder give error for example a folder with same name already exist */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        if (this.folder) {\n            this.openDialog();\n        }\n    }\n\n    constructor(\n        public dialogRef: MatDialog,\n        public elementRef: ElementRef,\n        public content: ContentService\n    ) {}\n\n    private get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderEditDirective;\n        const { folder } = this;\n\n        return {\n            data: { folder },\n            width: `${width}px`\n        };\n    }\n\n    private openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.componentInstance.error.subscribe((error) => {\n            this.error.emit(error);\n        });\n\n        dialogInstance.afterClosed().subscribe((node: MinimalNodeEntryEntity) => {\n            if (node) {\n                content.folderEdit.next(node);\n            }\n        });\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { FolderCreateDirective } from './folder-create.directive';\nimport { FolderEditDirective } from './folder-edit.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ],\n    exports: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ]\n})\nexport class FolderDirectiveModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\n\n@Component({\n    selector: 'adf-content-metadata-card',\n    template: `<mat-card *ngIf=\"node\">\n    <mat-card-content>\n        <adf-content-metadata\n            [node]=\"node\"\n            [displayEmpty]=\"displayEmpty\"\n            [editable]=\"editable\"\n            [expanded]=\"expanded\"\n            [multi]=\"multi\"\n            [preset]=\"preset\">\n        </adf-content-metadata>\n    </mat-card-content>\n    <mat-card-footer class=\"adf-content-metadata-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\n        <div>\n            <button *ngIf=\"!readOnly\"\n                mat-icon-button\n                (click)=\"toggleEdit()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                data-automation-id=\"mata-data-card-toggle-edit\">\n                <mat-icon>mode_edit</mat-icon>\n            </button>\n        </div>\n        <button mat-button (click)=\"toggleExpanded()\" data-automation-id=\"mata-data-card-toggle-expand\">\n            <ng-container *ngIf=\"!expanded\">\n                <span data-automation-id=\"mata-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_down</mat-icon>\n            </ng-container>\n            <ng-container *ngIf=\"expanded\">\n                <span data-automation-id=\"mata-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_up</mat-icon>\n            </ng-container>\n        </button>\n    </mat-card-footer>\n</mat-card>\n`,\n    styles: [``],\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-content-metadata-card' }\n})\nexport class ContentMetadataCardComponent {\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    @Input()\n    displayEmpty: boolean = false;\n\n    @Input()\n    preset: string;\n\n    @Input()\n    readOnly = false;\n\n    @Input()\n    multi = false;\n\n    editable: boolean = false;\n    expanded: boolean = false;\n\n    toggleEdit(): void {\n        this.editable = !this.editable;\n    }\n\n    toggleExpanded(): void {\n        this.expanded = !this.expanded;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { CardViewDateItemModel, CardViewTextItemModel, FileSizePipe } from '@alfresco/adf-core';\n\n@Injectable()\nexport class BasicPropertiesService {\n\n    constructor(private fileSizePipe: FileSizePipe) {\n    }\n\n    getProperties(node: MinimalNodeEntryEntity) {\n\n        const sizeInBytes = node.content ? node.content.sizeInBytes : '',\n            mimeTypeName = node.content ? node.content.mimeTypeName : '',\n            author = node.properties ? node.properties['cm:author'] : '',\n            description = node.properties ? node.properties['cm:description'] : '',\n            title = node.properties ? node.properties['cm:title'] : '';\n\n        return [\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.NAME',\n                value: node.name,\n                key: 'name',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.TITLE',\n                value: title,\n                key: 'properties.cm:title',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.CREATOR',\n                value: node.createdByUser.displayName,\n                key: 'createdByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.CREATED_DATE',\n                value: node.createdAt,\n                key: 'createdAt',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.SIZE',\n                value: sizeInBytes,\n                key: 'content.sizeInBytes',\n                pipes: [{ pipe: this.fileSizePipe }],\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIER',\n                value: node.modifiedByUser.displayName,\n                key: 'modifiedByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIED_DATE',\n                value: node.modifiedAt,\n                key: 'modifiedAt',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MIMETYPE',\n                value: mimeTypeName,\n                key: 'content.mimeTypeName',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.AUTHOR',\n                value: author,\n                key: 'properties.cm:author',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.DESCRIPTION',\n                value: description,\n                key: 'properties.cm:description',\n                multiline: true,\n                editable: true\n            })\n        ];\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n    CardViewItemProperties,\n    CardViewItem,\n    CardViewTextItemModel,\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewDatetimeItemModel,\n    CardViewIntItemModel,\n    CardViewFloatItemModel,\n    LogService\n} from '@alfresco/adf-core';\nimport { Property, CardViewGroup, OrganisedPropertyGroup } from '../interfaces/content-metadata.interfaces';\n\nconst D_TEXT = 'd:text';\nconst D_MLTEXT = 'd:mltext';\nconst D_DATE = 'd:date';\nconst D_DATETIME = 'd:datetime';\nconst D_INT = 'd:int';\nconst D_LONG = 'd:long';\nconst D_FLOAT = 'd:float';\nconst D_DOUBLE = 'd:double';\nconst D_BOOLEAN = 'd:boolean';\n\n@Injectable()\nexport class PropertyGroupTranslatorService {\n\n    static readonly RECOGNISED_ECM_TYPES = [ D_TEXT, D_MLTEXT, D_DATE, D_DATETIME, D_INT, D_LONG , D_FLOAT, D_DOUBLE, D_BOOLEAN ];\n\n    constructor(private logService: LogService) {}\n\n    public translateToCardViewGroups(propertyGroups: OrganisedPropertyGroup[], propertyValues): CardViewGroup[] {\n        return propertyGroups.map(propertyGroup => {\n            const translatedPropertyGroup: any = Object.assign({}, propertyGroup);\n            translatedPropertyGroup.properties = this.translateArray(propertyGroup.properties, propertyValues);\n            return translatedPropertyGroup;\n        });\n    }\n\n    private translateArray(properties: Property[], propertyValues: any): CardViewItem[] {\n        return properties.map(property => {\n            return this.translate(property, propertyValues[property.name]);\n        });\n    }\n\n    private translate(property: Property, propertyValue: any): CardViewItem {\n        this.checkECMTypeValidity(property.dataType);\n\n        const prefix = 'properties.';\n\n        let propertyDefinition: CardViewItemProperties = {\n            label: property.title,\n            value: propertyValue,\n            key: `${prefix}${property.name}`,\n            default: property.defaultValue,\n            editable: true\n        };\n        let cardViewItemProperty;\n\n        switch (property.dataType) {\n\n            case D_MLTEXT:\n                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {\n                    multiline: true\n                }));\n                break;\n\n            case D_INT:\n            case D_LONG:\n                cardViewItemProperty = new CardViewIntItemModel(propertyDefinition);\n                break;\n\n            case D_FLOAT:\n            case D_DOUBLE:\n                cardViewItemProperty = new CardViewFloatItemModel(propertyDefinition);\n                break;\n\n            case D_DATE:\n                cardViewItemProperty = new CardViewDateItemModel(propertyDefinition);\n                break;\n\n            case D_DATETIME:\n                cardViewItemProperty = new CardViewDatetimeItemModel(propertyDefinition);\n                break;\n\n            case D_BOOLEAN:\n                cardViewItemProperty = new CardViewBoolItemModel(propertyDefinition);\n                break;\n\n            case D_TEXT:\n            default:\n                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {\n                    multiline: false\n                }));\n        }\n\n        return cardViewItemProperty;\n    }\n\n    private checkECMTypeValidity(ecmPropertyType) {\n        if (PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES.indexOf(ecmPropertyType) === -1) {\n            this.logService.error(`Unknown type for mapping: ${ecmPropertyType}`);\n        }\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PropertyGroup, Property, PropertyGroupContainer } from '../../interfaces/content-metadata.interfaces';\n\nconst emptyGroup = {\n    properties: {}\n};\n\nfunction convertObjectToArray(object: any): Property[] {\n    return Object.keys(object).map(key => object[key]);\n}\n\nexport function getGroup(propertyGroups: PropertyGroupContainer, groupName: string): PropertyGroup | undefined {\n    return propertyGroups[groupName];\n}\n\nexport function getProperty(propertyGroups: PropertyGroupContainer, groupName: string, propertyName: string): Property | Property[] | undefined {\n    const groupDefinition = getGroup(propertyGroups, groupName) || emptyGroup;\n    let propertyDefinitions;\n\n    if (propertyName === '*') {\n        propertyDefinitions = convertObjectToArray(groupDefinition.properties);\n    } else {\n        propertyDefinitions = groupDefinition.properties[propertyName];\n    }\n\n    return propertyDefinitions;\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { ContentMetadataConfig, OrganisedPropertyGroup, PropertyGroupContainer } from '../../interfaces/content-metadata.interfaces';\nimport { getGroup, getProperty } from './property-group-reader';\n\n@Injectable()\nexport class AspectOrientedConfigService implements ContentMetadataConfig {\n\n    constructor(private config: any) {}\n\n    public isGroupAllowed(groupName: string): boolean {\n        const groupNames = Object.keys(this.config);\n        return groupNames.indexOf(groupName) !== -1;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const aspects = this.config,\n            aspectNames = Object.keys(aspects);\n\n        return aspectNames\n            .reduce((groupAccumulator, aspectName) => {\n                const newGroup = this.getOrganisedPropertyGroup(propertyGroups, aspectName);\n                return groupAccumulator.concat(newGroup);\n            }, [])\n            .filter(organisedPropertyGroup => organisedPropertyGroup.properties.length > 0);\n    }\n\n    private getOrganisedPropertyGroup(propertyGroups, aspectName) {\n        const group = getGroup(propertyGroups, aspectName);\n        let newGroup = [];\n\n        if (group) {\n            const aspectProperties = this.config[aspectName];\n            let properties;\n\n            if (aspectProperties === '*') {\n                properties = getProperty(propertyGroups, aspectName, aspectProperties);\n            } else {\n                properties = (<string[]> aspectProperties)\n                    .map((propertyName) => getProperty(propertyGroups, aspectName, propertyName))\n                    .filter(props => props !== undefined);\n            }\n\n            newGroup = [ { title: group.title, properties } ];\n        }\n\n        return newGroup;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { ContentMetadataConfig, OrganisedPropertyGroup,\n    PropertyGroupContainer\n} from '../../interfaces/content-metadata.interfaces';\n\n@Injectable()\nexport class IndifferentConfigService implements ContentMetadataConfig {\n\n    constructor(config: any) {}\n\n    public isGroupAllowed(groupName: string): boolean {\n        return true;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        return Object.keys(propertyGroups)\n            .map((groupName) => {\n                const propertyGroup = propertyGroups[groupName],\n                    properties = propertyGroup.properties;\n\n                return Object.assign({}, propertyGroup, {\n                    properties: Object.keys(properties).map(propertyName => properties[propertyName])\n                });\n            });\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n    ContentMetadataConfig,\n    LayoutOrientedConfigItem,\n    OrganisedPropertyGroup,\n    PropertyGroupContainer\n} from '../../interfaces/content-metadata.interfaces';\nimport { getProperty } from './property-group-reader';\n\n@Injectable()\nexport class LayoutOrientedConfigService implements ContentMetadataConfig {\n\n    constructor(private config: any) {}\n\n    public isGroupAllowed(groupName: string): boolean {\n        return this.getMatchingGroups(groupName).length > 0;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const layoutBlocks = this.config;\n\n        return layoutBlocks.map((layoutBlock) => {\n            const flattenedItems = this.flattenItems(layoutBlock.items),\n                properties = flattenedItems.reduce((props, explodedItem) => {\n                    const property = getProperty(propertyGroups, explodedItem.groupName, explodedItem.propertyName) || [];\n                    return props.concat(property);\n                }, []);\n\n            return {\n                title: layoutBlock.title,\n                properties\n            };\n        });\n    }\n\n    private flattenItems(items) {\n        return items.reduce((accumulator, item) => {\n            const properties = Array.isArray(item.properties) ? item.properties : [item.properties];\n            const flattenedProperties = properties.map(propertyName => {\n                return {\n                    groupName: item.aspect || item.type,\n                    propertyName\n                };\n            });\n\n            return accumulator.concat(flattenedProperties);\n        }, []);\n    }\n\n    private getMatchingGroups(groupName: string): LayoutOrientedConfigItem[] {\n        return this.config\n            .map(layoutBlock => layoutBlock.items)\n            .reduce((accumulator, items) => accumulator.concat(items), [])\n            .filter((item) => item.aspect === groupName || item.type === groupName);\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AppConfigService, LogService } from '@alfresco/adf-core';\nimport { AspectOrientedConfigService } from './aspect-oriented-config.service';\nimport { IndifferentConfigService } from './indifferent-config.service';\nimport { LayoutOrientedConfigService } from './layout-oriented-config.service';\nimport {\n    PresetConfig,\n    ContentMetadataConfig,\n    AspectOrientedConfig,\n    InDifferentConfig,\n    LayoutOrientedConfig\n} from '../../interfaces/content-metadata.interfaces';\n\n@Injectable()\nexport class ContentMetadataConfigFactory {\n\n    static readonly INDIFFERENT_PRESET = '*';\n    static readonly DEFAULT_PRESET_NAME = 'default';\n\n    constructor(private appConfigService: AppConfigService, private logService: LogService) {}\n\n    public get(presetName: string = 'default'): ContentMetadataConfig {\n        let presetConfig;\n        try {\n            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];\n        } catch {\n            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {\n                this.logService.error(`No content-metadata preset for: ${presetName}`);\n            }\n            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;\n        }\n\n        return this.createConfig(presetConfig);\n    }\n\n    private createConfig(presetConfig: PresetConfig): ContentMetadataConfig {\n        let config: ContentMetadataConfig;\n\n        if (this.isLayoutOrientedPreset(presetConfig)) {\n            config = new LayoutOrientedConfigService(<LayoutOrientedConfig> presetConfig);\n        } else if (this.isAspectOrientedPreset(presetConfig)) {\n            config = new AspectOrientedConfigService(<AspectOrientedConfig> presetConfig);\n        } else {\n            config = new IndifferentConfigService(<InDifferentConfig> presetConfig);\n        }\n\n        Object.freeze(config);\n        return config;\n    }\n\n    private isAspectOrientedPreset(presetConfig: PresetConfig): boolean {\n        return this.isObject(presetConfig);\n    }\n\n    private isLayoutOrientedPreset(presetConfig: PresetConfig): boolean {\n        return Array.isArray(presetConfig);\n    }\n\n    private isObject(x) {\n        return x != null && typeof x === 'object';\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { forkJoin } from 'rxjs/observable/forkJoin';\nimport { Observable } from 'rxjs/Observable';\nimport { defer } from 'rxjs/observable/defer';\nimport { PropertyGroup, PropertyGroupContainer } from '../interfaces/content-metadata.interfaces';\n\n@Injectable()\nexport class PropertyDescriptorsService {\n\n    constructor(private alfrescoApiService: AlfrescoApiService) {}\n\n    load(groupNames: string[]): Observable<PropertyGroupContainer> {\n        const groupFetchStreams = groupNames\n            .map(groupName => groupName.replace(':', '_'))\n            .map(groupName => defer( () => this.alfrescoApiService.classesApi.getClass(groupName)) );\n\n        return forkJoin(groupFetchStreams)\n            .map(this.convertToObject);\n    }\n\n    private convertToObject(propertyGroupsArray: PropertyGroup[]): PropertyGroupContainer {\n        return propertyGroupsArray.reduce((propertyGroups, propertyGroup) => {\n            return Object.assign({}, propertyGroups, {\n                [propertyGroup.name]: propertyGroup\n            });\n        }, {});\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { BasicPropertiesService } from './basic-properties.service';\nimport { Observable } from 'rxjs/Observable';\nimport { PropertyGroupTranslatorService } from './property-groups-translator.service';\nimport { CardViewItem } from '@alfresco/adf-core';\nimport { CardViewGroup } from '../interfaces/content-metadata.interfaces';\nimport { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';\nimport { PropertyDescriptorsService } from './property-descriptors.service';\n\n@Injectable()\nexport class ContentMetadataService {\n\n    constructor(private basicPropertiesService: BasicPropertiesService,\n                private contentMetadataConfigFactory: ContentMetadataConfigFactory,\n                private propertyGroupTranslatorService: PropertyGroupTranslatorService,\n                private propertyDescriptorsService: PropertyDescriptorsService) {\n    }\n\n    getBasicProperties(node: MinimalNodeEntryEntity): Observable<CardViewItem[]> {\n        return Observable.of(this.basicPropertiesService.getProperties(node));\n    }\n\n    getGroupedProperties(node: MinimalNodeEntryEntity, presetName: string = 'default'): Observable<CardViewGroup[]> {\n        let groupedProperties = Observable.of([]);\n\n        if (node.aspectNames) {\n            const config = this.contentMetadataConfigFactory.get(presetName),\n                groupNames = node.aspectNames\n                    .concat(node.nodeType)\n                    .filter(groupName => config.isGroupAllowed(groupName));\n\n            if (groupNames.length > 0) {\n                groupedProperties = this.propertyDescriptorsService.load(groupNames)\n                    .map(groups => config.reorganiseByConfig(groups))\n                    .map(groups => this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties));\n            }\n        }\n\n        return groupedProperties;\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, OnInit, SimpleChanges, SimpleChange, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport { CardViewItem, NodesApiService, LogService, CardViewUpdateService, AlfrescoApiService } from '@alfresco/adf-core';\nimport { ContentMetadataService } from '../../services/content-metadata.service';\nimport { CardViewGroup } from '../../interfaces/content-metadata.interfaces';\n\n@Component({\n    selector: 'adf-content-metadata',\n    template: `<div class=\"adf-metadata-properties\">\n    <mat-accordion displayMode=\"flat\" [multi]=\"multi\">\n        <mat-expansion-panel [expanded]=\"!expanded\" [hideToggle]=\"!expanded\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>\n                    {{ 'CORE.METADATA.BASIC.HEADER' | translate }}\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <adf-card-view\n                [properties]=\"basicProperties$ | async\"\n                [editable]=\"editable\"\n                [displayEmpty]=\"displayEmpty\">\n            </adf-card-view>\n        </mat-expansion-panel>\n\n        <ng-container *ngIf=\"expanded\">\n            <ng-container *ngIf=\"groupedProperties$ | async; else loading; let groupedProperties\">\n                <div *ngFor=\"let group of groupedProperties\" class=\"adf-metadata-grouped-properties-container\">\n                    <mat-expansion-panel>\n                        <mat-expansion-panel-header>\n                            <mat-panel-title>\n                                {{ group.title | translate }}\n                            </mat-panel-title>\n                        </mat-expansion-panel-header>\n\n                        <adf-card-view\n                            [properties]=\"group.properties\"\n                            [editable]=\"editable\"\n                            [displayEmpty]=\"displayEmpty\">\n                        </adf-card-view>\n                    </mat-expansion-panel>\n                </div>\n            </ng-container>\n            <ng-template #loading>\n                <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n            </ng-template>\n        </ng-container>\n    </mat-accordion>\n</div>`,\n    styles: [``],\n    host: { 'class': 'adf-content-metadata' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentMetadataComponent implements OnChanges, OnInit {\n\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    @Input()\n    editable: boolean = false;\n\n    @Input()\n    displayEmpty: boolean = false;\n\n    @Input()\n    expanded: boolean = false;\n\n    @Input()\n    multi = false;\n\n    @Input()\n    preset: string;\n\n    nodeHasBeenUpdated: boolean = false;\n    basicProperties$: Observable<CardViewItem[]>;\n    groupedProperties$: Observable<CardViewGroup[]>;\n\n    constructor(private contentMetadataService: ContentMetadataService,\n                private cardViewUpdateService: CardViewUpdateService,\n                private nodesApi: NodesApiService,\n                private logService: LogService,\n                private apiService: AlfrescoApiService) {}\n\n    ngOnInit() {\n        this.cardViewUpdateService.itemUpdated$\n            .switchMap(this.saveNode.bind(this))\n            .subscribe(\n                (node) => {\n                    this.nodeHasBeenUpdated = true;\n                    this.node = node;\n                    this.apiService.nodeUpdated.next(node);\n                },\n                error => this.logService.error(error)\n            );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const nodeChange: SimpleChange = changes['node'];\n        if (nodeChange || this.nodeHasBeenUpdated) {\n            const node = nodeChange && nodeChange.currentValue || this.node;\n            this.nodeHasBeenUpdated = false;\n\n            this.basicProperties$ = this.contentMetadataService.getBasicProperties(node);\n            this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);\n        }\n    }\n\n    private saveNode({ changed: nodeBody }): Observable<MinimalNodeEntryEntity> {\n        return this.nodesApi.updateNode(this.node.id, nodeBody);\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../material.module';\nimport { CardViewModule } from '@alfresco/adf-core';\nimport { ContentMetadataComponent } from './components/content-metadata/content-metadata.component';\nimport { ContentMetadataCardComponent } from './components/content-metadata-card/content-metadata-card.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        FlexLayoutModule,\n        CardViewModule\n    ],\n    exports: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ],\n    declarations: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ]\n})\nexport class ContentMetadataModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PermissionElement } from 'alfresco-js-api';\n\nexport class PermissionDisplayModel implements PermissionElement {\n\n    authorityId?: string;\n    name?: string;\n    accessStatus?: PermissionElement.AccessStatusEnum;\n    isInherited: boolean = false;\n    icon: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.authorityId = obj.authorityId;\n            this.name = obj.name;\n            this.accessStatus = obj.accessStatus;\n            this.isInherited = obj.isInherited !== null && obj.isInherited !== undefined ? obj.isInherited : false;\n            this.icon = obj.icon ? obj.icon : 'lock_open';\n        }\n    }\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { AlfrescoApiService, SearchService, NodesApiService } from '@alfresco/adf-core';\nimport { QueryBody, MinimalNodeEntryEntity, PathElement, GroupMemberEntry, GroupsPaging, GroupMemberPaging, PermissionElement } from 'alfresco-js-api';\nimport 'rxjs/add/operator/switchMap';\n\n@Injectable()\nexport class NodePermissionService {\n\n    constructor(private apiService: AlfrescoApiService,\n                private searchApiService: SearchService,\n                private nodeService: NodesApiService) {\n    }\n\n    getNodeRoles(node: MinimalNodeEntryEntity): Observable<string[]> {\n        const retrieveSiteQueryBody: QueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);\n        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)\n            .switchMap((siteNodeList: any) => {\n                if ( siteNodeList.list.entries.length > 0 ) {\n                    let siteName = siteNodeList.list.entries[0].entry.name;\n                    return this.getGroupMembersBySiteName(siteName);\n                } else {\n                    return Observable.of(node.permissions.settable);\n                }\n            });\n    }\n\n    updatePermissionRoles(node: MinimalNodeEntryEntity, updatedPermissionRole: PermissionElement): Observable<MinimalNodeEntryEntity> {\n        let permissionBody = { permissions: { locallySet: []} };\n        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(updatedPermissionRole.authorityId);\n        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);\n        if (index !== -1) {\n            permissionBody.permissions.locallySet[index] = updatedPermissionRole;\n        } else {\n            permissionBody.permissions.locallySet.push(updatedPermissionRole);\n        }\n        return this.nodeService.updateNode(node.id, permissionBody);\n    }\n\n    private getGroupMembersBySiteName(siteName: string): Observable<string[]> {\n        const groupName = 'GROUP_site_' + siteName;\n        return this.getGroupMemeberByGroupName(groupName)\n            .map((res: GroupsPaging) => {\n                let displayResult: string[] = [];\n                res.list.entries.forEach((member: GroupMemberEntry) => {\n                    displayResult.push(this.formattedRoleName(member.entry.displayName, 'site_' + siteName));\n                });\n                return displayResult;\n            });\n    }\n\n    getGroupMemeberByGroupName(groupName: string, opts?: any): Observable<GroupMemberPaging> {\n        return Observable.fromPromise(this.apiService.groupsApi.getGroupMembers(groupName, opts));\n    }\n\n    private formattedRoleName(displayName, siteName): string {\n        return displayName.replace(siteName + '_', '');\n    }\n\n    private buildRetrieveSiteQueryBody(nodePath: PathElement[]): QueryBody {\n        const pathNames = nodePath.map((node: PathElement) => 'name: \"' + node.name + '\"');\n        const buildedPathNames = pathNames.join(' OR ');\n        return {\n            'query': {\n                'query': buildedPathNames\n            },\n            'paging': {\n                'maxItems': 100,\n                'skipCount': 0\n            },\n            'include': ['aspectNames', 'properties'],\n            'filterQueries': [\n                {\n                    'query':\n                        \"TYPE:'st:site'\"\n                }\n            ]\n        };\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { NodesApiService } from '@alfresco/adf-core';\nimport { MinimalNodeEntryEntity, PermissionElement } from 'alfresco-js-api';\nimport { PermissionDisplayModel } from '../../models/permission.model';\nimport { NodePermissionService } from '../../services/node-permission.service';\n\n@Component({\n    selector: 'adf-permission-list',\n    template: `<div id=\"adf-permission-display-container\" class=\"adf-display-permission-container\">\n    <adf-datatable [rows]=\"permissionList\" class=\"adf-datatable-permission\">\n        <data-columns>\n            <data-column key=\"icon\" type=\"icon\" [sortable]=\"false\">\n            </data-column>\n            <data-column title=\"{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.AUTHORITY_ID' | translate}}\" key=\"authorityId\"></data-column>\n            <data-column title=\"{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.ROLE' | translate}}\" key=\"name\">\n                <ng-template let-entry=\"$implicit\">\n                    <mat-form-field *ngIf=\"!entry.row.getValue('isInherited') else show_only_label\">\n                        <mat-select id=\"adf-select-role-permission\"\n                                    value=\"{{entry.data.getValue(entry.row, entry.col)}}\"\n                                    (selectionChange)=\"saveNewRole($event, entry.row.obj)\">\n                          <mat-option *ngFor=\"let role of settableRoles\" [value]=\"role\">\n                            {{ role }}\n                          </mat-option>\n                        </mat-select>\n                      </mat-form-field>\n                      <ng-template #show_only_label>\n                          <span>{{entry.data.getValue(entry.row, entry.col)}}</span>\n                      </ng-template>\n                </ng-template>\n            </data-column>\n            <data-column title=\"{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.INHERITED' | translate}}\" key=\"isInherited\">\n                <ng-template let-entry=\"$implicit\">\n                    <mat-chip-list>\n                        <mat-chip *ngIf=\"!!entry.data.getValue(entry.row, entry.col) else locally_set_chip\"\n                                id=\"adf-permission-inherited-label\"\n                                color=\"primary\" selected=\"true\">{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.INHERITED' | translate}}</mat-chip>\n                    </mat-chip-list>\n                    <ng-template #locally_set_chip>\n                            <mat-chip-list>\n                                    <mat-chip id=\"adf-permission-locallyset-label\"\n                                              color=\"accent\" selected=\"true\">\n                                              {{'PERMISSION_MANAGER.PERMISSION_DISPLAY.LOCALLY_SET' | translate}}\n                                    </mat-chip>\n                            </mat-chip-list>\n                    </ng-template>\n                </ng-template>\n            </data-column>\n        </data-columns>\n    </adf-datatable>\n</div>\n\n`,\n    styles: [``],\n    encapsulation: ViewEncapsulation.None\n})\nexport class PermissionListComponent implements OnInit {\n\n    @Input()\n    nodeId: string = '';\n\n    @Output()\n    update: EventEmitter<PermissionElement> = new EventEmitter();\n\n    permissionList: PermissionDisplayModel[];\n    settableRoles: any[];\n    actualNode: MinimalNodeEntryEntity;\n\n    constructor(private nodeService: NodesApiService,\n                private nodePermissionService: NodePermissionService) {\n\n    }\n\n    ngOnInit() {\n        this.fetchNodePermissions();\n    }\n\n    reload() {\n        this.fetchNodePermissions();\n    }\n\n    private fetchNodePermissions() {\n        this.nodeService.getNode(this.nodeId).subscribe((node: MinimalNodeEntryEntity) => {\n            this.actualNode = node;\n            this.permissionList = this.getPermissionList(node);\n            this.nodePermissionService.getNodeRoles(node).subscribe((settableList: string[]) => {\n                this.settableRoles =  settableList;\n            });\n        });\n    }\n\n    private getPermissionList(node: MinimalNodeEntryEntity): PermissionDisplayModel[] {\n        let allPermissions: PermissionDisplayModel[] = [];\n        if (node.permissions.locallySet) {\n            node.permissions.locallySet.map((element) => {\n                let permission = new PermissionDisplayModel(element);\n                allPermissions.push(permission);\n            });\n        }\n        if (node.permissions.inherited) {\n            node.permissions.inherited.map((element) => {\n                let permissionInherited = new PermissionDisplayModel(element);\n                permissionInherited.isInherited = true;\n                allPermissions.push(permissionInherited);\n            });\n        }\n        return allPermissions;\n    }\n\n    saveNewRole(event: any, permissionRow: PermissionDisplayModel) {\n        let updatedPermissionRole: PermissionElement = this.buildUpdatedPermission(event.value, permissionRow);\n        this.nodePermissionService.updatePermissionRoles(this.actualNode, updatedPermissionRole)\n            .subscribe((node: MinimalNodeEntryEntity) => {\n                this.update.emit(updatedPermissionRole);\n            });\n    }\n\n    private buildUpdatedPermission(newRole: string, permissionRow: PermissionDisplayModel): PermissionElement {\n        let permissionRole: PermissionElement = {};\n        permissionRole.accessStatus = permissionRow.accessStatus;\n        permissionRole.name = newRole;\n        permissionRole.authorityId = permissionRow.authorityId;\n        return permissionRole;\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\nimport { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { NodesApiService } from '@alfresco/adf-core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\n\n@Directive({\n    selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',\n    host: {\n        'role': 'button',\n        '(click)': 'onInheritPermissionClicked()'\n    }\n})\nexport class InheritPermissionDirective {\n\n    @Input()\n    nodeId: string;\n\n    @Output()\n    updated: EventEmitter<MinimalNodeEntryEntity> = new EventEmitter<MinimalNodeEntryEntity>();\n\n    constructor(private nodeService: NodesApiService) {\n    }\n\n    onInheritPermissionClicked() {\n        this.nodeService.getNode(this.nodeId).subscribe((node: MinimalNodeEntryEntity) => {\n            const nodeBody = { permissions : {isInheritanceEnabled : !node.permissions.isInheritanceEnabled} };\n            this.nodeService.updateNode(this.nodeId, nodeBody, {include: ['permissions'] }).subscribe((nodeUpdated: MinimalNodeEntryEntity) => {\n                this.updated.emit(nodeUpdated);\n            });\n        });\n    }\n\n}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../material.module';\nimport { PermissionListComponent } from './components/permission-list/permission-list.component';\nimport { DataTableModule, DataColumnModule } from '@alfresco/adf-core';\nimport { InheritPermissionDirective } from './components/inherited-button.directive';\nimport { NodePermissionService } from './services/node-permission.service';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        TranslateModule,\n        DataTableModule,\n        DataColumnModule\n    ],\n    declarations: [\n        PermissionListComponent,\n        InheritPermissionDirective\n    ],\n    providers: [\n        NodePermissionService\n    ],\n    exports: [\n        PermissionListComponent,\n        InheritPermissionDirective\n    ]\n})\nexport class PermissionManagerModule {}\n",
    "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';\n\nimport { MaterialModule } from './material.module';\n\nimport { SocialModule } from './social/social.module';\nimport { TagModule } from './tag/tag.module';\nimport { WebScriptModule } from './webscript/webscript.module';\nimport { DocumentListModule } from './document-list/document-list.module';\nimport { UploadModule } from './upload/upload.module';\nimport { SearchModule } from './search/search.module';\nimport { SitesDropdownModule } from './site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from './breadcrumb/breadcrumb.module';\nimport { VersionManagerModule } from './version-manager/version-manager.module';\nimport { ContentNodeSelectorModule } from './content-node-selector/content-node-selector.module';\nimport { ContentDirectiveModule } from './directives/content-directive.module';\nimport { DialogModule } from './dialogs/dialog.module';\nimport { FolderDirectiveModule } from './folder-directive/folder-directive.module';\nimport { ContentMetadataModule } from './content-metadata/content-metadata.module';\nimport { PermissionManagerModule } from './permission-manager/permission-manager.module';\nimport { RatingService } from './social/services/rating.service';\nimport { ContentMetadataService } from './content-metadata/services/content-metadata.service';\nimport { PropertyDescriptorsService } from './content-metadata/services/property-descriptors.service';\nimport { ContentMetadataConfigFactory } from './content-metadata/services/config/content-metadata-config.factory';\nimport { BasicPropertiesService } from './content-metadata/services/basic-properties.service';\nimport { PropertyGroupTranslatorService } from './content-metadata/services/property-groups-translator.service';\nimport { SearchQueryBuilderService } from './search/search-query-builder.service';\n\n@NgModule({\n    imports: [\n        CoreModule,\n        SocialModule,\n        TagModule,\n        CommonModule,\n        WebScriptModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DialogModule,\n        SearchModule,\n        DocumentListModule,\n        UploadModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentMetadataModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'adf-content-services',\n                source: 'assets/adf-content-services'\n            }\n        },\n        RatingService,\n        ContentMetadataService,\n        PropertyDescriptorsService,\n        ContentMetadataConfigFactory,\n        BasicPropertiesService,\n        PropertyGroupTranslatorService,\n        SearchQueryBuilderService\n    ],\n    exports: [\n        CoreModule,\n        SocialModule,\n        TagModule,\n        WebScriptModule,\n        DocumentListModule,\n        UploadModule,\n        SearchModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentMetadataModule,\n        DialogModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule\n    ]\n})\nexport class ContentModule {\n}\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "__generator",
    "thisArg",
    "body",
    "f",
    "y",
    "t",
    "g",
    "_",
    "label",
    "sent",
    "trys",
    "ops",
    "next",
    "verb",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "n",
    "v",
    "op",
    "TypeError",
    "call",
    "done",
    "value",
    "pop",
    "length",
    "push",
    "e",
    "step",
    "__read",
    "o",
    "m",
    "r",
    "i",
    "ar",
    "error",
    "__spread",
    "arguments",
    "concat",
    "DownloadZipDialogComponent",
    "apiService",
    "dialogRef",
    "data",
    "logService",
    "cancelled",
    "ngOnInit",
    "nodeIds",
    "log",
    "downloadZip",
    "cancelDownload",
    "close",
    "_this",
    "promise",
    "getInstance",
    "core",
    "downloadsApi",
    "createDownload",
    "on",
    "progress",
    "entry",
    "id",
    "url_1",
    "content",
    "getContentUrl",
    "nodesApi",
    "getNode",
    "then",
    "downloadNode",
    "fileName",
    "name",
    "waitAndDownload",
    "downloadId",
    "url",
    "getDownload",
    "downloadEntry",
    "status",
    "download",
    "setTimeout",
    "link",
    "document",
    "createElement",
    "style",
    "display",
    "href",
    "appendChild",
    "click",
    "removeChild",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "host",
    "class",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "AlfrescoApiService",
    "MatDialogRef",
    "undefined",
    "decorators",
    "Inject",
    "MAT_DIALOG_DATA",
    "LogService",
    "NodeDownloadDirective",
    "dialog",
    "onClick",
    "downloadNodes",
    "nodes",
    "selection",
    "node",
    "isFile",
    "downloadFile",
    "isFolder",
    "nodeId",
    "map",
    "open",
    "width",
    "disableClose",
    "Directive",
    "MatDialog",
    "Input",
    "HostListener",
    "ShareDialogComponent",
    "sharedLinksApiService",
    "isFileShared",
    "isDisabled",
    "baseShareUrl",
    "properties",
    "sharedId",
    "createSharedLinks",
    "cancelShare",
    "onSlideShareChange",
    "event",
    "checked",
    "deleteSharedLink",
    "subscribe",
    "sharedLink",
    "SharedLinksApiService",
    "NodeSharedDirective",
    "elementRef",
    "shareNode",
    "setDisableAttribute",
    "ngOnChanges",
    "disable",
    "nativeElement",
    "disabled",
    "modules",
    "MatButtonModule",
    "MatChipsModule",
    "MatDialogModule",
    "MatIconModule",
    "MatCardModule",
    "MatInputModule",
    "MatListModule",
    "MatProgressSpinnerModule",
    "MatProgressBarModule",
    "MatRippleModule",
    "MatMenuModule",
    "MatOptionModule",
    "MatExpansionModule",
    "MatSelectModule",
    "MatCheckboxModule",
    "MatDatepickerModule",
    "MatSlideToggleModule",
    "ElementRef",
    "MaterialModule",
    "NgModule",
    "imports",
    "exports",
    "DocumentListService",
    "authService",
    "contentService",
    "thumbnailService",
    "getNodesPromise",
    "folder",
    "opts",
    "includeFields",
    "rootNodeId",
    "ROOT_ID",
    "rootFolderId",
    "params",
    "includeSource",
    "include",
    "tslib_1.__spread",
    "filter",
    "element",
    "index",
    "array",
    "indexOf",
    "relativePath",
    "maxItems",
    "skipCount",
    "getNodeChildren",
    "deleteNode",
    "Observable",
    "fromPromise",
    "copyNode",
    "targetParentId",
    "catch",
    "err",
    "handleError",
    "moveNode",
    "createFolder",
    "parentId",
    "observable",
    "getFolder",
    "res",
    "getFolderNode",
    "getNodeInfo",
    "getDocumentThumbnailUrl",
    "getMimeTypeIcon",
    "mimeType",
    "getDefaultMimeTypeIcon",
    "hasPermission",
    "permission",
    "Injectable",
    "AuthenticationService",
    "ContentService",
    "ThumbnailService",
    "ContentNodeSelectorComponent",
    "title",
    "currentFolderId",
    "dropdownHideMyFiles",
    "dropdownSiteList",
    "rowFilter",
    "imageResolver",
    "buttonActionName",
    "actionName",
    "toUpperCase",
    "select",
    "complete",
    "onSelect",
    "nodeList",
    "chosenNode",
    "pageSize",
    "NodeLockDialogComponent",
    "formBuilder",
    "alfrescoApi",
    "nodeName",
    "form",
    "group",
    "isLocked",
    "allowOwner",
    "isTimeLock",
    "time",
    "moment",
    "defineProperty",
    "get",
    "duration",
    "diff",
    "asSeconds",
    "timeToExpire",
    "lockTimeInSeconds",
    "lifetime",
    "toggleLock",
    "lockNode",
    "nodeBodyLock",
    "unlockNode",
    "submit",
    "onError",
    "FormBuilder",
    "Optional",
    "ContentNodeDialogService",
    "documentListService",
    "siteService",
    "translation",
    "EventEmitter",
    "openFileBrowseDialogByFolderId",
    "folderNodeId",
    "switchMap",
    "openUploadFileDialog",
    "openLockNodeDialog",
    "contentEntry",
    "Subject",
    "PermissionsEnum",
    "LOCK",
    "emit",
    "openFileBrowseDialogBySite",
    "getSites",
    "response",
    "list",
    "entries",
    "guid",
    "openFolderBrowseDialogBySite",
    "openFolderBrowseDialogByFolderId",
    "openUploadFolderDialog",
    "openCopyMoveDialog",
    "action",
    "bind",
    "getTitleTranslation",
    "isSelectionValid",
    "isCopyMoveSelectionValid",
    "openContentNodeDialog",
    "errors",
    "Error",
    "JSON",
    "stringify",
    "statusCode",
    "instant",
    "hasPermissionOnNodeFolder",
    "isNodeFile",
    "currentPanelClass",
    "chosenWidth",
    "panelClass",
    "row",
    "col",
    "currentNodeId",
    "isNodeFolder",
    "hasEntityCreatePermission",
    "isSite",
    "nodeType",
    "closeAll",
    "SitesService",
    "TranslationService",
    "Output",
    "NodeLockDirective",
    "renderer",
    "contentNodeDialogService",
    "preventDefault",
    "ngAfterViewInit",
    "setProperty",
    "Renderer2",
    "ContentDirectiveModule",
    "CommonModule",
    "declarations",
    "RatingService",
    "getRating",
    "ratingType",
    "ratingsApi",
    "postRating",
    "vote",
    "ratingBody",
    "myRating",
    "rate",
    "deleteRating",
    "removeRating",
    "console",
    "RatingComponent",
    "ratingService",
    "average",
    "changeVote",
    "stars",
    "ratingObserver",
    "aggregate",
    "calculateStars",
    "fill",
    "updateVote",
    "LikeComponent",
    "likesCounter",
    "isLike",
    "clean",
    "numberOfRatings",
    "ratedAt",
    "likeClick",
    "SocialModule",
    "TagService",
    "refresh",
    "getTagsByNodeId",
    "tagsApi",
    "getNodeTags",
    "getAllTheTags",
    "getTags",
    "addTag",
    "tagName",
    "tagBody",
    "TagBody",
    "tag",
    "promiseAdd",
    "removeTag",
    "promiseRemove",
    "TagActionsComponent",
    "tagService",
    "translateService",
    "successAdd",
    "result",
    "disableAddTag",
    "refreshTag",
    "tagsEntries",
    "searchTag",
    "newTagName",
    "errorMsg",
    "searchTagName",
    "find",
    "currentTag",
    "cleanErrorMsg",
    "TagListComponent",
    "TagNodeListComponent",
    "results",
    "TagModule",
    "TranslateModule",
    "FormsModule",
    "ReactiveFormsModule",
    "providers",
    "WebscriptComponent",
    "showData",
    "contextRoot",
    "servicePath",
    "contentType",
    "success",
    "showError",
    "changes",
    "Promise",
    "resolve",
    "reject",
    "webScript",
    "executeWebScript",
    "scriptPath",
    "scriptArgs",
    "webScriptdata",
    "showDataAsDataTable",
    "schema",
    "ObjectDataTableAdapter",
    "generateSchema",
    "isDataTableContent",
    "WebScriptModule",
    "PipeModule",
    "DataTableModule",
    "ShareDataRow",
    "obj",
    "permissionsStyle",
    "cache",
    "isSelected",
    "cssClass",
    "ERR_OBJECT_NOT_FOUND",
    "isDropTarget",
    "isFolderAndHasPermissionToUpload",
    "getPermissionClass",
    "nodeEntity",
    "permissionsClasses",
    "forEach",
    "currentPermissionsStyle",
    "applyPermissionStyleToFolder",
    "applyPermissionStyleToFile",
    "css",
    "cacheValue",
    "key",
    "getValue",
    "ObjectUtils",
    "hasValue",
    "ShareDataTableAdapter",
    "sorting",
    "ERR_ROW_NOT_FOUND",
    "ERR_COL_NOT_FOUND",
    "thumbnails",
    "rows",
    "columns",
    "getRows",
    "setRows",
    "sort",
    "getColumns",
    "setColumns",
    "dataRow",
    "formatDate",
    "format",
    "resolved",
    "TimeAgoPipe",
    "transform",
    "DatePipe",
    "getSorting",
    "setSorting",
    "sortRows",
    "direction",
    "DataSorting",
    "setFilter",
    "setImageResolver",
    "resolver",
    "options",
    "includes",
    "numeric",
    "a",
    "left",
    "Date",
    "valueOf",
    "toString",
    "right",
    "localeCompare",
    "loadPage",
    "page",
    "merge",
    "item",
    "sortable",
    "c",
    "presetsDefaultModel",
    "-trashcan-",
    "srTitle",
    "-sites-",
    "-mysites-",
    "-favorites-",
    "-recent-",
    "-sharedlinks-",
    "default",
    "ContentActionModel",
    "disableWithNoPermission",
    "icon",
    "handler",
    "execute",
    "target",
    "Document",
    "Folder",
    "All",
    "DocumentActionModel",
    "_super",
    "json",
    "tslib_1.__extends",
    "FolderActionModel",
    "NodeEntityEvent",
    "entity",
    "BaseEvent",
    "NodeEntryEvent",
    "CustomResourcesService",
    "CREATE_PERMISSION",
    "getRecentFiles",
    "personId",
    "pagination",
    "observer",
    "peopleApi",
    "getPerson",
    "person",
    "username",
    "query",
    "language",
    "filterQueries",
    "field",
    "ascending",
    "paging",
    "searchApi",
    "search",
    "serachResult",
    "loadFavorites",
    "includeFieldsRequest",
    "getIncludesFields",
    "where",
    "favoritesApi",
    "getFavorites",
    "_b",
    "file",
    "cm:title",
    "cm:description",
    "description",
    "loadMemberSites",
    "getSiteMembership",
    "site",
    "allowableOperations",
    "loadSites",
    "sitesApi",
    "loadTrashcan",
    "getDeletedNodes",
    "loadSharedLinks",
    "sharedLinksApi",
    "findSharedLinks",
    "isCustomSource",
    "folderId",
    "isCustomSources",
    "loadFolderByNodeId",
    "getCorrespondingNodeIds",
    "targetGuid",
    "recentFiles",
    "recentFilesIdS",
    "of",
    "DocumentListComponent",
    "ngZone",
    "appConfig",
    "preferences",
    "customResourcesService",
    "DisplayMode",
    "List",
    "locationFormat",
    "navigate",
    "showHeader",
    "navigationMode",
    "DOUBLE_CLICK_NAVIGATION",
    "selectionMode",
    "multiselect",
    "contentActions",
    "contentActionsPosition",
    "contextMenuActions",
    "emptyFolderImageUrl",
    "allowDropFiles",
    "loading",
    "folderNode",
    "enableInfiniteScrolling",
    "nodeClick",
    "nodeDblClick",
    "folderChange",
    "preview",
    "ready",
    "actions",
    "contextActionHandler",
    "noPermission",
    "layoutPresets",
    "getContextActions",
    "getNodeActions",
    "currentAction",
    "model",
    "subject",
    "getDefaultPageSizes",
    "columnList",
    "getDefaultSorting",
    "defaultSorting",
    "getLayoutPreset",
    "ObjectDataColumn",
    "paginationSize",
    "_pagination",
    "defaultPagination",
    "totalItems",
    "hasMoreItems",
    "BehaviorSubject",
    "isEmptyTemplateDefined",
    "dataTable",
    "emptyFolderTemplate",
    "isNoPermissionTemplateDefined",
    "noPermissionTemplate",
    "isMobile",
    "test",
    "navigator",
    "userAgent",
    "isEmpty",
    "loadLayoutPresets",
    "contextActionHandlerSubscription",
    "val",
    "contextActionCallback",
    "enforceSingleClickNavigationForMobile",
    "ngAfterContentInit",
    "hasCustomLayout",
    "setupDefaultColumns",
    "resetSelection",
    "currentValue",
    "resetNewFolderPagination",
    "loadFolder",
    "previousValue",
    "onDataReady",
    "loadFolderNodesByFolderNodeId",
    "reload",
    "run",
    "executeContentAction",
    "actionsByTarget",
    "toLowerCase",
    "disableActionsWithNoPermissions",
    "onShowContextMenu",
    "performNavigation",
    "canNavigateFolder",
    "updateFolderData",
    "performCustomSourceNavigation",
    "updateCustomSourceData",
    "handlerSub",
    "onPageLoaded",
    "nodePaging",
    "preset",
    "onPreviewFile",
    "onNodeClick",
    "domEvent",
    "CustomEvent",
    "detail",
    "sender",
    "bubbles",
    "dispatchEvent",
    "defaultPrevented",
    "SINGLE_CLICK_NAVIGATION",
    "onNodeDblClick",
    "onNodeSelect",
    "onNodeUnselect",
    "onShowRowContextMenu",
    "onShowRowActionsMenu",
    "onExecuteRowAction",
    "externalSettings",
    "assign",
    "updatePagination",
    "navigateTo",
    "ngOnDestroy",
    "unsubscribe",
    "message",
    "parse",
    "DEFAULT_PAGE_SIZE",
    "NgZone",
    "AppConfigService",
    "UserPreferencesService",
    "ContentChild",
    "DataColumnListComponent",
    "rowStyle",
    "rowStyleClass",
    "ViewChild",
    "ContentColumnListComponent",
    "documentList",
    "registerColumn",
    "column",
    "ContentColumnComponent",
    "register",
    "TemplateRef",
    "PermissionModel",
    "NodeActionsService",
    "contentDialogService",
    "copyContent",
    "doFileOperation",
    "copyFolder",
    "moveContent",
    "moveFolder",
    "selections",
    "DocumentActionsService",
    "nodeActionsService",
    "permissionEvent",
    "handlers",
    "setupActionHandlers",
    "getHandler",
    "lkey",
    "setHandler",
    "canExecuteAction",
    "actionObservable",
    "prepareHandlers",
    "fileOperationMessage",
    "handlerObservable",
    "FolderActionsService",
    "ContentActionListComponent",
    "registerAction",
    "ContentActionComponent",
    "documentActions",
    "folderActions",
    "ContentActionTarget",
    "generateAction",
    "getSystemHandler",
    "ltarget",
    "EmptyFolderContentDirective",
    "noContentTemplate",
    "NoPermissionContentDirective",
    "NodePaging",
    "NodePagingList",
    "NodeMinimalEntry",
    "Pagination",
    "NodeMinimal",
    "UserInfo",
    "ContentInfo",
    "PathInfoEntity",
    "PathElementEntity",
    "PermissionStyleModel",
    "FileUploadingListComponent",
    "uploadService",
    "FileUploadStatus",
    "files",
    "cancelFile",
    "cancelUpload",
    "removeFile",
    "notifyError",
    "cancelAllFiles",
    "getUploadingFiles",
    "deletedFiles",
    "Complete",
    "forkJoin",
    "apply",
    "isUploadCompleted",
    "isUploadCancelled",
    "Boolean",
    "some",
    "Starting",
    "Progress",
    "Pending",
    "every",
    "Aborted",
    "Cancelled",
    "Deleted",
    "permanent",
    "_i",
    "messageError",
    "total",
    "UploadService",
    "NodesApiService",
    "FileUploadingDialogComponent",
    "changeDetecor",
    "position",
    "filesUploadingList",
    "isDialogActive",
    "totalCompleted",
    "totalErrors",
    "isDialogMinimized",
    "isConfirmation",
    "listSubscription",
    "queueChanged",
    "fileList",
    "counterSubscription",
    "fileUploadComplete",
    "fileUploadDeleted",
    "totalComplete",
    "detectChanges",
    "errorSubscription",
    "fileUploadError",
    "totalError",
    "fileUploadSubscription",
    "fileUpload",
    "fileDeleted",
    "objId",
    "toggleConfirmation",
    "cancelAllUploads",
    "uploadList",
    "toggleMinimized",
    "clearQueue",
    "ChangeDetectorRef",
    "FileUploadingListRowComponent",
    "cancel",
    "remove",
    "onCancel",
    "onRemove",
    "UploadBase",
    "acceptedFilesType",
    "isFileAcceptable",
    "split",
    "ext",
    "replace",
    "extension",
    "UploadButtonComponent",
    "uploadFolders",
    "multipleFiles",
    "versioning",
    "tooltip",
    "permissionValue",
    "checkPermission",
    "isButtonDisabled",
    "onFilesAdded",
    "$event",
    "FileUtils",
    "toFileArray",
    "currentTarget",
    "uploadFiles",
    "onDirectoryAdded",
    "latestFilesAdded",
    "createFileModel",
    "isFileSizeAcceptable",
    "addToQueue",
    "uploadFilesInTheQueue",
    "FileModel",
    "newVersion",
    "path",
    "webkitRelativePath",
    "acceptableSize",
    "isFileSizeAllowed",
    "isMaxFileSizeDefined",
    "isFileSizeCorrect",
    "maxFilesSize",
    "size",
    "hasCreatePermission",
    "viewProviders",
    "provide",
    "EXTENDIBLE_COMPONENT",
    "useExisting",
    "forwardRef",
    "staticTitle",
    "UploadVersionButtonComponent",
    "fileModel",
    "newVersionBaseName",
    "UploadDragAreaComponent",
    "notificationService",
    "onFilesDropped",
    "fileModels",
    "addNodeInUploadQueue",
    "onFilesEntityDropped",
    "fullPath",
    "onFolderEntityDropped",
    "isDirectory",
    "flattern",
    "relativeFolder",
    "showUndoNotificationBar",
    "messageTranslate",
    "actionTranslate",
    "openSnackMessageAction",
    "onAction",
    "isDroppable",
    "onUploadFiles",
    "stopPropagation",
    "parentId_1",
    "fileInfo",
    "isPermitted",
    "NotificationService",
    "FileDraggableDirective",
    "el",
    "enabled",
    "filesDropped",
    "filesEntityDropped",
    "folderEntityDropped",
    "cssClassName",
    "runOutsideAngular",
    "addEventListener",
    "onDragEnter",
    "onDragOver",
    "onDragLeave",
    "onDropFiles",
    "removeEventListener",
    "items",
    "dataTransfer",
    "webkitGetAsEntry",
    "classList",
    "add",
    "UploadModule",
    "DocumentListModule",
    "ToolbarModule",
    "FlexLayoutModule",
    "PaginationModule",
    "SearchQueryBuilderService",
    "api",
    "updated",
    "executed",
    "categories",
    "queryFragments",
    "fields",
    "ranges",
    "config",
    "scope",
    "locations",
    "addFilterQuery",
    "q",
    "removeFilterQuery",
    "getFacetQuery",
    "facetQueries",
    "update",
    "buildQuery",
    "generator",
    "P",
    "_arguments",
    "fulfilled",
    "rejected",
    "facet",
    "customQuery",
    "customFields",
    "customFields_1",
    "tslib_1.__values",
    "customFields_1_1",
    "facetFields",
    "limits",
    "SearchComponent",
    "searchService",
    "_elementRef",
    "displayWith",
    "maxResults",
    "skipResults",
    "searchTerm",
    "resultLoaded",
    "showPanel",
    "_isOpen",
    "keyPressedStream",
    "_classList",
    "asObservable",
    "debounceTime",
    "searchedWord",
    "loadSearchResults",
    "dataLoaded",
    "onSearchDataLoaded",
    "onSearchDataError",
    "set",
    "className",
    "trim",
    "setVisibility",
    "queryBody",
    "hasDifferentQueryBody",
    "resetResults",
    "cleanResults",
    "previousQueryBody",
    "currentQueryBody",
    "searchByQueryBody",
    "isOpen",
    "hidePanel",
    "preserveWhitespaces",
    "exportAs",
    "SearchService",
    "panel",
    "EmptySearchResultComponent",
    "SearchControlComponent",
    "expandable",
    "highlight",
    "inputType",
    "autocomplete",
    "liveSearchEnabled",
    "liveSearchMaxResults",
    "searchChange",
    "optionClicked",
    "noSearchResultTemplate",
    "toggleSearch",
    "focusSubject",
    "pipe",
    "subscriptAnimationState",
    "searchAutocomplete",
    "activeElement",
    "searchInput",
    "blur",
    "applySearchFocus",
    "animationDoneEvent",
    "toState",
    "focus",
    "setupFocusEventHandlers",
    "isNoSearchTemplatePresent",
    "emptySearchTemplate",
    "isLoggedIn",
    "isEcmLoggedIn",
    "searchSubmit",
    "toggleSearchBar",
    "inputChange",
    "getAutoComplete",
    "isSearchBarActive",
    "elementClicked",
    "onFocus",
    "onBlur",
    "activateToolbar",
    "selectFirstResult",
    "listResultElement",
    "_getHostElement",
    "onRowArrowDown",
    "nextElement",
    "getNextElementSibling",
    "onRowArrowUp",
    "previousElement",
    "getPreviousElementSibling",
    "FocusEvent",
    "nextElementSibling",
    "previousElementSibling",
    "animations",
    "trigger",
    "state",
    "margin-left",
    "transition",
    "animate",
    "customQueryBody",
    "ViewChildren",
    "MatListItem",
    "SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR",
    "NG_VALUE_ACCESSOR",
    "SearchTriggerDirective",
    "multi",
    "changeDetectorRef",
    "_panelOpen",
    "escapeEventStream",
    "onChange",
    "onTouched",
    "closingActionsSubscription",
    "searchPanel",
    "openPanel",
    "subscribeToClosingActions",
    "closePanel",
    "outsideClickStream",
    "fromEvent",
    "clickTarget",
    "writeValue",
    "setTriggerValue",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "handleKeydown",
    "keyCode",
    "ESCAPE",
    "panelOpen",
    "ENTER",
    "handleInput",
    "inputValue",
    "isPanelOptionClicked",
    "isPanelOption",
    "isNoResultOption",
    "contains",
    "firstStable",
    "onStable",
    "optionChanges",
    "panelClosingActions",
    "setValueAndClose",
    "toDisplay",
    "textContent",
    "role",
    "aria-autocomplete",
    "[attr.aria-expanded]",
    "[attr.aria-owns]",
    "(blur)",
    "(input)",
    "(keydown)",
    "DOCUMENT",
    "SearchFilterComponent",
    "queryBuilder",
    "selectedFacetQueries",
    "selectedBuckets",
    "responseFacetQueries",
    "responseFacetFields",
    "onDataLoaded",
    "onCategoryExpanded",
    "category",
    "expanded",
    "onCategoryCollapsed",
    "onFacetFieldExpanded",
    "$expanded",
    "onFacetFieldCollapsed",
    "onFacetQueryToggle",
    "facetQuery",
    "$checked",
    "onFacetToggle",
    "bucket",
    "filterQuery",
    "idx",
    "findIndex",
    "$field",
    "splice",
    "unselectFacetQuery",
    "unselectFacetBucket",
    "context",
    "expandedFields_1",
    "facetsFields",
    "buckets",
    "SearchChipListComponent",
    "searchFilter",
    "SearchTextComponent",
    "settings",
    "match",
    "RegExp",
    "exec",
    "onChangedHandler",
    "SearchRadioComponent",
    "setValue",
    "getSelectedValue",
    "selected",
    "opt",
    "newValue",
    "changeHandler",
    "SearchFieldsComponent",
    "defaultOptions",
    "flush",
    "option",
    "checkedValues",
    "reduce",
    "prev",
    "curr",
    "SearchScopeLocationsComponent",
    "defaultSelection",
    "SearchWidgetsModule",
    "MatRadioModule",
    "entryComponents",
    "SearchWidgetContainerComponent",
    "compiler",
    "module",
    "compileModuleAndAllComponentsSync",
    "factory",
    "componentFactories",
    "clear",
    "componentRef",
    "createComponent",
    "setupWidget",
    "ref",
    "instance",
    "destroy",
    "Compiler",
    "read",
    "ViewContainerRef",
    "ALFRESCO_SEARCH_DIRECTIVES",
    "SearchModule",
    "Members",
    "Containers",
    "DropdownSitesComponent",
    "sitesService",
    "hideMyFiles",
    "siteList",
    "placeholder",
    "change",
    "MY_FILES_VALUE",
    "setDefaultSiteList",
    "selectedSite",
    "extendedOptions",
    "relations",
    "Relations",
    "filteredResultsByMember",
    "unshift",
    "sites",
    "loggedUserName",
    "getEcmCurrentLoggedUserName",
    "isCurrentUserMember",
    "visibility",
    "members",
    "member",
    "SitesDropdownModule",
    "BreadcrumbComponent",
    "root",
    "rootId",
    "route",
    "parseRoute",
    "elements",
    "slice",
    "rootPos",
    "getElementPosition",
    "onRoutePathClick",
    "DropdownBreadcrumbComponent",
    "recalculateNodes",
    "currentNode",
    "previousNodes",
    "reverse",
    "selectbox",
    "hasPreviousNodes",
    "BreadcrumbModule",
    "ConfirmDialogComponent",
    "yesLabel",
    "noLabel",
    "VersionListComponent",
    "versions",
    "isLoading",
    "showComments",
    "allowDownload",
    "versionsApi",
    "loadVersionHistory",
    "canUpdate",
    "restore",
    "versionId",
    "revertVersion",
    "majorVersion",
    "comment",
    "onVersionRestored",
    "listVersionHistory",
    "downloadVersion",
    "versionDownloadUrl",
    "getVersionContentUrl",
    "downloadContent",
    "deleteVersion",
    "minWidth",
    "afterClosed",
    "onVersionDeleted",
    "attachment",
    "contentApi",
    "VersionManagerComponent",
    "uploadSuccess",
    "uploadError",
    "onUploadSuccess",
    "versionListComponent",
    "VersionUploadComponent",
    "canUpload",
    "VersionManagerModule",
    "NameLocationCellComponent",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "ContentNodeSelectorService",
    "extraNodeIds",
    "extraParentFiltering",
    "extraId",
    "defaultSearchNode",
    "defaultValidation",
    "ContentNodeSelectorPanelComponent",
    "contentNodeSelectorService",
    "showingSearchResults",
    "loadingSearchResults",
    "inDialog",
    "_chosenNode",
    "folderIdToShow",
    "paginationStrategy",
    "PaginationStrategy",
    "Infinite",
    "infiniteScroll",
    "debounceSearch",
    "FormControl",
    "valueChanges",
    "searchValue",
    "valuesArray",
    "breadcrumbTransform",
    "siteChanged",
    "chosenSite",
    "siteId",
    "updateResults",
    "clearSearch",
    "startNewSearch",
    "querySearch",
    "showSearchResults",
    "highlighter",
    "onFolderChange",
    "onFolderLoaded",
    "attemptNodeSelection",
    "showBreadcrumbs",
    "getNextPageOfSearch",
    "resetChosenNode",
    "onNodeDoubleClick",
    "documentLibrary",
    "HighlightDirective",
    "ContentNodeSelectorModule",
    "DirectiveModule",
    "DataColumnModule",
    "I18N_ERRORS_PATH",
    "forbidSpecialCharacters",
    "forbidEndingDot",
    "forbidOnlySpaces",
    "FolderDialogComponent",
    "validators",
    "Validators",
    "required",
    "parentNodeId",
    "edit",
    "updateNode",
    "editing",
    "valid",
    "errorMessage",
    "DialogModule",
    "FormModule",
    "MatMomentDatetimeModule",
    "MatDatetimepickerModule",
    "DEFAULT_FOLDER_PARENT_ID",
    "FolderCreateDirective",
    "openDialog",
    "DIALOG_WIDTH",
    "dialogConfig",
    "dialogInstance",
    "componentInstance",
    "folderCreate",
    "FolderEditDirective",
    "folderEdit",
    "FolderDirectiveModule",
    "ContentMetadataCardComponent",
    "displayEmpty",
    "readOnly",
    "editable",
    "toggleEdit",
    "toggleExpanded",
    "BasicPropertiesService",
    "fileSizePipe",
    "getProperties",
    "sizeInBytes",
    "mimeTypeName",
    "author",
    "CardViewTextItemModel",
    "createdByUser",
    "displayName",
    "CardViewDateItemModel",
    "createdAt",
    "pipes",
    "modifiedByUser",
    "modifiedAt",
    "multiline",
    "FileSizePipe",
    "D_MLTEXT",
    "D_DATETIME",
    "D_FLOAT",
    "D_DOUBLE",
    "D_BOOLEAN",
    "PropertyGroupTranslatorService",
    "translateToCardViewGroups",
    "propertyGroups",
    "propertyValues",
    "propertyGroup",
    "translatedPropertyGroup",
    "translateArray",
    "property",
    "translate",
    "propertyValue",
    "checkECMTypeValidity",
    "dataType",
    "cardViewItemProperty",
    "propertyDefinition",
    "defaultValue",
    "CardViewIntItemModel",
    "CardViewFloatItemModel",
    "CardViewDatetimeItemModel",
    "CardViewBoolItemModel",
    "ecmPropertyType",
    "RECOGNISED_ECM_TYPES",
    "emptyGroup",
    "getGroup",
    "groupName",
    "getProperty",
    "propertyName",
    "propertyDefinitions",
    "object",
    "groupDefinition",
    "keys",
    "AspectOrientedConfigService",
    "isGroupAllowed",
    "reorganiseByConfig",
    "aspects",
    "groupAccumulator",
    "aspectName",
    "newGroup",
    "getOrganisedPropertyGroup",
    "organisedPropertyGroup",
    "aspectProperties",
    "props",
    "IndifferentConfigService",
    "LayoutOrientedConfigService",
    "getMatchingGroups",
    "layoutBlock",
    "flattenItems",
    "explodedItem",
    "accumulator",
    "flattenedProperties",
    "isArray",
    "aspect",
    "ContentMetadataConfigFactory",
    "appConfigService",
    "presetName",
    "presetConfig",
    "presets",
    "_a",
    "DEFAULT_PRESET_NAME",
    "INDIFFERENT_PRESET",
    "createConfig",
    "isLayoutOrientedPreset",
    "isAspectOrientedPreset",
    "freeze",
    "isObject",
    "x",
    "PropertyDescriptorsService",
    "alfrescoApiService",
    "load",
    "groupNames",
    "groupFetchStreams",
    "defer",
    "classesApi",
    "getClass",
    "convertToObject",
    "propertyGroupsArray",
    "ContentMetadataService",
    "basicPropertiesService",
    "contentMetadataConfigFactory",
    "propertyGroupTranslatorService",
    "propertyDescriptorsService",
    "getBasicProperties",
    "getGroupedProperties",
    "groupedProperties",
    "aspectNames",
    "config_1",
    "groups",
    "ContentMetadataComponent",
    "contentMetadataService",
    "cardViewUpdateService",
    "nodeHasBeenUpdated",
    "itemUpdated$",
    "saveNode",
    "nodeUpdated",
    "nodeChange",
    "basicProperties$",
    "groupedProperties$",
    "nodeBody",
    "changed",
    "CardViewUpdateService",
    "ContentMetadataModule",
    "CardViewModule",
    "PermissionDisplayModel",
    "isInherited",
    "authorityId",
    "accessStatus",
    "NodePermissionService",
    "searchApiService",
    "nodeService",
    "getNodeRoles",
    "retrieveSiteQueryBody",
    "buildRetrieveSiteQueryBody",
    "siteNodeList",
    "siteName",
    "getGroupMembersBySiteName",
    "permissions",
    "settable",
    "updatePermissionRoles",
    "updatedPermissionRole",
    "permissionBody",
    "locallySet",
    "getGroupMemeberByGroupName",
    "displayResult",
    "formattedRoleName",
    "groupsApi",
    "getGroupMembers",
    "nodePath",
    "join",
    "PermissionListComponent",
    "nodePermissionService",
    "fetchNodePermissions",
    "actualNode",
    "permissionList",
    "getPermissionList",
    "settableList",
    "settableRoles",
    "allPermissions",
    "inherited",
    "permissionInherited",
    "saveNewRole",
    "permissionRow",
    "buildUpdatedPermission",
    "newRole",
    "permissionRole",
    "InheritPermissionDirective",
    "onInheritPermissionClicked",
    "isInheritanceEnabled",
    "(click)",
    "PermissionManagerModule",
    "ContentModule",
    "CoreModule",
    "TRANSLATION_PROVIDER",
    "useValue",
    "source"
  ],
  "mappings": "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"
}
