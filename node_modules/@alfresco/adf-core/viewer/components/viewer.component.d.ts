/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Location } from '@angular/common';
import { EventEmitter, ElementRef, OnChanges, SimpleChanges, TemplateRef, OnInit, OnDestroy } from '@angular/core';
import { MinimalNodeEntryEntity } from 'alfresco-js-api';
import { BaseEvent } from '../../events';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { ViewerMoreActionsComponent } from './viewer-more-actions.component';
import { ViewerOpenWithComponent } from './viewer-open-with.component';
import { ViewerSidebarComponent } from './viewer-sidebar.component';
import { ViewerToolbarComponent } from './viewer-toolbar.component';
export declare class ViewerComponent implements OnChanges, OnInit, OnDestroy {
    private apiService;
    private logService;
    private location;
    private el;
    toolbar: ViewerToolbarComponent;
    sidebar: ViewerSidebarComponent;
    mnuOpenWith: ViewerOpenWithComponent;
    mnuMoreActions: ViewerMoreActionsComponent;
    /** If you want to load an external file that does not come from ACS you
     * can use this URL to specify where to load the file from.
     */
    urlFile: string;
    /** Viewer to use with the `urlFile` address (`pdf`, `image`, `media`, `text`).
     * Used when `urlFile` has no filename and extension.
     */
    urlFileViewer: string;
    /** Loads a Blob File */
    blobFile: Blob;
    /** Node Id of the file to load. */
    fileNodeId: string;
    /** Shared link id (to display shared file). */
    sharedLinkId: string;
    /** If `true` then show the Viewer as a full page over the current content.
     * Otherwise fit inside the parent div.
     */
    overlayMode: boolean;
    /** Hide or show the viewer */
    showViewer: boolean;
    /** Hide or show the toolbar */
    showToolbar: boolean;
    /** Specifies the name of the file when it is not available from the URL. */
    displayName: string;
    /** Allows `back` navigation */
    allowGoBack: boolean;
    /** Toggles downloading. */
    allowDownload: boolean;
    /** Toggles printing. */
    allowPrint: boolean;
    /** Toggles sharing. */
    allowShare: boolean;
    /** Toggles the 'Full Screen' feature. */
    allowFullScreen: boolean;
    /** Toggles before/next navigation. You can use the arrow buttons to navigate
     * between documents in the collection.
     */
    allowNavigate: boolean;
    /** Toggles the "before" ("<") button. Requires `allowNavigate` to be enabled. */
    canNavigateBefore: boolean;
    /** Toggles the next (">") button. Requires `allowNavigate` to be enabled. */
    canNavigateNext: boolean;
    /** Toggles the sidebar. */
    allowSidebar: boolean;
    /** Toggles PDF thumbnails. */
    allowThumbnails: boolean;
    /** Toggles sidebar visibility. Requires `allowSidebar` to be set to `true`. */
    showSidebar: boolean;
    /** The position of the sidebar. Can be `left` or `right`. */
    sidebarPosition: string;
    /** The template for the sidebar. The template context contains the loaded node data. */
    sidebarTemplate: TemplateRef<any>;
    /** The template for the pdf thumbnails. */
    thumbnailsTemplate: TemplateRef<any>;
    /** MIME type of the file content (when not determined by the filename extension). */
    mimeType: string;
    /** Content filename. */
    fileName: string;
    /** URL to download. */
    downloadUrl: string;
    /** Number of times the Viewer will retry fetching content Rendition.
     * There is a delay of at least one second between attempts.
     */
    maxRetries: number;
    /** Emitted when user clicks the 'Back' button. */
    goBack: EventEmitter<BaseEvent<any>>;
    /** Emitted when user clicks the 'Download' button. */
    download: EventEmitter<BaseEvent<any>>;
    /** Emitted when user clicks the 'Print' button. */
    print: EventEmitter<BaseEvent<any>>;
    /** Emitted when user clicks the 'Share' button. */
    share: EventEmitter<BaseEvent<any>>;
    /** Emitted when the viewer is shown or hidden. */
    showViewerChange: EventEmitter<boolean>;
    /** Emitted when the filename extension changes. */
    extensionChange: EventEmitter<string>;
    /** Emitted when user clicks 'Navigate Before' ("<") button. */
    navigateBefore: EventEmitter<{}>;
    /** Emitted when user clicks 'Navigate Next' (">") button. */
    navigateNext: EventEmitter<{}>;
    showPdfThumbnails: boolean;
    viewerType: string;
    isLoading: boolean;
    node: MinimalNodeEntryEntity;
    extensionTemplates: {
        template: TemplateRef<any>;
        isVisible: boolean;
    }[];
    externalExtensions: string[];
    urlFileContent: string;
    otherMenu: any;
    extension: string;
    sidebarTemplateContext: {
        node: MinimalNodeEntryEntity;
    };
    private subscriptions;
    private extensions;
    private mimeTypes;
    constructor(apiService: AlfrescoApiService, logService: LogService, location: Location, el: ElementRef);
    isSourceDefined(): boolean;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private onNodeUpdated(node);
    ngOnChanges(changes: SimpleChanges): void;
    private setUpBlobData();
    private setUpUrlFile();
    private setUpNodeFile(data);
    private setUpSharedLinkFile(details);
    toggleSidebar(): void;
    private getDisplayName(name);
    scrollTop(): void;
    getViewerTypeByMimeType(mimeType: string): string;
    getViewerTypeByExtension(extension: string): "unknown" | "pdf" | "custom" | "image" | "media" | "text";
    onBackButtonClick(): void;
    onNavigateBeforeClick(): void;
    onNavigateNextClick(): void;
    /**
     * close the viewer
     */
    close(): void;
    /**
     * get File name from url
     *
     * @param  url - url file
     */
    getFilenameFromUrl(url: string): string;
    /**
     * Get file extension from the string.
     * Supports the URL formats like:
     * http://localhost/test.jpg?cache=1000
     * http://localhost/test.jpg#cache=1000
     *
     * @param fileName - file name
     */
    getFileExtension(fileName: string): string;
    isCustomViewerExtension(extension: string): boolean;
    /**
     * Keyboard event listener
     * @param  event
     */
    handleKeyboardEvent(event: KeyboardEvent): void;
    downloadContent(): void;
    printContent(): void;
    shareContent(): void;
    /**
     * Triggers full screen mode with a main content area displayed.
     */
    enterFullScreen(): void;
    private displayNodeRendition(nodeId);
    private displaySharedLinkRendition(sharedId);
    private resolveRendition(nodeId, renditionId);
    private waitRendition(nodeId, renditionId, retries);
    private wait(ms);
}
