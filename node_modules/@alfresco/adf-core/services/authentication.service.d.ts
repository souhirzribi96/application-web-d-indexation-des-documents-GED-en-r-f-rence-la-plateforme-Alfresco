/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import { AlfrescoApiService } from './alfresco-api.service';
import { CookieService } from './cookie.service';
import { LogService } from './log.service';
import { StorageService } from './storage.service';
import { UserPreferencesService } from './user-preferences.service';
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';
import { RedirectionModel } from '../models/redirection.model';
export declare class AuthenticationService {
    private preferences;
    private alfrescoApi;
    private storage;
    private cookie;
    private logService;
    private redirectUrl;
    onLogin: Subject<any>;
    onLogout: Subject<any>;
    constructor(preferences: UserPreferencesService, alfrescoApi: AlfrescoApiService, storage: StorageService, cookie: CookieService, logService: LogService);
    /**
     * Checks if the user logged in.
     * @returns True if logged in, false otherwise
     */
    isLoggedIn(): boolean;
    /**
     * Logs the user in.
     * @param username Username for the login
     * @param password Password for the login
     * @param rememberMe Stores the user's login details if true
     * @returns Object with auth type ("ECM", "BPM" or "ALL") and auth ticket
     */
    login(username: string, password: string, rememberMe?: boolean): Observable<{
        type: string;
        ticket: any;
    }>;
    /**
     * Saves the "remember me" cookie as either a long-life cookie or a session cookie.
     * @param rememberMe Enables a long-life cookie
     */
    private saveRememberMeCookie(rememberMe);
    /**
     * Checks whether the "remember me" cookie was set or not.
     * @returns True if set, false otherwise
     */
    isRememberMeSet(): boolean;
    /**
     * Initialize the alfresco Api with user and password end call the login method
     * @param username
     * @param password
     */
    private callApiLogin(username, password);
    /**
     * Logs the user out.
     * @returns Response event called when logout is complete
     */
    logout(): Observable<any>;
    /**
     *
     */
    private callApiLogout();
    /**
     * Removes the login ticket from Storage.
     */
    removeTicket(): void;
    /**
     * Gets the ECM ticket stored in the Storage.
     * @returns The ticket or `null` if none was found
     */
    getTicketEcm(): string | null;
    /**
     * Gets the BPM ticket stored in the Storage.
     * @returns The ticket or `null` if none was found
     */
    getTicketBpm(): string | null;
    /**
     * Gets the BPM ticket from the Storage in Base 64 format.
     * @returns The ticket or `null` if none was found
     */
    getTicketEcmBase64(): string | null;
    /**
     * Saves the ECM and BPM ticket in the Storage.
     */
    saveTickets(): void;
    /**
     * Saves the ECM ticket in the Storage.
     */
    saveTicketEcm(): void;
    /**
     * Saves the BPM ticket in the Storage.
     */
    saveTicketBpm(): void;
    /**
     * Saves the AUTH ticket in the Storage.
     */
    saveTicketAuth(): void;
    /**
     * Checks if the user is logged in on an ECM provider.
     * @returns True if logged in, false otherwise
     */
    isEcmLoggedIn(): boolean;
    /**
     * Checks if the user is logged in on a BPM provider.
     * @returns True if logged in, false otherwise
     */
    isBpmLoggedIn(): boolean;
    /**
     * Gets the ECM username.
     * @returns The ECM username
     */
    getEcmUsername(): string;
    /**
     * Gets the BPM username
     * @returns The BPM username
     */
    getBpmUsername(): string;
    /** Sets the URL to redirect to after login.
     * @param url URL to redirect to
     */
    setRedirectUrl(url: RedirectionModel): void;
    /** Gets the URL to redirect to after login.
     * @param provider Service provider. Can be "ECM", "BPM" or "ALL".
     * @returns The redirect URL
     */
    getRedirectUrl(provider: string): string;
    private hasValidRedirection(provider);
    private hasSelectedProviderAll(provider);
    /**
     * Prints an error message in the console browser
     * @param error Error message
     * @returns Object representing the error message
     */
    handleError(error: any): Observable<any>;
}
