/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs/Observable';
import { AppConfigService } from '../app-config/app-config.service';
import { AlfrescoApiService } from './alfresco-api.service';
import { StorageService } from './storage.service';
import 'rxjs/add/operator/distinctUntilChanged';
export declare enum UserPreferenceValues {
    PaginationSize = "PAGINATION_SIZE",
    DisableCSRF = "DISABLE_CSRF",
    Locale = "LOCALE",
    SupportedPageSizes = "supportedPageSizes",
}
export declare class UserPreferencesService {
    translate: TranslateService;
    private appConfig;
    private storage;
    private apiService;
    defaults: {
        paginationSize: number;
        supportedPageSizes: number[];
        locale: string;
    };
    private userPreferenceStatus;
    /**
     * @deprecated we are grouping every value changed on the user preference in a single stream : userPreferenceValue$
     */
    locale$: Observable<string>;
    private localeSubject;
    private onChangeSubject;
    onChange: Observable<any>;
    constructor(translate: TranslateService, appConfig: AppConfigService, storage: StorageService, apiService: AlfrescoApiService);
    private initUserPreferenceStatus();
    select(property: string): Observable<any>;
    /**
     * Gets a preference property.
     * @param property Name of the property
     * @param defaultValue Default to return if the property is not found
     */
    get(property: string, defaultValue?: string): string;
    /**
     * Sets a preference property.
     * @param property Name of the property
     * @param value New value for the property
     */
    set(property: string, value: any): void;
    /** Gets the active storage prefix for preferences. */
    getStoragePrefix(): string;
    /**
     * Sets the active storage prefix for preferences.
     * @param value Name of the prefix
     */
    setStoragePrefix(value: string): void;
    /**
     * Gets the full property key with prefix.
     * @param property The property name
     */
    getPropertyKey(property: string): string;
    /** Gets an array containing the available page sizes. */
    getDefaultPageSizes(): number[];
    /** Authorization type (can be "ECM", "BPM" or "ALL"). */
    authType: string;
    /** Prevents the CSRF Token from being submitted if true. Only valid for Process Services. */
    disableCSRF: boolean;
    /** Pagination size. */
    paginationSize: number;
    /** Current locale setting. */
    locale: string;
    /** Gets the default locale. */
    getDefaultLocale(): string;
}
