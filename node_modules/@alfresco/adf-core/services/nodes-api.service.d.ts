/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MinimalNodeEntryEntity, NodePaging } from 'alfresco-js-api';
import { Observable } from 'rxjs/Observable';
import { AlfrescoApiService } from './alfresco-api.service';
import { UserPreferencesService } from './user-preferences.service';
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/throw';
export declare class NodesApiService {
    private api;
    private preferences;
    constructor(api: AlfrescoApiService, preferences: UserPreferencesService);
    private readonly nodesApi;
    private getEntryFromEntity(entity);
    /**
     * Gets the stored information about a node.
     * @param nodeId ID of the target node
     * @param options Optional parameters supported by JSAPI
     * @returns Node information
     */
    getNode(nodeId: string, options?: any): Observable<MinimalNodeEntryEntity>;
    /**
     * Gets the items contained in a folder node.
     * @param nodeId ID of the target node
     * @param options Optional parameters supported by JSAPI
     * @returns List of child items from the folder
     */
    getNodeChildren(nodeId: string, options?: any): Observable<NodePaging>;
    /**
     * Creates a new document node inside a folder.
     * @param parentNodeId ID of the parent folder node
     * @param nodeBody Data for the new node
     * @param options Optional parameters supported by JSAPI
     * @returns Details of the new node
     */
    createNode(parentNodeId: string, nodeBody: any, options?: any): Observable<MinimalNodeEntryEntity>;
    /**
     * Creates a new folder node inside a parent folder.
     * @param parentNodeId ID of the parent folder node
     * @param nodeBody Data for the new folder
     * @param options Optional parameters supported by JSAPI
     * @returns Details of the new folder
     */
    createFolder(parentNodeId: string, nodeBody: any, options?: any): Observable<MinimalNodeEntryEntity>;
    /**
     * Updates the information about a node.
     * @param nodeId ID of the target node
     * @param nodeBody New data for the node
     * @param options Optional parameters supported by JSAPI
     * @returns Updated node information
     */
    updateNode(nodeId: string, nodeBody: any, options?: any): Observable<MinimalNodeEntryEntity>;
    /**
     * Moves a node to the trashcan.
     * @param nodeId ID of the target node
     * @param options Optional parameters supported by JSAPI
     * @returns Empty result that notifies when the deletion is complete
     */
    deleteNode(nodeId: string, options?: any): Observable<void>;
    /**
     * Restores a node previously moved to the trashcan.
     * @param nodeId ID of the node to restore
     * @returns Details of the restored node
     */
    restoreNode(nodeId: string): Observable<MinimalNodeEntryEntity>;
    /**
     * Reports an error.
     * @param error Object representing the error
     * @returns Error information
     */
    handleError(error: any): Observable<any>;
}
