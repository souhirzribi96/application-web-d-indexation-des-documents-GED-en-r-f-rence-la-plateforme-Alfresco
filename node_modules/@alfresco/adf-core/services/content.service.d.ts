/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DomSanitizer } from '@angular/platform-browser';
import { MinimalNodeEntryEntity, Node, NodeEntry } from 'alfresco-js-api';
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import { FolderCreatedEvent } from '../events/folder-created.event';
import { PermissionsEnum } from '../models/permissions.enum';
import { AlfrescoApiService } from './alfresco-api.service';
import { AuthenticationService } from './authentication.service';
import { LogService } from './log.service';
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/do';
import 'rxjs/add/observable/throw';
export declare class ContentService {
    authService: AuthenticationService;
    apiService: AlfrescoApiService;
    private logService;
    private sanitizer;
    private saveData;
    folderCreated: Subject<FolderCreatedEvent>;
    folderCreate: Subject<MinimalNodeEntryEntity>;
    folderEdit: Subject<MinimalNodeEntryEntity>;
    constructor(authService: AuthenticationService, apiService: AlfrescoApiService, logService: LogService, sanitizer: DomSanitizer);
    /**
     * Invokes content download for a Blob with a file name.
     *
     * @param blob Content to download.
     * @param fileName Name of the resulting file.
     *
     * @memberOf ContentService
     */
    downloadBlob(blob: Blob, fileName: string): void;
    /**
     * Invokes content download for a data array with a file name.
     *
     * @param data Data to download.
     * @param fileName Name of the resulting file.
     *
     * @memberOf ContentService
     */
    downloadData(data: any, fileName: string): void;
    /**
     * Invokes content download for a JSON object with a file name.
     *
     * @param json JSON object to download.
     * @param fileName Name of the resulting file.
     *
     * @memberOf ContentService
     */
    downloadJSON(json: any, fileName: string): void;
    /**
     * Creates a trusted object URL from the Blob.
     * WARNING: calling this method with untrusted user data exposes your application to XSS security risks!
     * @param  blob Data to wrap into object URL
     *
     * @memberOf ContentService
     */
    createTrustedUrl(blob: Blob): string;
    private readonly contentApi;
    /**
     * Get thumbnail URL for the given document node.
     *
     * @param node Node to get URL for.
     * @param [attachment] Retrieve content as an attachment for download
     * @param [ticket] Custom ticket to use for authentication
     */
    getDocumentThumbnailUrl(node: any, attachment?: boolean, ticket?: string): string;
    /**
     * Get content URL for the given node.
     *
     * @param nodeId or node to get URL for.
     * @param [attachment] Retrieve content as an attachment for download
     * @param [ticket] Custom ticket to use for authentication
     */
    getContentUrl(node: any, attachment?: boolean, ticket?: string): string;
    /**
     * Get content for the given node.
     * @param nodeId ID of the target node
     *
     */
    getNodeContent(nodeId: string): Observable<any>;
    /**
     * Create a folder
     * @param relativePath Location to create the folder
     * @param name Folder name
     * @param parentId Node ID of parent folder
     */
    createFolder(relativePath: string, name: string, parentId?: string): Observable<FolderCreatedEvent>;
    /**
     * Gets a Node via its node ID.
     * @param nodeId
     * @param opts
     * @returns Details of the folder
     */
    getNode(nodeId: string, opts?: any): Observable<NodeEntry>;
    /**
     * Check if the user has permissions on that node
     * @param node Node to check allowableOperations
     * @param permission Create, delete, update, updatePermissions, !create, !delete, !update, !updatePermissions
     *
     */
    hasPermission(node: Node, permission: PermissionsEnum | string): boolean;
    /**
     * Check if the node has the properties allowableOperations
     * @param node Node to check allowableOperations
     *
     */
    hasAllowableOperations(node: any): boolean;
    private handleError(error);
}
